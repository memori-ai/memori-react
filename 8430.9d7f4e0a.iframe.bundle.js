(self.webpackChunk_memori_ai_memori_react=self.webpackChunk_memori_ai_memori_react||[]).push([[8430],{"./node_modules/@headlessui/react/dist/components/popover/popover.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{J:()=>mt});var n,f,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_utils_match_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@headlessui/react/dist/utils/match.js"),_utils_render_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@headlessui/react/dist/utils/render.js"),_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-sync-refs.js"),_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-id.js"),_keyboard_js__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@headlessui/react/dist/components/keyboard.js"),_utils_bugs_js__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./node_modules/@headlessui/react/dist/utils/bugs.js"),_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@headlessui/react/dist/utils/focus-management.js"),_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./node_modules/@headlessui/react/dist/internal/open-closed.js"),_hooks_use_resolve_button_type_js__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-resolve-button-type.js"),_hooks_use_outside_click_js__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-outside-click.js"),_utils_owner_js__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./node_modules/@headlessui/react/dist/utils/owner.js"),_hooks_use_owner_js__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-owner.js"),_hooks_use_event_listener_js__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-event-listener.js"),_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./node_modules/@headlessui/react/dist/internal/hidden.js"),_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-event.js"),_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-tab-direction.js"),Ae=((f=Ae||{})[f.Open=0]="Open",f[f.Closed=1]="Closed",f),Ce=((n=Ce||{})[n.TogglePopover=0]="TogglePopover",n[n.ClosePopover=1]="ClosePopover",n[n.SetButton=2]="SetButton",n[n.SetButtonId=3]="SetButtonId",n[n.SetPanel=4]="SetPanel",n[n.SetPanelId=5]="SetPanelId",n);let Re={0:r=>({...r,popoverState:(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(r.popoverState,{0:1,1:0})}),1:r=>1===r.popoverState?r:{...r,popoverState:1},2:(r,t)=>r.button===t.button?r:{...r,button:t.button},3:(r,t)=>r.buttonId===t.buttonId?r:{...r,buttonId:t.buttonId},4:(r,t)=>r.panel===t.panel?r:{...r,panel:t.panel},5:(r,t)=>r.panelId===t.panelId?r:{...r,panelId:t.panelId}},te=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);function Q(r){let t=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(te);if(null===t){let f=new Error(`<${r} /> is missing a parent <Popover /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(f,Q),f}return t}te.displayName="PopoverContext";let oe=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);function re(r){let t=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(oe);if(null===t){let f=new Error(`<${r} /> is missing a parent <Popover /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(f,re),f}return t}oe.displayName="PopoverAPIContext";let ne=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);function ce(){return(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ne)}ne.displayName="PopoverGroupContext";let le=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);function Me(r,t){return(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(t.type,Re,r,t)}le.displayName="PopoverPanelContext";let Ie=(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.yV)((function(t,f){var O;let o=`headlessui-popover-button-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,v=`headlessui-popover-panel-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,a=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),n=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(f,(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.h)((e=>{a.current=e}))),g=(0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(Me,{popoverState:1,button:null,buttonId:o,panel:null,panelId:v,beforePanelSentinel:(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)(),afterPanelSentinel:(0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)()}),[{popoverState:y,button:l,panel:P,beforePanelSentinel:s,afterPanelSentinel:B},i]=g,T=(0,_hooks_use_owner_js__WEBPACK_IMPORTED_MODULE_5__.i)(null!=(O=a.current)?O:l);(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>i({type:3,buttonId:o})),[o,i]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>i({type:5,panelId:v})),[v,i]);let c=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>{if(!l||!P)return!1;for(let M of document.querySelectorAll("body > *"))if(Number(null==M?void 0:M.contains(l))^Number(null==M?void 0:M.contains(P)))return!0;let e=(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.GO)(),p=e.indexOf(l),m=(p+e.length-1)%e.length,C=(p+1)%e.length,D=e[m],V=e[C];return!P.contains(D)&&!P.contains(V)}),[l,P]),d=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({buttonId:o,panelId:v,close:()=>i({type:1})})),[o,v,i]),E=ce(),A=null==E?void 0:E.registerPopover,L=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((()=>{var e;return null!=(e=null==E?void 0:E.isFocusWithinPopoverGroup())?e:(null==T?void 0:T.activeElement)&&((null==l?void 0:l.contains(T.activeElement))||(null==P?void 0:P.contains(T.activeElement)))}));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>null==A?void 0:A(d)),[A,d]),(0,_hooks_use_event_listener_js__WEBPACK_IMPORTED_MODULE_8__.O)(null==T?void 0:T.defaultView,"focus",(e=>{var p,m,C,D;0===y&&(L()||!l||!P||null!=(m=null==(p=s.current)?void 0:p.contains)&&m.call(p,e.target)||null!=(D=null==(C=B.current)?void 0:C.contains)&&D.call(C,e.target)||i({type:1}))}),!0),(0,_hooks_use_outside_click_js__WEBPACK_IMPORTED_MODULE_9__.O)([l,P],((e,p)=>{i({type:1}),(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.sP)(p,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.tJ.Loose)||(e.preventDefault(),null==l||l.focus())}),0===y);let I=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((e=>{i({type:1});let p=e?e instanceof HTMLElement?e:"current"in e&&e.current instanceof HTMLElement?e.current:l:l;null==p||p.focus()})),H=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({close:I,isPortalled:c})),[I,c]),u=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({open:0===y,close:I})),[y,I]),S=t,R={ref:n};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(te.Provider,{value:g},react__WEBPACK_IMPORTED_MODULE_0__.createElement(oe.Provider,{value:H},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.up,{value:(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(y,{0:_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.ZM.Open,1:_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.ZM.Closed})},(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.sY)({ourProps:R,theirProps:S,slot:u,defaultTag:"div",name:"Popover"}))))})),he=(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.yV)((function(t,f){let[o,v]=Q("Popover.Button"),{isPortalled:a}=re("Popover.Button"),n=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),g=`headlessui-focus-sentinel-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,y=ce(),l=null==y?void 0:y.closeOthers,P=function Oe(){return(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(le)}(),s=null!==P&&P===o.panelId,B=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(n,f,s?null:e=>e&&v({type:2,button:e})),i=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(n,f),T=(0,_hooks_use_owner_js__WEBPACK_IMPORTED_MODULE_5__.i)(n),c=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((e=>{var p,m,C;if(s){if(1===o.popoverState)return;switch(e.key){case _keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Space:case _keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Enter:e.preventDefault(),null==(m=(p=e.target).click)||m.call(p),v({type:1}),null==(C=o.button)||C.focus()}}else switch(e.key){case _keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Space:case _keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Enter:e.preventDefault(),e.stopPropagation(),1===o.popoverState&&(null==l||l(o.buttonId)),v({type:0});break;case _keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Escape:if(0!==o.popoverState)return null==l?void 0:l(o.buttonId);if(!n.current||(null==T?void 0:T.activeElement)&&!n.current.contains(T.activeElement))return;e.preventDefault(),e.stopPropagation(),v({type:1})}})),d=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((e=>{s||e.key===_keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Space&&e.preventDefault()})),E=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((e=>{var p,m;(0,_utils_bugs_js__WEBPACK_IMPORTED_MODULE_12__.P)(e.currentTarget)||t.disabled||(s?(v({type:1}),null==(p=o.button)||p.focus()):(e.preventDefault(),e.stopPropagation(),1===o.popoverState&&(null==l||l(o.buttonId)),v({type:0}),null==(m=o.button)||m.focus()))})),A=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((e=>{e.preventDefault(),e.stopPropagation()})),L=0===o.popoverState,I=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({open:L})),[L]),H=(0,_hooks_use_resolve_button_type_js__WEBPACK_IMPORTED_MODULE_13__.f)(t,n),u=t,S=s?{ref:i,type:H,onKeyDown:c,onClick:E}:{ref:B,id:o.buttonId,type:H,"aria-expanded":t.disabled?void 0:0===o.popoverState,"aria-controls":o.panel?o.panelId:void 0,onKeyDown:c,onKeyUp:d,onClick:E,onMouseDown:A},R=(0,_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.l)(),O=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((()=>{let e=o.panel;e&&function p(){(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(R.current,{[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Forwards]:()=>(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(e,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.First),[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Backwards]:()=>(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(e,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.Last)})}()}));return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.sY)({ourProps:S,theirProps:u,slot:I,defaultTag:"button",name:"Popover.Button"}),L&&!s&&a&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__._,{id:g,features:_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__.A.Focusable,as:"button",type:"button",onFocus:O}))})),De=_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.AN.RenderStrategy|_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.AN.Static,xe=(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.yV)((function(t,f){let[{popoverState:o},v]=Q("Popover.Overlay"),a=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(f),n=`headlessui-popover-overlay-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,g=(0,_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.oJ)(),y=null!==g?g===_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.ZM.Open:0===o,l=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((i=>{if((0,_utils_bugs_js__WEBPACK_IMPORTED_MODULE_12__.P)(i.currentTarget))return i.preventDefault();v({type:1})})),P=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({open:0===o})),[o]);return(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.sY)({ourProps:{ref:a,id:n,"aria-hidden":!0,onClick:l},theirProps:t,slot:P,defaultTag:"div",features:De,visible:y,name:"Popover.Overlay"})})),Ge=_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.AN.RenderStrategy|_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.AN.Static,ke=(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.yV)((function(t,f){let{focus:o=!1,...v}=t,[a,n]=Q("Popover.Panel"),{close:g,isPortalled:y}=re("Popover.Panel"),l=`headlessui-focus-sentinel-before-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,P=`headlessui-focus-sentinel-after-${(0,_hooks_use_id_js__WEBPACK_IMPORTED_MODULE_3__.M)()}`,s=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),B=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(s,f,(u=>{n({type:4,panel:u})})),i=(0,_hooks_use_owner_js__WEBPACK_IMPORTED_MODULE_5__.i)(s),T=(0,_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.oJ)(),c=null!==T?T===_internal_open_closed_js__WEBPACK_IMPORTED_MODULE_10__.ZM.Open:0===a.popoverState,d=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((u=>{var S;if(u.key===_keyboard_js__WEBPACK_IMPORTED_MODULE_11__.R.Escape){if(0!==a.popoverState||!s.current||(null==i?void 0:i.activeElement)&&!s.current.contains(i.activeElement))return;u.preventDefault(),u.stopPropagation(),n({type:1}),null==(S=a.button)||S.focus()}}));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{var u;t.static||1===a.popoverState&&(null==(u=t.unmount)||u)&&n({type:4,panel:null})}),[a.popoverState,t.unmount,t.static,n]),(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{if(!o||0!==a.popoverState||!s.current)return;let u=null==i?void 0:i.activeElement;s.current.contains(u)||(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(s.current,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.First)}),[o,s,a.popoverState]);let E=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({open:0===a.popoverState,close:g})),[a,g]),A={ref:B,id:a.panelId,onKeyDown:d,onBlur:o&&0===a.popoverState?u=>{var R,O,e,p,m;let S=u.relatedTarget;!S||!s.current||null!=(R=s.current)&&R.contains(S)||(n({type:1}),((null==(e=null==(O=a.beforePanelSentinel.current)?void 0:O.contains)?void 0:e.call(O,S))||(null==(m=null==(p=a.afterPanelSentinel.current)?void 0:p.contains)?void 0:m.call(p,S)))&&S.focus({preventScroll:!0}))}:void 0,tabIndex:-1},L=(0,_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.l)(),I=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((()=>{let u=s.current;u&&function S(){(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(L.current,{[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Forwards]:()=>{(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(u,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.First)},[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Backwards]:()=>{var R;null==(R=a.button)||R.focus({preventScroll:!0})}})}()})),H=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((()=>{let u=s.current;u&&function S(){(0,_utils_match_js__WEBPACK_IMPORTED_MODULE_1__.E)(L.current,{[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Forwards]:()=>{var C,D,V;if(!a.button)return;let R=(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.GO)(),O=R.indexOf(a.button),e=R.slice(0,O+1),m=[...R.slice(O+1),...e];for(let M of m.slice())if((null==(D=null==(C=null==M?void 0:M.id)?void 0:C.startsWith)?void 0:D.call(C,"headlessui-focus-sentinel-"))||(null==(V=a.panel)?void 0:V.contains(M))){let ae=m.indexOf(M);-1!==ae&&m.splice(ae,1)}(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(m,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.First,!1)},[_hooks_use_tab_direction_js__WEBPACK_IMPORTED_MODULE_14__.N.Backwards]:()=>(0,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.jA)(u,_utils_focus_management_js__WEBPACK_IMPORTED_MODULE_6__.TO.Last)})}()}));return react__WEBPACK_IMPORTED_MODULE_0__.createElement(le.Provider,{value:a.panelId},c&&y&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__._,{id:l,ref:a.beforePanelSentinel,features:_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__.A.Focusable,as:"button",type:"button",onFocus:I}),(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.sY)({ourProps:A,theirProps:v,slot:E,defaultTag:"div",features:Ge,visible:c,name:"Popover.Panel"}),c&&y&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__._,{id:P,ref:a.afterPanelSentinel,features:_internal_hidden_js__WEBPACK_IMPORTED_MODULE_15__.A.Focusable,as:"button",type:"button",onFocus:H}))})),we=(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.yV)((function(t,f){let o=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),v=(0,_hooks_use_sync_refs_js__WEBPACK_IMPORTED_MODULE_4__.T)(o,f),[a,n]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]),g=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((c=>{n((d=>{let E=d.indexOf(c);if(-1!==E){let A=d.slice();return A.splice(E,1),A}return d}))})),y=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((c=>(n((d=>[...d,c])),()=>g(c)))),l=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((()=>{var E;let c=(0,_utils_owner_js__WEBPACK_IMPORTED_MODULE_16__.r)(o);if(!c)return!1;let d=c.activeElement;return!(null==(E=o.current)||!E.contains(d))||a.some((A=>{var L,I;return(null==(L=c.getElementById(A.buttonId))?void 0:L.contains(d))||(null==(I=c.getElementById(A.panelId))?void 0:I.contains(d))}))})),P=(0,_hooks_use_event_js__WEBPACK_IMPORTED_MODULE_7__.z)((c=>{for(let d of a)d.buttonId!==c&&d.close()})),s=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({registerPopover:y,unregisterPopover:g,isFocusWithinPopoverGroup:l,closeOthers:P})),[y,g,l,P]),B=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>({})),[]),i=t,T={ref:v};return react__WEBPACK_IMPORTED_MODULE_0__.createElement(ne.Provider,{value:s},(0,_utils_render_js__WEBPACK_IMPORTED_MODULE_2__.sY)({ourProps:T,theirProps:i,slot:B,defaultTag:"div",name:"Popover.Group"}))})),mt=Object.assign(Ie,{Button:he,Overlay:xe,Panel:ke,Group:we})},"./node_modules/@headlessui/react/dist/components/radio-group/radio-group.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E:()=>et});var react=__webpack_require__("./node_modules/react/index.js"),render=__webpack_require__("./node_modules/@headlessui/react/dist/utils/render.js"),use_id=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-id.js"),match=__webpack_require__("./node_modules/@headlessui/react/dist/utils/match.js"),use_iso_morphic_effect=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-iso-morphic-effect.js"),keyboard=__webpack_require__("./node_modules/@headlessui/react/dist/components/keyboard.js"),focus_management=__webpack_require__("./node_modules/@headlessui/react/dist/utils/focus-management.js");var use_sync_refs=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-sync-refs.js"),use_event=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-event.js");let u=(0,react.createContext)(null);function c(){let o=(0,react.useContext)(u);if(null===o){let t=new Error("You used a <Label /> component, but it is not inside a relevant parent.");throw Error.captureStackTrace&&Error.captureStackTrace(t,c),t}return o}function label_M(){let[o,t]=(0,react.useState)([]);return[o.length>0?o.join(" "):void 0,(0,react.useMemo)((()=>function(e){let l=(0,use_event.z)((a=>(t((i=>[...i,a])),()=>t((i=>{let n=i.slice(),d=n.indexOf(a);return-1!==d&&n.splice(d,1),n}))))),r=(0,react.useMemo)((()=>({register:l,slot:e.slot,name:e.name,props:e.props})),[l,e.slot,e.name,e.props]);return react.createElement(u.Provider,{value:r},e.children)}),[t])]}let F=(0,render.yV)((function(t,s){let{passive:e=!1,...l}=t,r=c(),a=`headlessui-label-${(0,use_id.M)()}`,i=(0,use_sync_refs.T)(s);(0,use_iso_morphic_effect.e)((()=>r.register(a)),[a,r.register]);let n={ref:i,...r.props,id:a};return e&&("onClick"in n&&delete n.onClick,"onClick"in l&&delete l.onClick),(0,render.sY)({ourProps:n,theirProps:l,slot:r.slot||{},defaultTag:"label",name:r.name||"Label"})}));var t,description=__webpack_require__("./node_modules/@headlessui/react/dist/components/description/description.js"),use_tree_walker=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-tree-walker.js"),internal_hidden=__webpack_require__("./node_modules/@headlessui/react/dist/internal/hidden.js"),utils_form=__webpack_require__("./node_modules/@headlessui/react/dist/utils/form.js"),owner=__webpack_require__("./node_modules/@headlessui/react/dist/utils/owner.js"),use_controllable=__webpack_require__("./node_modules/@headlessui/react/dist/hooks/use-controllable.js"),bugs=__webpack_require__("./node_modules/@headlessui/react/dist/utils/bugs.js"),ye=((t=ye||{})[t.RegisterOption=0]="RegisterOption",t[t.UnregisterOption=1]="UnregisterOption",t);let ge={0(a,n){let t=[...a.options,{id:n.id,element:n.element,propsRef:n.propsRef}];return{...a,options:(0,focus_management.z2)(t,(l=>l.element.current))}},1(a,n){let t=a.options.slice(),l=a.options.findIndex((O=>O.id===n.id));return-1===l?a:(t.splice(l,1),{...a,options:t})}},V=(0,react.createContext)(null);function te(a){let n=(0,react.useContext)(V);if(null===n){let t=new Error(`<${a} /> is missing a parent <RadioGroup /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(t,te),t}return n}function ve(a,n){return(0,match.E)(n.type,ge,a,n)}V.displayName="RadioGroupContext";let Ee=(0,render.yV)((function(n,t){let{value:l,defaultValue:O,name:c,onChange:M,by:E=((e,r)=>e===r),disabled:P=!1,...S}=n,u=(0,use_event.z)("string"==typeof E?(e,r)=>{let o=E;return(null==e?void 0:e[o])===(null==r?void 0:r[o])}:E),[_,A]=(0,react.useReducer)(ve,{options:[]}),i=_.options,[R,U]=label_M(),[f,D]=(0,description.f)(),H=`headlessui-radiogroup-${(0,use_id.M)()}`,h=(0,react.useRef)(null),G=(0,use_sync_refs.T)(h,t),[p,k]=(0,use_controllable.q)(l,M,O),F=(0,react.useMemo)((()=>i.find((e=>!e.propsRef.current.disabled))),[i]),L=(0,react.useMemo)((()=>i.some((e=>u(e.propsRef.current.value,p)))),[i,p]),T=(0,use_event.z)((e=>{var o;if(P||u(e,p))return!1;let r=null==(o=i.find((w=>u(w.propsRef.current.value,e))))?void 0:o.propsRef.current;return(null==r||!r.disabled)&&(null==k||k(e),!0)}));(0,use_tree_walker.B)({container:h.current,accept:e=>"radio"===e.getAttribute("role")?NodeFilter.FILTER_REJECT:e.hasAttribute("role")?NodeFilter.FILTER_SKIP:NodeFilter.FILTER_ACCEPT,walk(e){e.setAttribute("role","none")}});let N=(0,use_event.z)((e=>{let r=h.current;if(!r)return;let o=(0,owner.r)(r),w=i.filter((d=>!1===d.propsRef.current.disabled)).map((d=>d.element.current));switch(e.key){case keyboard.R.Enter:(0,utils_form.g)(e.currentTarget);break;case keyboard.R.ArrowLeft:case keyboard.R.ArrowUp:if(e.preventDefault(),e.stopPropagation(),(0,focus_management.jA)(w,focus_management.TO.Previous|focus_management.TO.WrapAround)===focus_management.fE.Success){let m=i.find((K=>K.element.current===(null==o?void 0:o.activeElement)));m&&T(m.propsRef.current.value)}break;case keyboard.R.ArrowRight:case keyboard.R.ArrowDown:if(e.preventDefault(),e.stopPropagation(),(0,focus_management.jA)(w,focus_management.TO.Next|focus_management.TO.WrapAround)===focus_management.fE.Success){let m=i.find((K=>K.element.current===(null==o?void 0:o.activeElement)));m&&T(m.propsRef.current.value)}break;case keyboard.R.Space:{e.preventDefault(),e.stopPropagation();let d=i.find((m=>m.element.current===(null==o?void 0:o.activeElement)));d&&T(d.propsRef.current.value)}}})),x=(0,use_event.z)((e=>(A({type:0,...e}),()=>A({type:1,id:e.id})))),s=(0,react.useMemo)((()=>({registerOption:x,firstOption:F,containsCheckedOption:L,change:T,disabled:P,value:p,compare:u})),[x,F,L,T,P,p,u]),y={ref:G,id:H,role:"radiogroup","aria-labelledby":R,"aria-describedby":f,onKeyDown:N},W=(0,react.useMemo)((()=>({value:p})),[p]);return react.createElement(D,{name:"RadioGroup.Description"},react.createElement(U,{name:"RadioGroup.Label"},react.createElement(V.Provider,{value:s},null!=c&&null!=p&&(0,utils_form.t)({[c]:p}).map((([e,r])=>react.createElement(internal_hidden._,{features:internal_hidden.A.Hidden,...(0,render.oA)({key:e,as:"input",type:"radio",checked:null!=r,hidden:!0,readOnly:!0,name:e,value:r})}))),(0,render.sY)({ourProps:y,theirProps:S,slot:W,defaultTag:"div",name:"RadioGroup"}))))}));var Pe=(t=>(t[t.Empty=1]="Empty",t[t.Active=2]="Active",t))(Pe||{});let he=(0,render.yV)((function(n,t){let l=(0,react.useRef)(null),O=(0,use_sync_refs.T)(l,t),c=`headlessui-radiogroup-option-${(0,use_id.M)()}`,[M,E]=label_M(),[P,S]=(0,description.f)(),{addFlag:u,removeFlag:_,hasFlag:A}=function b(g=0){let[r,l]=(0,react.useState)(g);return{addFlag:(0,react.useCallback)((e=>l((a=>a|e))),[r]),hasFlag:(0,react.useCallback)((e=>Boolean(r&e)),[r]),removeFlag:(0,react.useCallback)((e=>l((a=>a&~e))),[l]),toggleFlag:(0,react.useCallback)((e=>l((a=>a^e))),[l])}}(1),{value:i,disabled:R=!1,...U}=n,f=(0,react.useRef)({value:i,disabled:R});(0,use_iso_morphic_effect.e)((()=>{f.current.value=i}),[i,f]),(0,use_iso_morphic_effect.e)((()=>{f.current.disabled=R}),[R,f]);let{registerOption:D,disabled:H,change:h,firstOption:G,containsCheckedOption:p,value:k,compare:F}=te("RadioGroup.Option");(0,use_iso_morphic_effect.e)((()=>D({id:c,element:l,propsRef:f})),[c,D,l,n]);let L=(0,use_event.z)((r=>{var o;if((0,bugs.P)(r.currentTarget))return r.preventDefault();!h(i)||(u(2),null==(o=l.current)||o.focus())})),T=(0,use_event.z)((r=>{if((0,bugs.P)(r.currentTarget))return r.preventDefault();u(2)})),N=(0,use_event.z)((()=>_(2))),x=(null==G?void 0:G.id)===c,s=H||R,y=F(k,i),W={ref:O,id:c,role:"radio","aria-checked":y?"true":"false","aria-labelledby":M,"aria-describedby":P,"aria-disabled":!!s||void 0,tabIndex:s?-1:y||!p&&x?0:-1,onClick:s?void 0:L,onFocus:s?void 0:T,onBlur:s?void 0:N},e=(0,react.useMemo)((()=>({checked:y,disabled:s,active:A(2)})),[y,s,A]);return react.createElement(S,{name:"RadioGroup.Description"},react.createElement(E,{name:"RadioGroup.Label"},(0,render.sY)({ourProps:W,theirProps:U,slot:e,defaultTag:"div",name:"RadioGroup.Option"})))})),et=Object.assign(Ee,{Option:he,Label:F,Description:description.d})},"./node_modules/automation-events/build/es5/bundle.js":function(__unused_webpack_module,exports,__webpack_require__){!function(exports,_slicedToArray,_classCallCheck,_createClass){"use strict";function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var _slicedToArray__default=_interopDefaultLegacy(_slicedToArray),_classCallCheck__default=_interopDefaultLegacy(_classCallCheck),_createClass__default=_interopDefaultLegacy(_createClass),createExtendedExponentialRampToValueAutomationEvent=function createExtendedExponentialRampToValueAutomationEvent(value,endTime,insertTime){return{endTime,insertTime,type:"exponentialRampToValue",value}},createExtendedLinearRampToValueAutomationEvent=function createExtendedLinearRampToValueAutomationEvent(value,endTime,insertTime){return{endTime,insertTime,type:"linearRampToValue",value}},createSetValueAutomationEvent=function createSetValueAutomationEvent(value,startTime){return{startTime,type:"setValue",value}},createSetValueCurveAutomationEvent=function createSetValueCurveAutomationEvent(values,startTime,duration){return{duration,startTime,type:"setValueCurve",values}},getTargetValueAtTime=function getTargetValueAtTime(time,valueAtStartTime,_ref){var startTime=_ref.startTime,target=_ref.target,timeConstant=_ref.timeConstant;return target+(valueAtStartTime-target)*Math.exp((startTime-time)/timeConstant)},isExponentialRampToValueAutomationEvent=function isExponentialRampToValueAutomationEvent(automationEvent){return"exponentialRampToValue"===automationEvent.type},isLinearRampToValueAutomationEvent=function isLinearRampToValueAutomationEvent(automationEvent){return"linearRampToValue"===automationEvent.type},isAnyRampToValueAutomationEvent=function isAnyRampToValueAutomationEvent(automationEvent){return isExponentialRampToValueAutomationEvent(automationEvent)||isLinearRampToValueAutomationEvent(automationEvent)},isSetValueAutomationEvent=function isSetValueAutomationEvent(automationEvent){return"setValue"===automationEvent.type},isSetValueCurveAutomationEvent=function isSetValueCurveAutomationEvent(automationEvent){return"setValueCurve"===automationEvent.type},getValueOfAutomationEventAtIndexAtTime=function getValueOfAutomationEventAtIndexAtTime(automationEvents,index,time,defaultValue){var automationEvent=automationEvents[index];return void 0===automationEvent?defaultValue:isAnyRampToValueAutomationEvent(automationEvent)||isSetValueAutomationEvent(automationEvent)?automationEvent.value:isSetValueCurveAutomationEvent(automationEvent)?automationEvent.values[automationEvent.values.length-1]:getTargetValueAtTime(time,getValueOfAutomationEventAtIndexAtTime(automationEvents,index-1,automationEvent.startTime,defaultValue),automationEvent)},getEndTimeAndValueOfPreviousAutomationEvent=function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents,index,currentAutomationEvent,nextAutomationEvent,defaultValue){return void 0===currentAutomationEvent?[nextAutomationEvent.insertTime,defaultValue]:isAnyRampToValueAutomationEvent(currentAutomationEvent)?[currentAutomationEvent.endTime,currentAutomationEvent.value]:isSetValueAutomationEvent(currentAutomationEvent)?[currentAutomationEvent.startTime,currentAutomationEvent.value]:isSetValueCurveAutomationEvent(currentAutomationEvent)?[currentAutomationEvent.startTime+currentAutomationEvent.duration,currentAutomationEvent.values[currentAutomationEvent.values.length-1]]:[currentAutomationEvent.startTime,getValueOfAutomationEventAtIndexAtTime(automationEvents,index-1,currentAutomationEvent.startTime,defaultValue)]},isCancelAndHoldAutomationEvent=function isCancelAndHoldAutomationEvent(automationEvent){return"cancelAndHold"===automationEvent.type},isCancelScheduledValuesAutomationEvent=function isCancelScheduledValuesAutomationEvent(automationEvent){return"cancelScheduledValues"===automationEvent.type},getEventTime=function getEventTime(automationEvent){return isCancelAndHoldAutomationEvent(automationEvent)||isCancelScheduledValuesAutomationEvent(automationEvent)?automationEvent.cancelTime:isExponentialRampToValueAutomationEvent(automationEvent)||isLinearRampToValueAutomationEvent(automationEvent)?automationEvent.endTime:automationEvent.startTime},getExponentialRampValueAtTime=function getExponentialRampValueAtTime(time,startTime,valueAtStartTime,_ref){var endTime=_ref.endTime,value=_ref.value;return valueAtStartTime===value?value:0<valueAtStartTime&&0<value||valueAtStartTime<0&&value<0?valueAtStartTime*Math.pow(value/valueAtStartTime,(time-startTime)/(endTime-startTime)):0},getLinearRampValueAtTime=function getLinearRampValueAtTime(time,startTime,valueAtStartTime,_ref){return valueAtStartTime+(time-startTime)/(_ref.endTime-startTime)*(_ref.value-valueAtStartTime)},interpolateValue=function interpolateValue(values,theoreticIndex){var lowerIndex=Math.floor(theoreticIndex),upperIndex=Math.ceil(theoreticIndex);return lowerIndex===upperIndex?values[lowerIndex]:(1-(theoreticIndex-lowerIndex))*values[lowerIndex]+(1-(upperIndex-theoreticIndex))*values[upperIndex]},getValueCurveValueAtTime=function getValueCurveValueAtTime(time,_ref){var duration=_ref.duration,startTime=_ref.startTime,values=_ref.values,theoreticIndex=(time-startTime)/duration*(values.length-1);return interpolateValue(values,theoreticIndex)},isSetTargetAutomationEvent=function isSetTargetAutomationEvent(automationEvent){return"setTarget"===automationEvent.type},AutomationEventList=function(_Symbol$iterator){function AutomationEventList(defaultValue){_classCallCheck__default.default(this,AutomationEventList),this._automationEvents=[],this._currenTime=0,this._defaultValue=defaultValue}return _createClass__default.default(AutomationEventList,[{key:_Symbol$iterator,value:function value(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function add(automationEvent){var eventTime=getEventTime(automationEvent);if(isCancelAndHoldAutomationEvent(automationEvent)||isCancelScheduledValuesAutomationEvent(automationEvent)){var index=this._automationEvents.findIndex((function(currentAutomationEvent){return isCancelScheduledValuesAutomationEvent(automationEvent)&&isSetValueCurveAutomationEvent(currentAutomationEvent)?currentAutomationEvent.startTime+currentAutomationEvent.duration>=eventTime:getEventTime(currentAutomationEvent)>=eventTime})),removedAutomationEvent=this._automationEvents[index];if(-1!==index&&(this._automationEvents=this._automationEvents.slice(0,index)),isCancelAndHoldAutomationEvent(automationEvent)){var lastAutomationEvent=this._automationEvents[this._automationEvents.length-1];if(void 0!==removedAutomationEvent&&isAnyRampToValueAutomationEvent(removedAutomationEvent)){if(isSetTargetAutomationEvent(lastAutomationEvent))throw new Error("The internal list is malformed.");var startTime=isSetValueCurveAutomationEvent(lastAutomationEvent)?lastAutomationEvent.startTime+lastAutomationEvent.duration:getEventTime(lastAutomationEvent),startValue=isSetValueCurveAutomationEvent(lastAutomationEvent)?lastAutomationEvent.values[lastAutomationEvent.values.length-1]:lastAutomationEvent.value,value=isExponentialRampToValueAutomationEvent(removedAutomationEvent)?getExponentialRampValueAtTime(eventTime,startTime,startValue,removedAutomationEvent):getLinearRampValueAtTime(eventTime,startTime,startValue,removedAutomationEvent),truncatedAutomationEvent=isExponentialRampToValueAutomationEvent(removedAutomationEvent)?createExtendedExponentialRampToValueAutomationEvent(value,eventTime,this._currenTime):createExtendedLinearRampToValueAutomationEvent(value,eventTime,this._currenTime);this._automationEvents.push(truncatedAutomationEvent)}void 0!==lastAutomationEvent&&isSetTargetAutomationEvent(lastAutomationEvent)&&this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime),eventTime)),void 0!==lastAutomationEvent&&isSetValueCurveAutomationEvent(lastAutomationEvent)&&lastAutomationEvent.startTime+lastAutomationEvent.duration>eventTime&&(this._automationEvents[this._automationEvents.length-1]=createSetValueCurveAutomationEvent(new Float32Array([6,7]),lastAutomationEvent.startTime,eventTime-lastAutomationEvent.startTime))}}else{var _index=this._automationEvents.findIndex((function(currentAutomationEvent){return getEventTime(currentAutomationEvent)>eventTime})),previousAutomationEvent=-1===_index?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[_index-1];if(void 0!==previousAutomationEvent&&isSetValueCurveAutomationEvent(previousAutomationEvent)&&getEventTime(previousAutomationEvent)+previousAutomationEvent.duration>eventTime)return!1;var persistentAutomationEvent=isExponentialRampToValueAutomationEvent(automationEvent)?createExtendedExponentialRampToValueAutomationEvent(automationEvent.value,automationEvent.endTime,this._currenTime):isLinearRampToValueAutomationEvent(automationEvent)?createExtendedLinearRampToValueAutomationEvent(automationEvent.value,eventTime,this._currenTime):automationEvent;if(-1===_index)this._automationEvents.push(persistentAutomationEvent);else{if(isSetValueCurveAutomationEvent(automationEvent)&&eventTime+automationEvent.duration>getEventTime(this._automationEvents[_index]))return!1;this._automationEvents.splice(_index,0,persistentAutomationEvent)}}return!0}},{key:"flush",value:function flush(time){var index=this._automationEvents.findIndex((function(currentAutomationEvent){return getEventTime(currentAutomationEvent)>time}));if(index>1){var remainingAutomationEvents=this._automationEvents.slice(index-1),firstRemainingAutomationEvent=remainingAutomationEvents[0];isSetTargetAutomationEvent(firstRemainingAutomationEvent)&&remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents,index-2,firstRemainingAutomationEvent.startTime,this._defaultValue),firstRemainingAutomationEvent.startTime)),this._automationEvents=remainingAutomationEvents}}},{key:"getValue",value:function getValue(time){if(0===this._automationEvents.length)return this._defaultValue;var indexOfNextEvent=this._automationEvents.findIndex((function(automationEvent){return getEventTime(automationEvent)>time})),nextAutomationEvent=this._automationEvents[indexOfNextEvent],indexOfCurrentEvent=(-1===indexOfNextEvent?this._automationEvents.length:indexOfNextEvent)-1,currentAutomationEvent=this._automationEvents[indexOfCurrentEvent];if(void 0!==currentAutomationEvent&&isSetTargetAutomationEvent(currentAutomationEvent)&&(void 0===nextAutomationEvent||!isAnyRampToValueAutomationEvent(nextAutomationEvent)||nextAutomationEvent.insertTime>time))return getTargetValueAtTime(time,getValueOfAutomationEventAtIndexAtTime(this._automationEvents,indexOfCurrentEvent-1,currentAutomationEvent.startTime,this._defaultValue),currentAutomationEvent);if(void 0!==currentAutomationEvent&&isSetValueAutomationEvent(currentAutomationEvent)&&(void 0===nextAutomationEvent||!isAnyRampToValueAutomationEvent(nextAutomationEvent)))return currentAutomationEvent.value;if(void 0!==currentAutomationEvent&&isSetValueCurveAutomationEvent(currentAutomationEvent)&&(void 0===nextAutomationEvent||!isAnyRampToValueAutomationEvent(nextAutomationEvent)||currentAutomationEvent.startTime+currentAutomationEvent.duration>time))return time<currentAutomationEvent.startTime+currentAutomationEvent.duration?getValueCurveValueAtTime(time,currentAutomationEvent):currentAutomationEvent.values[currentAutomationEvent.values.length-1];if(void 0!==currentAutomationEvent&&isAnyRampToValueAutomationEvent(currentAutomationEvent)&&(void 0===nextAutomationEvent||!isAnyRampToValueAutomationEvent(nextAutomationEvent)))return currentAutomationEvent.value;if(void 0!==nextAutomationEvent&&isExponentialRampToValueAutomationEvent(nextAutomationEvent)){var _getEndTimeAndValueOf=getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents,indexOfCurrentEvent,currentAutomationEvent,nextAutomationEvent,this._defaultValue),_getEndTimeAndValueOf2=_slicedToArray__default.default(_getEndTimeAndValueOf,2),startTime=_getEndTimeAndValueOf2[0],value=_getEndTimeAndValueOf2[1];return getExponentialRampValueAtTime(time,startTime,value,nextAutomationEvent)}if(void 0!==nextAutomationEvent&&isLinearRampToValueAutomationEvent(nextAutomationEvent)){var _getEndTimeAndValueOf3=getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents,indexOfCurrentEvent,currentAutomationEvent,nextAutomationEvent,this._defaultValue),_getEndTimeAndValueOf4=_slicedToArray__default.default(_getEndTimeAndValueOf3,2),_startTime=_getEndTimeAndValueOf4[0],_value=_getEndTimeAndValueOf4[1];return getLinearRampValueAtTime(time,_startTime,_value,nextAutomationEvent)}return this._defaultValue}}]),AutomationEventList}(Symbol.iterator),createCancelAndHoldAutomationEvent=function createCancelAndHoldAutomationEvent(cancelTime){return{cancelTime,type:"cancelAndHold"}},createCancelScheduledValuesAutomationEvent=function createCancelScheduledValuesAutomationEvent(cancelTime){return{cancelTime,type:"cancelScheduledValues"}},createExponentialRampToValueAutomationEvent=function createExponentialRampToValueAutomationEvent(value,endTime){return{endTime,type:"exponentialRampToValue",value}},createLinearRampToValueAutomationEvent=function createLinearRampToValueAutomationEvent(value,endTime){return{endTime,type:"linearRampToValue",value}},createSetTargetAutomationEvent=function createSetTargetAutomationEvent(target,startTime,timeConstant){return{startTime,target,timeConstant,type:"setTarget"}};exports.AutomationEventList=AutomationEventList,exports.createCancelAndHoldAutomationEvent=createCancelAndHoldAutomationEvent,exports.createCancelScheduledValuesAutomationEvent=createCancelScheduledValuesAutomationEvent,exports.createExponentialRampToValueAutomationEvent=createExponentialRampToValueAutomationEvent,exports.createLinearRampToValueAutomationEvent=createLinearRampToValueAutomationEvent,exports.createSetTargetAutomationEvent=createSetTargetAutomationEvent,exports.createSetValueAutomationEvent=createSetValueAutomationEvent,exports.createSetValueCurveAutomationEvent=createSetValueCurveAutomationEvent,Object.defineProperty(exports,"__esModule",{value:!0})}(exports,__webpack_require__("./node_modules/@babel/runtime/helpers/slicedToArray.js"),__webpack_require__("./node_modules/@babel/runtime/helpers/classCallCheck.js"),__webpack_require__("./node_modules/@babel/runtime/helpers/createClass.js"))},"./node_modules/bent/src/browser.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";const core=__webpack_require__("./node_modules/bent/src/core.js");class StatusError extends Error{constructor(res,...params){let buffer;super(...params),Error.captureStackTrace&&Error.captureStackTrace(this,StatusError),this.name="StatusError",this.message=res.statusMessage,this.statusCode=res.status,this.res=res,this.json=res.json.bind(res),this.text=res.text.bind(res),this.arrayBuffer=res.arrayBuffer.bind(res);Object.defineProperty(this,"responseBody",{get:()=>(buffer||(buffer=this.arrayBuffer()),buffer)}),this.headers={};for(const[key,value]of res.headers.entries())this.headers[key.toLowerCase()]=value}}module.exports=core(((statusCodes,method,encoding,headers,baseurl)=>async(_url,body,_headers={})=>{_url=baseurl+(_url||"");let parsed=new URL(_url);if(headers||(headers={}),parsed.username&&(headers.Authorization="Basic "+btoa(parsed.username+":"+parsed.password),parsed=new URL(parsed.protocol+"//"+parsed.host+parsed.pathname+parsed.search)),"https:"!==parsed.protocol&&"http:"!==parsed.protocol)throw new Error(`Unknown protocol, ${parsed.protocol}`);if(body)if(body instanceof ArrayBuffer||ArrayBuffer.isView(body)||"string"==typeof body);else{if("object"!=typeof body)throw new Error("Unknown body type.");body=JSON.stringify(body),headers["Content-Type"]="application/json"}_headers=new Headers({...headers||{},..._headers});const resp=await fetch(parsed,{method,headers:_headers,body});if(resp.statusCode=resp.status,!statusCodes.has(resp.status))throw new StatusError(resp);return"json"===encoding?resp.json():"buffer"===encoding?resp.arrayBuffer():"string"===encoding?resp.text():resp}))},"./node_modules/bent/src/core.js":module=>{"use strict";const encodings=new Set(["json","buffer","string"]);module.exports=mkrequest=>(...args)=>{const statusCodes=new Set;let method,encoding,headers,baseurl="";return args.forEach((arg=>{if("string"==typeof arg)if(arg.toUpperCase()===arg){if(method){throw new Error(`Can't set method to ${arg}, already set to ${method}.`)}method=arg}else if(arg.startsWith("http:")||arg.startsWith("https:"))baseurl=arg;else{if(!encodings.has(arg))throw new Error(`Unknown encoding, ${arg}`);encoding=arg}else if("number"==typeof arg)statusCodes.add(arg);else{if("object"!=typeof arg)throw new Error("Unknown type: "+typeof arg);if(Array.isArray(arg)||arg instanceof Set)arg.forEach((code=>statusCodes.add(code)));else{if(headers)throw new Error("Cannot set headers twice.");headers=arg}}})),method||(method="GET"),0===statusCodes.size&&statusCodes.add(200),mkrequest(statusCodes,method,encoding,headers,baseurl)}},"./node_modules/ellipsed/lib/ellipsed.js":function(module,exports){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__;__WEBPACK_AMD_DEFINE_ARRAY__=[exports],__WEBPACK_AMD_DEFINE_FACTORY__=function(exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};function tokensReducer(acc,token){var el=acc.el,elStyle=acc.elStyle,elHeight=acc.elHeight,rowsLimit=acc.rowsLimit,rowsWrapped=acc.rowsWrapped,options=acc.options,oldBuffer=acc.buffer,newBuffer=oldBuffer;if(rowsWrapped===rowsLimit+1)return _extends({},acc);var textBeforeWrap=oldBuffer,newRowsWrapped=rowsWrapped,newHeight=elHeight;return el.innerHTML=newBuffer=oldBuffer.length?""+oldBuffer+options.delimiter+token+options.replaceStr:""+token+options.replaceStr,parseFloat(elStyle.height)>parseFloat(elHeight)&&(newRowsWrapped++,newHeight=elStyle.height,newRowsWrapped===rowsLimit+1)?(el.innerHTML=newBuffer="."===textBeforeWrap[textBeforeWrap.length-1]&&"..."===options.replaceStr?textBeforeWrap+"..":""+textBeforeWrap+options.replaceStr,_extends({},acc,{elHeight:newHeight,rowsWrapped:newRowsWrapped})):(el.innerHTML=newBuffer=textBeforeWrap.length?""+textBeforeWrap+options.delimiter+token:""+token,_extends({},acc,{buffer:newBuffer,elHeight:newHeight,rowsWrapped:newRowsWrapped}))}function ellipsis(){for(var selector=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",rows=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},opts=_extends({},{replaceStr:"...",responsive:!1,debounceDelay:250,delimiter:" "},options),elements=selector&&(selector instanceof NodeList?selector:1===selector.nodeType?[selector]:document.querySelectorAll(selector)),originalTexts=[],i=0;i<elements.length;i++){var el=elements[i];originalTexts[i]=el.innerHTML;var splittedText=el.innerHTML.split(opts.delimiter);el.innerHTML="";var elStyle=window.getComputedStyle(el);splittedText.reduce(tokensReducer,{el,buffer:el.innerHTML,elStyle,elHeight:0,rowsLimit:rows,rowsWrapped:0,options:opts})}if(opts.responsive){var resizeTimeout=!1,last_window_w=window.innerWidth,resizeHandler=function resizeHandler(){if(window.innerWidth!==last_window_w){last_window_w=window.innerWidth;for(var _i=0;_i<elements.length;_i++)elements[_i].innerHTML=originalTexts[_i];ellipsis(selector,rows,_extends({},options,{responsive:!1}))}},resizeListener=function resizeListener(){clearTimeout(resizeTimeout),resizeTimeout=setTimeout(resizeHandler,opts.debounceDelay)};return window.addEventListener("resize",resizeListener),resizeListener}}function disableResponsive(listener){window.removeEventListener("resize",listener)}exports.disableResponsive=disableResponsive,exports.ellipsis=ellipsis},void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof __WEBPACK_AMD_DEFINE_FACTORY__?__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{i:()=>ProxyInfo});var _sdk_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");class ProxyInfo{constructor(proxyHostName,proxyPort,proxyUserName,proxyPassword){this.privProxyHostName=proxyHostName,this.privProxyPort=proxyPort,this.privProxyUserName=proxyUserName,this.privProxyPassword=proxyPassword}static fromParameters(parameters){return new ProxyInfo(parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_ProxyHostName),parseInt(parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_ProxyPort),10),parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_ProxyUserName),parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_ProxyPassword))}static fromRecognizerConfig(config){return this.fromParameters(config.parameters)}get HostName(){return this.privProxyHostName}get Port(){return this.privProxyPort}get UserName(){return this.privProxyUserName}get Password(){return this.privProxyPassword}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{i:()=>WebsocketConnection});var common_Error=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),Guid=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),HeaderNames=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js"),IConnection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js"),common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),Queue=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js"),Events=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js"),BackgroundError=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js");class ConnectionOpenResponse{constructor(statusCode,reason){this.privStatusCode=statusCode,this.privReason=reason}get statusCode(){return this.privStatusCode}get reason(){return this.privReason}}var ConnectionEvents=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js"),RawWebsocketMessage=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js"),ConnectionMessage=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),EventSource=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js"),ws_ignored_=__webpack_require__("?e42a"),ws_ignored_default=__webpack_require__.n(ws_ignored_),tls_ignored_=__webpack_require__("?14d6"),url_parse=__webpack_require__("./node_modules/url-parse/index.js"),url_parse_default=__webpack_require__.n(url_parse),ocsp_ignored_=__webpack_require__("?2454"),PlatformEvent=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class OCSPEvent extends PlatformEvent.A{constructor(eventName,eventType,signature){super(eventName,eventType),this.privSignature=signature}}class OCSPMemoryCacheHitEvent extends OCSPEvent{constructor(signature){super("OCSPMemoryCacheHitEvent",PlatformEvent.t.Debug,signature)}}class OCSPCacheMissEvent extends OCSPEvent{constructor(signature){super("OCSPCacheMissEvent",PlatformEvent.t.Debug,signature)}}class OCSPDiskCacheHitEvent extends OCSPEvent{constructor(signature){super("OCSPDiskCacheHitEvent",PlatformEvent.t.Debug,signature)}}class OCSPCacheUpdateNeededEvent extends OCSPEvent{constructor(signature){super("OCSPCacheUpdateNeededEvent",PlatformEvent.t.Debug,signature)}}class OCSPMemoryCacheStoreEvent extends OCSPEvent{constructor(signature){super("OCSPMemoryCacheStoreEvent",PlatformEvent.t.Debug,signature)}}class OCSPDiskCacheStoreEvent extends OCSPEvent{constructor(signature){super("OCSPDiskCacheStoreEvent",PlatformEvent.t.Debug,signature)}}class OCSPCacheUpdateCompleteEvent extends OCSPEvent{constructor(signature){super("OCSPCacheUpdateCompleteEvent",PlatformEvent.t.Debug,signature)}}class OCSPStapleReceivedEvent extends OCSPEvent{constructor(){super("OCSPStapleReceivedEvent",PlatformEvent.t.Debug,"")}}class OCSPCacheEntryExpiredEvent extends OCSPEvent{constructor(serialNumber,expireTime){super("OCSPCacheEntryExpiredEvent",PlatformEvent.t.Debug,serialNumber),this.privExpireTime=expireTime}}class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent{constructor(serialNumber,startTime,expireTime){super("OCSPCacheEntryNeedsRefreshEvent",PlatformEvent.t.Debug,serialNumber),this.privExpireTime=expireTime,this.privStartTime=startTime}}class OCSPCacheHitEvent extends OCSPEvent{constructor(serialNumber,startTime,expireTime){super("OCSPCacheHitEvent",PlatformEvent.t.Debug,serialNumber),this.privExpireTime=expireTime,this.privExpireTimeString=new Date(expireTime).toLocaleDateString(),this.privStartTime=startTime,this.privStartTimeString=new Date(startTime).toLocaleTimeString()}}class OCSPVerificationFailedEvent extends OCSPEvent{constructor(serialNumber,error){super("OCSPVerificationFailedEvent",PlatformEvent.t.Debug,serialNumber),this.privError=error}}class OCSPCacheFetchErrorEvent extends OCSPEvent{constructor(serialNumber,error){super("OCSPCacheFetchErrorEvent",PlatformEvent.t.Debug,serialNumber),this.privError=error}}class OCSPResponseRetrievedEvent extends OCSPEvent{constructor(serialNumber){super("OCSPResponseRetrievedEvent",PlatformEvent.t.Debug,serialNumber)}}class OCSPCacheUpdateErrorEvent extends OCSPEvent{constructor(serialNumber,error){super("OCSPCacheUpdateErrorEvent",PlatformEvent.t.Debug,serialNumber),this.privError=error}}var agent_base_ignored_=__webpack_require__("?6483"),agent_base_ignored_default=__webpack_require__.n(agent_base_ignored_),async_disk_cache_ignored_=__webpack_require__("?bed2"),async_disk_cache_ignored_default=__webpack_require__.n(async_disk_cache_ignored_),https_proxy_agent_ignored_=__webpack_require__("?72ad"),https_proxy_agent_ignored_default=__webpack_require__.n(https_proxy_agent_ignored_),net_ignored_=__webpack_require__("?a1bf"),process=__webpack_require__("./node_modules/process/browser.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class CertCheckAgent{constructor(proxyInfo){proxyInfo&&(this.privProxyInfo=proxyInfo),CertCheckAgent.privDiskCache||(CertCheckAgent.privDiskCache=new(async_disk_cache_ignored_default())("microsoft-cognitiveservices-speech-sdk-cache",{supportBuffer:!0,location:void 0!==process&&process.env.SPEECH_OCSP_CACHE_ROOT?process.env.SPEECH_OCSP_CACHE_ROOT:void 0}))}static forceReinitDiskCache(){CertCheckAgent.privDiskCache=void 0,CertCheckAgent.privMemCache={}}GetAgent(disableStapling){const agent=new(agent_base_ignored_default().Agent)(this.CreateConnection);if(void 0!==this.privProxyInfo&&void 0!==this.privProxyInfo.HostName&&this.privProxyInfo.Port>0){agent["privProxyInfo"]=this.privProxyInfo}return agent}static GetProxyAgent(proxyInfo){const httpProxyOptions={host:proxyInfo.HostName,port:proxyInfo.Port};proxyInfo.UserName?httpProxyOptions.headers={"Proxy-Authentication":"Basic "+new Buffer(proxyInfo.UserName+":"+(void 0===proxyInfo.Password)?"":proxyInfo.Password).toString("base64")}:httpProxyOptions.headers={},httpProxyOptions.headers.requestOCSP="true";return new(https_proxy_agent_ignored_default())(httpProxyOptions)}static OCSPCheck(socketPromise,proxyInfo){return __awaiter(this,void 0,void 0,(function*(){let ocspRequest,stapling,resolved=!1;const socket=yield socketPromise;socket.cork();const tlsSocket=socket;return new Promise(((resolve,reject)=>{socket.on("OCSPResponse",(data=>{data&&(this.onEvent(new OCSPStapleReceivedEvent),stapling=data)})),socket.on("error",(error=>{resolved||(resolved=!0,socket.destroy(),reject(error))})),tlsSocket.on("secure",(()=>__awaiter(this,void 0,void 0,(function*(){const peer=tlsSocket.getPeerCertificate(!0);try{const issuer=yield this.GetIssuer(peer);ocspRequest=ocsp_ignored_.request.generate(peer.raw,issuer.raw);const sig=ocspRequest.id.toString("hex");if(!stapling){const cacheEntry=yield CertCheckAgent.GetResponseFromCache(sig,ocspRequest,proxyInfo);stapling=cacheEntry}yield this.VerifyOCSPResponse(stapling,ocspRequest,proxyInfo),socket.uncork(),resolved=!0,resolve(socket)}catch(e){socket.destroy(),resolved=!0,reject(e)}}))))}))}))}static GetIssuer(peer){return peer.issuerCertificate?Promise.resolve(peer.issuerCertificate):new Promise(((resolve,reject)=>{new ocsp_ignored_.Agent({}).fetchIssuer(peer,null,((error,value)=>{error?reject(error):resolve(value)}))}))}static GetResponseFromCache(signature,ocspRequest,proxyInfo){return __awaiter(this,void 0,void 0,(function*(){let cachedResponse=CertCheckAgent.privMemCache[signature];if(cachedResponse&&this.onEvent(new OCSPMemoryCacheHitEvent(signature)),!cachedResponse)try{const diskCacheResponse=yield CertCheckAgent.privDiskCache.get(signature);diskCacheResponse.isCached&&(CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature)),CertCheckAgent.StoreMemoryCacheEntry(signature,diskCacheResponse.value),cachedResponse=diskCacheResponse.value)}catch(error){cachedResponse=null}if(!cachedResponse)return cachedResponse;try{const tbsData=ocsp_ignored_.utils.parseResponse(cachedResponse).value.tbsResponseData;if(tbsData.responses.length<1)return void this.onEvent(new OCSPCacheFetchErrorEvent(signature,"Not enough data in cached response"));const cachedStartTime=tbsData.responses[0].thisUpdate,cachedNextTime=tbsData.responses[0].nextUpdate;if(cachedNextTime<Date.now()+this.testTimeOffset-6e4)this.onEvent(new OCSPCacheEntryExpiredEvent(signature,cachedNextTime)),cachedResponse=null;else{const minUpdate=Math.min(864e5,(cachedNextTime-cachedStartTime)/2);cachedNextTime-(Date.now()+this.testTimeOffset)<minUpdate?(this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature,cachedStartTime,cachedNextTime)),this.UpdateCache(ocspRequest,proxyInfo).catch((error=>{this.onEvent(new OCSPCacheUpdateErrorEvent(signature,error.toString()))}))):this.onEvent(new OCSPCacheHitEvent(signature,cachedStartTime,cachedNextTime))}}catch(error){this.onEvent(new OCSPCacheFetchErrorEvent(signature,error)),cachedResponse=null}return cachedResponse||this.onEvent(new OCSPCacheMissEvent(signature)),cachedResponse}))}static VerifyOCSPResponse(cacheValue,ocspRequest,proxyInfo){return __awaiter(this,void 0,void 0,(function*(){let ocspResponse=cacheValue;ocspRequest.certID.toString("hex");return ocspResponse||(ocspResponse=yield CertCheckAgent.GetOCSPResponse(ocspRequest,proxyInfo)),new Promise(((resolve,reject)=>{ocsp_ignored_.verify({request:ocspRequest,response:ocspResponse},((error,result)=>{error?(CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString("hex"),error)),cacheValue?this.VerifyOCSPResponse(null,ocspRequest,proxyInfo).then((()=>{resolve()}),(error=>{reject(error)})):reject(error)):(cacheValue||CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString("hex"),ocspResponse),resolve())}))}))}))}static UpdateCache(req,proxyInfo){return __awaiter(this,void 0,void 0,(function*(){const signature=req.id.toString("hex");this.onEvent(new OCSPCacheUpdateNeededEvent(signature));const rawResponse=yield this.GetOCSPResponse(req,proxyInfo);this.StoreCacheEntry(signature,rawResponse),this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString("hex")))}))}static StoreCacheEntry(sig,rawResponse){this.StoreMemoryCacheEntry(sig,rawResponse),this.StoreDiskCacheEntry(sig,rawResponse)}static StoreMemoryCacheEntry(sig,rawResponse){this.privMemCache[sig]=rawResponse,this.onEvent(new OCSPMemoryCacheStoreEvent(sig))}static StoreDiskCacheEntry(sig,rawResponse){this.privDiskCache.set(sig,rawResponse).then((()=>{this.onEvent(new OCSPDiskCacheStoreEvent(sig))}))}static GetOCSPResponse(req,proxyInfo){let options={};if(proxyInfo){const agent=CertCheckAgent.GetProxyAgent(proxyInfo);options.agent=agent}return new Promise(((resolve,reject)=>{ocsp_ignored_.utils.getAuthorityInfo(req.cert,"1.3.6.1.5.5.7.48.1",((error,uri)=>{if(error)return void reject(error);const parsedUri=url_parse_default()(uri);parsedUri.path=parsedUri.pathname,options=Object.assign(Object.assign({},options),parsedUri),ocsp_ignored_.utils.getResponse(options,req.data,((error,raw)=>{error?reject(error):(this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString("hex"))),resolve(raw))}))}))}))}CreateConnection(request,options){const enableOCSP=void 0!==process&&"0"!==process.env.NODE_TLS_REJECT_UNAUTHORIZED&&"0"!==process.env.SPEECH_CONDUCT_OCSP_CHECK&&options.secureEndpoint;let socketPromise;if(options=Object.assign(Object.assign({},options),{requestOCSP:!CertCheckAgent.forceDisableOCSPStapling,servername:options.host}),this.privProxyInfo){const baseAgent=CertCheckAgent.GetProxyAgent(this.privProxyInfo);socketPromise=new Promise(((resolve,reject)=>{baseAgent.callback(request,options,((error,socket)=>{error?reject(error):resolve(socket)}))}))}else socketPromise=options.secureEndpoint?Promise.resolve(tls_ignored_.connect(options)):Promise.resolve(net_ignored_.connect(options));return enableOCSP?CertCheckAgent.OCSPCheck(socketPromise,this.privProxyInfo):socketPromise}}CertCheckAgent.testTimeOffset=0,CertCheckAgent.forceDisableOCSPStapling=!1,CertCheckAgent.privMemCache={},CertCheckAgent.onEvent=event=>{Events.z.instance.onEvent(event)};var WebsocketMessageAdapter_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class WebsocketMessageAdapter{constructor(uri,connectionId,messageFormatter,proxyInfo,headers,enableCompression){if(this.open=()=>{if(this.privConnectionState===IConnection.e.Disconnected)return Promise.reject(`Cannot open a connection that is in ${this.privConnectionState} state`);if(this.privConnectionEstablishDeferral)return this.privConnectionEstablishDeferral.promise;this.privConnectionEstablishDeferral=new common_Promise.BH,this.privCertificateValidatedDeferral=new common_Promise.BH,this.privConnectionState=IConnection.e.Connecting;try{if("undefined"==typeof WebSocket||WebsocketMessageAdapter.forceNpmWebSocket){const options={headers:this.privHeaders,perMessageDeflate:this.privEnableCompression};this.privCertificateValidatedDeferral.resolve();const checkAgent=new CertCheckAgent(this.proxyInfo);options.agent=checkAgent.GetAgent();let protocol=new URL(this.privUri).protocol;"wss:"===(null==protocol?void 0:protocol.toLocaleLowerCase())?protocol="https:":"ws:"===(null==protocol?void 0:protocol.toLocaleLowerCase())&&(protocol="http:"),options.agent.protocol=protocol,this.privWebsocketClient=new(ws_ignored_default())(this.privUri,options)}else this.privCertificateValidatedDeferral.resolve(),this.privWebsocketClient=new WebSocket(this.privUri);this.privWebsocketClient.binaryType="arraybuffer",this.privReceivingMessageQueue=new Queue.c,this.privDisconnectDeferral=new common_Promise.BH,this.privSendMessageQueue=new Queue.c,this.processSendQueue().catch((reason=>{Events.z.instance.onEvent(new BackgroundError.u(reason))}))}catch(error){return this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500,error)),this.privConnectionEstablishDeferral.promise}return this.onEvent(new ConnectionEvents.YF(this.privConnectionId,this.privUri)),this.privWebsocketClient.onopen=e=>{this.privCertificateValidatedDeferral.promise.then((()=>{this.privConnectionState=IConnection.e.Connected,this.onEvent(new ConnectionEvents.Zk(this.privConnectionId)),this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200,""))}),(error=>{this.privConnectionEstablishDeferral.reject(error)}))},this.privWebsocketClient.onerror=e=>{this.onEvent(new ConnectionEvents.K4(this.privConnectionId,e.message,e.type)),this.privLastErrorReceived=e.message},this.privWebsocketClient.onclose=e=>{this.privConnectionState===IConnection.e.Connecting?(this.privConnectionState=IConnection.e.Disconnected,this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code,e.reason+" "+this.privLastErrorReceived))):(this.privConnectionState=IConnection.e.Disconnected,this.privWebsocketClient=null,this.onEvent(new ConnectionEvents.PE(this.privConnectionId,e.code,e.reason))),this.onClose(e.code,e.reason).catch((reason=>{Events.z.instance.onEvent(new BackgroundError.u(reason))}))},this.privWebsocketClient.onmessage=e=>{const networkReceivedTime=(new Date).toISOString();if(this.privConnectionState===IConnection.e.Connected){const deferred=new common_Promise.BH;if(this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise),e.data instanceof ArrayBuffer){const rawMessage=new RawWebsocketMessage.S(ConnectionMessage.C.Binary,e.data);this.privMessageFormatter.toConnectionMessage(rawMessage).then((connectionMessage=>{this.onEvent(new ConnectionEvents.Qz(this.privConnectionId,networkReceivedTime,connectionMessage)),deferred.resolve(connectionMessage)}),(error=>{deferred.reject(`Invalid binary message format. Error: ${error}`)}))}else{const rawMessage=new RawWebsocketMessage.S(ConnectionMessage.C.Text,e.data);this.privMessageFormatter.toConnectionMessage(rawMessage).then((connectionMessage=>{this.onEvent(new ConnectionEvents.Qz(this.privConnectionId,networkReceivedTime,connectionMessage)),deferred.resolve(connectionMessage)}),(error=>{deferred.reject(`Invalid text message format. Error: ${error}`)}))}}},this.privConnectionEstablishDeferral.promise},this.send=message=>{if(this.privConnectionState!==IConnection.e.Connected)return Promise.reject(`Cannot send on connection that is in ${IConnection.e[this.privConnectionState]} state`);const messageSendStatusDeferral=new common_Promise.BH,messageSendDeferral=new common_Promise.BH;return this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise),this.privMessageFormatter.fromConnectionMessage(message).then((rawMessage=>{messageSendDeferral.resolve({Message:message,RawWebsocketMessage:rawMessage,sendStatusDeferral:messageSendStatusDeferral})}),(error=>{messageSendDeferral.reject(`Error formatting the message. ${error}`)})),messageSendStatusDeferral.promise},this.read=()=>this.privConnectionState!==IConnection.e.Connected?Promise.reject(`Cannot read on connection that is in ${this.privConnectionState} state`):this.privReceivingMessageQueue.dequeue(),this.close=reason=>this.privWebsocketClient?(this.privConnectionState!==IConnection.e.Disconnected&&this.privWebsocketClient.close(1e3,reason||"Normal closure by client"),this.privDisconnectDeferral.promise):Promise.resolve(),this.sendRawMessage=sendItem=>{try{return sendItem?(this.onEvent(new ConnectionEvents.w2(this.privConnectionId,(new Date).toISOString(),sendItem.Message)),this.isWebsocketOpen?(this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload),Promise.resolve()):Promise.reject("websocket send error: Websocket not ready "+this.privConnectionId+" "+sendItem.Message.id+" "+(new Error).stack)):Promise.resolve()}catch(e){return Promise.reject(`websocket send error: ${e}`)}},this.onEvent=event=>{this.privConnectionEvents.onEvent(event),Events.z.instance.onEvent(event)},!uri)throw new common_Error.Do("uri");if(!messageFormatter)throw new common_Error.Do("messageFormatter");this.proxyInfo=proxyInfo,this.privConnectionEvents=new EventSource.n,this.privConnectionId=connectionId,this.privMessageFormatter=messageFormatter,this.privConnectionState=IConnection.e.None,this.privUri=uri,this.privHeaders=headers,this.privEnableCompression=enableCompression,this.privHeaders[HeaderNames.S.ConnectionId]=this.privConnectionId,this.privLastErrorReceived=""}get state(){return this.privConnectionState}get events(){return this.privConnectionEvents}onClose(code,reason){return WebsocketMessageAdapter_awaiter(this,void 0,void 0,(function*(){const closeReason=`Connection closed. ${code}: ${reason}`;this.privConnectionState=IConnection.e.Disconnected,this.privDisconnectDeferral.resolve(),yield this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem=>{}),closeReason),yield this.privSendMessageQueue.drainAndDispose((pendingSendItem=>{pendingSendItem.sendStatusDeferral.reject(closeReason)}),closeReason)}))}processSendQueue(){return WebsocketMessageAdapter_awaiter(this,void 0,void 0,(function*(){for(;;){const itemToSend=this.privSendMessageQueue.dequeue(),sendItem=yield itemToSend;if(!sendItem)return;try{yield this.sendRawMessage(sendItem),sendItem.sendStatusDeferral.resolve()}catch(sendError){sendItem.sendStatusDeferral.reject(sendError)}}}))}get isWebsocketOpen(){return this.privWebsocketClient&&this.privWebsocketClient.readyState===this.privWebsocketClient.OPEN}}WebsocketMessageAdapter.forceNpmWebSocket=!1;var WebsocketConnection_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class WebsocketConnection{constructor(uri,queryParameters,headers,messageFormatter,proxyInfo,enableCompression=!1,connectionId){if(this.privIsDisposed=!1,this.isDisposed=()=>this.privIsDisposed,this.state=()=>this.privConnectionMessageAdapter.state,this.open=()=>this.privConnectionMessageAdapter.open(),this.send=message=>this.privConnectionMessageAdapter.send(message),this.read=()=>this.privConnectionMessageAdapter.read(),!uri)throw new common_Error.Do("uri");if(!messageFormatter)throw new common_Error.Do("messageFormatter");this.privMessageFormatter=messageFormatter;let queryParams="",i=0;if(queryParameters)for(const paramName in queryParameters)if(paramName){queryParams+=0===i&&-1===uri.indexOf("?")?"?":"&";queryParams+=`${paramName}=${encodeURIComponent(queryParameters[paramName])}`,i++}if(headers)for(const headerName in headers)if(headerName){queryParams+=0===i&&-1===uri.indexOf("?")?"?":"&";queryParams+=`${headerName}=${encodeURIComponent(headers[headerName])}`,i++}this.privUri=uri+queryParams,this.privId=connectionId||(0,Guid.Q)(),this.privConnectionMessageAdapter=new WebsocketMessageAdapter(this.privUri,this.id,this.privMessageFormatter,proxyInfo,headers,enableCompression)}dispose(){return WebsocketConnection_awaiter(this,void 0,void 0,(function*(){this.privIsDisposed=!0,this.privConnectionMessageAdapter&&(yield this.privConnectionMessageAdapter.close())}))}get id(){return this.privId}get events(){return this.privConnectionMessageAdapter.events}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{H:()=>AgentConfig});class AgentConfig{toJsonString(){return JSON.stringify(this.iPrivConfig)}get(){return this.iPrivConfig}set(value){this.iPrivConfig=value}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{U:()=>CognitiveSubscriptionKeyAuthentication});var _common_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_HeaderNames__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js"),_IAuthentication__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");class CognitiveSubscriptionKeyAuthentication{constructor(subscriptionKey){if(this.fetch=authFetchEventId=>Promise.resolve(this.privAuthInfo),this.fetchOnExpiry=authFetchEventId=>Promise.resolve(this.privAuthInfo),!subscriptionKey)throw new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.Do("subscriptionKey");this.privAuthInfo=new _IAuthentication__WEBPACK_IMPORTED_MODULE_1__.G(_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.AuthKey,subscriptionKey)}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{w:()=>CognitiveTokenAuthentication});var _common_Exports__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_IAuthentication__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js");class CognitiveTokenAuthentication{constructor(fetchCallback,fetchOnExpiryCallback){if(this.fetch=authFetchEventId=>this.privFetchCallback(authFetchEventId).then((token=>new _IAuthentication__WEBPACK_IMPORTED_MODULE_0__.G("Authorization",CognitiveTokenAuthentication.privTokenPrefix+token))),this.fetchOnExpiry=authFetchEventId=>this.privFetchOnExpiryCallback(authFetchEventId).then((token=>new _IAuthentication__WEBPACK_IMPORTED_MODULE_0__.G("Authorization",CognitiveTokenAuthentication.privTokenPrefix+token))),!fetchCallback)throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Do("fetchCallback");if(!fetchOnExpiryCallback)throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Do("fetchOnExpiryCallback");this.privFetchCallback=fetchCallback,this.privFetchOnExpiryCallback=fetchOnExpiryCallback}}CognitiveTokenAuthentication.privTokenPrefix="bearer "},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{_:()=>ConnectionFactoryBase});var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js"),_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js"),_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");class ConnectionFactoryBase{static getHostSuffix(region){if(region){if(region.toLowerCase().startsWith("china"))return".azure.cn";if(region.toLowerCase().startsWith("usgov"))return".azure.us"}return".microsoft.com"}setCommonUrlParams(config,queryParams,endpoint){this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_EnableAudioLogging,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.EnableAudioLogging,config,queryParams,endpoint),this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceResponse_RequestWordLevelTimestamps,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.EnableWordLevelTimestamps,config,queryParams,endpoint),this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceResponse_ProfanityOption,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.Profanity,config,queryParams,endpoint),this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_InitialSilenceTimeoutMs,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.InitialSilenceTimeoutMs,config,queryParams,endpoint),this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_EndSilenceTimeoutMs,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.EndSilenceTimeoutMs,config,queryParams,endpoint),this.setUrlParameter(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceResponse_StablePartialResultThreshold,_QueryParameterNames__WEBPACK_IMPORTED_MODULE_1__.o.StableIntermediateThreshold,config,queryParams,endpoint);const serviceProperties=JSON.parse(config.parameters.getProperty(_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.ServicePropertiesPropertyName,"{}"));Object.keys(serviceProperties).forEach(((value,num,array)=>{queryParams[value]=serviceProperties[value]}))}setUrlParameter(propId,parameterName,config,queryParams,endpoint){const value=config.parameters.getProperty(propId,void 0);!value||endpoint&&-1!==endpoint.search(parameterName)||(queryParams[parameterName]=value.toLocaleLowerCase())}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{AutoDetectSourceLanguagesOpenRangeOptionName:()=>AutoDetectSourceLanguagesOpenRangeOptionName,CancellationErrorCodePropertyName:()=>CancellationErrorCodePropertyName,ForceDictationPropertyName:()=>ForceDictationPropertyName,OutputFormatPropertyName:()=>OutputFormatPropertyName,ServicePropertiesPropertyName:()=>ServicePropertiesPropertyName});const OutputFormatPropertyName="OutputFormat",CancellationErrorCodePropertyName="CancellationErrorCode",ServicePropertiesPropertyName="ServiceProperties",ForceDictationPropertyName="ForceDictation",AutoDetectSourceLanguagesOpenRangeOptionName="OpenRange"},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{S:()=>HeaderNames});class HeaderNames{}HeaderNames.AuthKey="Ocp-Apim-Subscription-Key",HeaderNames.ConnectionId="X-ConnectionId",HeaderNames.ContentType="Content-Type",HeaderNames.CustomCommandsAppId="X-CommandsAppId",HeaderNames.Path="Path",HeaderNames.RequestId="X-RequestId",HeaderNames.RequestStreamId="X-StreamId",HeaderNames.RequestTimestamp="X-Timestamp"},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/IAuthentication.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{G:()=>AuthInfo});class AuthInfo{constructor(headerName,token){this.privHeaderName=headerName,this.privToken=token}get headerName(){return this.privHeaderName}get token(){return this.privToken}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{o:()=>QueryParameterNames});class QueryParameterNames{}QueryParameterNames.BotId="botid",QueryParameterNames.CustomSpeechDeploymentId="cid",QueryParameterNames.CustomVoiceDeploymentId="deploymentId",QueryParameterNames.EnableAudioLogging="storeAudio",QueryParameterNames.EnableLanguageId="lidEnabled",QueryParameterNames.EnableWordLevelTimestamps="wordLevelTimestamps",QueryParameterNames.EndSilenceTimeoutMs="endSilenceTimeoutMs",QueryParameterNames.Format="format",QueryParameterNames.InitialSilenceTimeoutMs="initialSilenceTimeoutMs",QueryParameterNames.Language="language",QueryParameterNames.Profanity="profanity",QueryParameterNames.RequestBotStatusMessages="enableBotMessageStatus",QueryParameterNames.StableIntermediateThreshold="stableIntermediateThreshold",QueryParameterNames.StableTranslation="stableTranslation",QueryParameterNames.TestHooks="testhooks"},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{OS:()=>OS,Xj:()=>RecognizerConfig,_y:()=>Context,dt:()=>type,jf:()=>RecognitionMode,pu:()=>SpeechServiceConfig,wF:()=>connectivity});var RecognitionMode,SpeechResultFormat,connectivity,type,_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");!function(RecognitionMode){RecognitionMode[RecognitionMode.Interactive=0]="Interactive",RecognitionMode[RecognitionMode.Conversation=1]="Conversation",RecognitionMode[RecognitionMode.Dictation=2]="Dictation"}(RecognitionMode||(RecognitionMode={})),function(SpeechResultFormat){SpeechResultFormat[SpeechResultFormat.Simple=0]="Simple",SpeechResultFormat[SpeechResultFormat.Detailed=1]="Detailed"}(SpeechResultFormat||(SpeechResultFormat={}));class RecognizerConfig{constructor(speechServiceConfig,parameters){this.privRecognitionMode=RecognitionMode.Interactive,this.privSpeechServiceConfig=speechServiceConfig||new SpeechServiceConfig(new Context(null)),this.privParameters=parameters,this.privMaxRetryCount=parseInt(parameters.getProperty("SPEECH-Error-MaxRetryCount","4"),10)}get parameters(){return this.privParameters}get recognitionMode(){return this.privRecognitionMode}set recognitionMode(value){this.privRecognitionMode=value,this.privRecognitionActivityTimeout=value===RecognitionMode.Interactive?8e3:25e3,this.privSpeechServiceConfig.Recognition=RecognitionMode[value]}get SpeechServiceConfig(){return this.privSpeechServiceConfig}get recognitionActivityTimeout(){return this.privRecognitionActivityTimeout}get isContinuousRecognition(){return this.privRecognitionMode!==RecognitionMode.Interactive}get autoDetectSourceLanguages(){return this.parameters.getProperty(_sdk_Exports__WEBPACK_IMPORTED_MODULE_0__.o.SpeechServiceConnection_AutoDetectSourceLanguages,void 0)}get maxRetryCount(){return this.privMaxRetryCount}}class SpeechServiceConfig{constructor(context){this.serialize=()=>JSON.stringify(this,((key,value)=>{if(value&&"object"==typeof value){const replacement={};for(const k in value)Object.hasOwnProperty.call(value,k)&&(replacement[k&&k.charAt(0).toLowerCase()+k.substring(1)]=value[k]);return replacement}return value})),this.context=context}get Context(){return this.context}get Recognition(){return this.recognition}set Recognition(value){this.recognition=value.toLowerCase()}}class Context{constructor(os){this.system=new System,this.os=os}}class System{constructor(){this.name="SpeechSDK",this.version="1.20.0",this.build="JavaScript",this.lang="JavaScript"}}class OS{constructor(platform,name,version){this.platform=platform,this.name=name,this.version=version}}!function(connectivity){connectivity.Bluetooth="Bluetooth",connectivity.Wired="Wired",connectivity.WiFi="WiFi",connectivity.Cellular="Cellular",connectivity.InBuilt="InBuilt",connectivity.Unknown="Unknown"}(connectivity||(connectivity={})),function(type){type.Phone="Phone",type.Speaker="Speaker",type.Car="Car",type.Headset="Headset",type.Thermostat="Thermostat",type.Microphones="Microphones",type.Deskphone="Deskphone",type.RemoteControl="RemoteControl",type.Unknown="Unknown",type.File="File",type.Stream="Stream"}(type||(type={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{r:()=>SpeechConnectionMessage});var _common_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_HeaderNames__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js");class SpeechConnectionMessage extends _common_Exports__WEBPACK_IMPORTED_MODULE_0__.H{constructor(messageType,path,requestId,contentType,body,streamId,additionalHeaders,id){if(!path)throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Do("path");if(!requestId)throw new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.Do("requestId");const headers={};if(headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.Path]=path,headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestId]=requestId,headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestTimestamp]=(new Date).toISOString(),contentType&&(headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.ContentType]=contentType),streamId&&(headers[_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestStreamId]=streamId),additionalHeaders)for(const headerName in additionalHeaders)headerName&&(headers[headerName]=additionalHeaders[headerName]);id?super(messageType,body,headers,id):super(messageType,body,headers),this.privPath=path,this.privRequestId=requestId,this.privContentType=contentType,this.privStreamId=streamId,this.privAdditionalHeaders=additionalHeaders}get path(){return this.privPath}get requestId(){return this.privRequestId}get contentType(){return this.privContentType}get streamId(){return this.privStreamId}get additionalHeaders(){return this.privAdditionalHeaders}}SpeechConnectionMessage.fromConnectionMessage=message=>{let path=null,requestId=null,contentType=null,requestTimestamp=null,streamId=null;const additionalHeaders={};if(message.headers)for(const headerName in message.headers)headerName&&(headerName.toLowerCase()===_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.Path.toLowerCase()?path=message.headers[headerName]:headerName.toLowerCase()===_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestId.toLowerCase()?requestId=message.headers[headerName]:headerName.toLowerCase()===_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestTimestamp.toLowerCase()?requestTimestamp=message.headers[headerName]:headerName.toLowerCase()===_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.ContentType.toLowerCase()?contentType=message.headers[headerName]:headerName.toLowerCase()===_HeaderNames__WEBPACK_IMPORTED_MODULE_2__.S.RequestStreamId.toLowerCase()?streamId=message.headers[headerName]:additionalHeaders[headerName]=message.headers[headerName]);return new SpeechConnectionMessage(message.messageType,path,requestId,contentType,message.body,streamId,additionalHeaders,message.id)}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{E:()=>SynthesisAdapterBase});var ConnectionMessage=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),common_Error=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),EventSource=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js"),ConnectionEvents=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js"),IConnection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js"),Guid=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),CancellationReason=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js"),CancellationErrorCodes=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");class SpeechSynthesisEventArgs{constructor(result){this.privResult=result}get result(){return this.privResult}}var SynthesisResult=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js");class SpeechSynthesisResult extends SynthesisResult.A{constructor(resultId,reason,audioData,errorDetails,properties){super(resultId,reason,errorDetails,properties),this.privAudioData=audioData}get audioData(){return this.privAudioData}}var ResultReason=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js"),PropertyCollection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");class SpeechSynthesisWordBoundaryEventArgs{constructor(audioOffset,text,wordLength,textOffset){this.privAudioOffset=audioOffset,this.privText=text,this.privWordLength=wordLength,this.privTextOffset=textOffset}get audioOffset(){return this.privAudioOffset}get text(){return this.privText}get wordLength(){return this.privWordLength}get textOffset(){return this.privTextOffset}}class SpeechSynthesisBookmarkEventArgs{constructor(audioOffset,text){this.privAudioOffset=audioOffset,this.privText=text}get audioOffset(){return this.privAudioOffset}get text(){return this.privText}}class SpeechSynthesisVisemeEventArgs{constructor(audioOffset,visemeId,animation){this.privAudioOffset=audioOffset,this.privVisemeId=visemeId,this.privAnimation=animation}get audioOffset(){return this.privAudioOffset}get visemeId(){return this.privVisemeId}get animation(){return this.privAnimation}}var PropertyId=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js"),common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),Events=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js"),AudioOutputStream=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js"),PlatformEvent=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class SpeechSynthesisEvent extends PlatformEvent.A{constructor(eventName,requestId,eventType=PlatformEvent.t.Info){super(eventName,eventType),this.privRequestId=requestId}get requestId(){return this.privRequestId}}class SynthesisTriggeredEvent extends SpeechSynthesisEvent{constructor(requestId,sessionAudioDestinationId,turnAudioDestinationId){super("SynthesisTriggeredEvent",requestId),this.privSessionAudioDestinationId=sessionAudioDestinationId,this.privTurnAudioDestinationId=turnAudioDestinationId}get audioSessionDestinationId(){return this.privSessionAudioDestinationId}get audioTurnDestinationId(){return this.privTurnAudioDestinationId}}class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent{constructor(requestId,authFetchEventId){super("ConnectingToSynthesisServiceEvent",requestId),this.privAuthFetchEventId=authFetchEventId}get authFetchEventId(){return this.privAuthFetchEventId}}class SynthesisStartedEvent extends SpeechSynthesisEvent{constructor(requestId,authFetchEventId){super("SynthesisStartedEvent",requestId),this.privAuthFetchEventId=authFetchEventId}get authFetchEventId(){return this.privAuthFetchEventId}}var __awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class SynthesisTurn{constructor(){this.privIsDisposed=!1,this.privIsSynthesizing=!1,this.privIsSynthesisEnded=!1,this.privBytesReceived=0,this.privInTurn=!1,this.privTextOffset=0,this.privNextSearchTextIndex=0,this.onPreConnectionStart=(authFetchEventId,connectionId)=>{this.privAuthFetchEventId=authFetchEventId,this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId,this.privAuthFetchEventId))},this.onAuthCompleted=(isError,error)=>{isError&&this.onComplete()},this.onConnectionEstablishCompleted=(statusCode,reason)=>{if(200===statusCode)return this.onEvent(new SynthesisStartedEvent(this.requestId,this.privAuthFetchEventId)),void(this.privBytesReceived=0);403===statusCode&&this.onComplete()},this.onServiceResponseMessage=responseJson=>{const response=JSON.parse(responseJson);this.streamId=response.audio.streamId},this.onServiceTurnEndResponse=()=>{this.privInTurn=!1,this.privTurnDeferral.resolve(),this.onComplete()},this.onServiceTurnStartResponse=()=>{this.privTurnDeferral&&this.privInTurn&&(this.privTurnDeferral.reject("Another turn started before current completed."),this.privTurnDeferral.promise.then().catch((()=>{}))),this.privInTurn=!0,this.privTurnDeferral=new common_Promise.BH},this.dispose=error=>{this.privIsDisposed||(this.privIsDisposed=!0)},this.onEvent=event=>{Events.z.instance.onEvent(event)},this.onComplete=()=>{this.privIsSynthesizing&&(this.privIsSynthesizing=!1,this.privIsSynthesisEnded=!0,this.privAudioOutputStream.close(),this.privInTurn=!1,void 0!==this.privTurnAudioDestination&&(this.privTurnAudioDestination.close(),this.privTurnAudioDestination=void 0))},this.privRequestId=(0,Guid.Q)(),this.privTurnDeferral=new common_Promise.BH,this.privTurnDeferral.resolve()}get requestId(){return this.privRequestId}get streamId(){return this.privStreamId}set streamId(value){this.privStreamId=value}get audioOutputFormat(){return this.privAudioOutputFormat}set audioOutputFormat(format){this.privAudioOutputFormat=format}get turnCompletionPromise(){return this.privTurnDeferral.promise}get isSynthesisEnded(){return this.privIsSynthesisEnded}get isSynthesizing(){return this.privIsSynthesizing}get currentTextOffset(){return this.privTextOffset}get bytesReceived(){return this.privBytesReceived}getAllReceivedAudio(){return __awaiter(this,void 0,void 0,(function*(){return this.privReceivedAudio?Promise.resolve(this.privReceivedAudio):this.privIsSynthesisEnded?(yield this.readAllAudioFromStream(),Promise.resolve(this.privReceivedAudio)):null}))}getAllReceivedAudioWithHeader(){return __awaiter(this,void 0,void 0,(function*(){if(this.privReceivedAudioWithHeader)return this.privReceivedAudioWithHeader;if(!this.privIsSynthesisEnded)return null;if(this.audioOutputFormat.hasHeader){const audio=yield this.getAllReceivedAudio();return this.privReceivedAudioWithHeader=SynthesisAdapterBase.addHeader(audio,this.audioOutputFormat),this.privReceivedAudioWithHeader}return this.getAllReceivedAudio()}))}startNewSynthesis(requestId,rawText,isSSML,audioDestination){this.privIsSynthesisEnded=!1,this.privIsSynthesizing=!0,this.privRequestId=requestId,this.privRawText=rawText,this.privIsSSML=isSSML,this.privAudioOutputStream=new AudioOutputStream.NO,this.privAudioOutputStream.format=this.privAudioOutputFormat,this.privReceivedAudio=null,this.privReceivedAudioWithHeader=null,this.privBytesReceived=0,this.privTextOffset=0,this.privNextSearchTextIndex=0,this.privPartialVisemeAnimation="",void 0!==audioDestination&&(this.privTurnAudioDestination=audioDestination,this.privTurnAudioDestination.format=this.privAudioOutputFormat),this.onEvent(new SynthesisTriggeredEvent(this.requestId,void 0,void 0===audioDestination?void 0:audioDestination.id()))}onAudioChunkReceived(data){this.isSynthesizing&&(this.privAudioOutputStream.write(data),this.privBytesReceived+=data.byteLength,void 0!==this.privTurnAudioDestination&&this.privTurnAudioDestination.write(data))}onWordBoundaryEvent(text){this.updateTextOffset(text)}onVisemeMetadataReceived(metadata){void 0!==metadata.Data.AnimationChunk&&(this.privPartialVisemeAnimation+=metadata.Data.AnimationChunk)}onStopSynthesizing(){this.onComplete()}getAndClearVisemeAnimation(){const animation=this.privPartialVisemeAnimation;return this.privPartialVisemeAnimation="",animation}updateTextOffset(text){this.privTextOffset>=0&&(this.privTextOffset=this.privRawText.indexOf(text,this.privNextSearchTextIndex),this.privTextOffset>=0&&(this.privNextSearchTextIndex=this.privTextOffset+text.length),this.privIsSSML&&this.privRawText.indexOf("<",this.privTextOffset+1)>this.privRawText.indexOf(">",this.privTextOffset+1)&&this.updateTextOffset(text))}readAllAudioFromStream(){return __awaiter(this,void 0,void 0,(function*(){if(this.privIsSynthesisEnded){this.privReceivedAudio=new ArrayBuffer(this.bytesReceived);try{yield this.privAudioOutputStream.read(this.privReceivedAudio)}catch(e){this.privReceivedAudio=new ArrayBuffer(0)}}}))}}class SynthesisContext{constructor(speechSynthesizer){this.privContext={},this.privSpeechSynthesizer=speechSynthesizer}setSection(sectionName,value){this.privContext[sectionName]=value}set audioOutputFormat(format){this.privAudioOutputFormat=format}toJSON(){const synthesisSection=this.buildSynthesisContext();return this.setSection("synthesis",synthesisSection),JSON.stringify(this.privContext)}buildSynthesisContext(){return{audio:{metadataOptions:{bookmarkEnabled:!!this.privSpeechSynthesizer.bookmarkReached,sentenceBoundaryEnabled:!1,visemeEnabled:!!this.privSpeechSynthesizer.visemeReceived,wordBoundaryEnabled:!!this.privSpeechSynthesizer.wordBoundary},outputFormat:this.privAudioOutputFormat.requestAudioFormatString},language:{autoDetection:this.privSpeechSynthesizer.autoDetectSourceLanguage}}}}var MetadataType,AgentConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js"),Exports=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js");!function(MetadataType){MetadataType.WordBoundary="WordBoundary",MetadataType.Bookmark="Bookmark",MetadataType.Viseme="Viseme"}(MetadataType||(MetadataType={}));class SynthesisAudioMetadata{constructor(json){this.privSynthesisAudioMetadata=JSON.parse(json)}static fromJSON(json){return new SynthesisAudioMetadata(json)}get Metadata(){return this.privSynthesisAudioMetadata.Metadata}}var SpeechConnectionMessage_Internal=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js"),SynthesisAdapterBase_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class SynthesisAdapterBase{constructor(authentication,connectionFactory,synthesizerConfig,speechSynthesizer,audioDestination){if(this.speakOverride=void 0,this.receiveMessageOverride=void 0,this.connectImplOverride=void 0,this.configConnectionOverride=void 0,this.sendSynthesisContext=connection=>{const synthesisContextJson=this.synthesisContext.toJSON();if(synthesisContextJson)return connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"synthesis.context",this.privSynthesisTurn.requestId,"application/json",synthesisContextJson))},this.sendSpeechServiceConfig=(connection,SpeechServiceConfigJson)=>{if(SpeechServiceConfigJson)return connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"speech.config",this.privSynthesisTurn.requestId,"application/json",SpeechServiceConfigJson))},this.sendSsmlMessage=(connection,ssml,requestId)=>connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"ssml",requestId,"application/ssml+xml",ssml)),!authentication)throw new common_Error.Do("authentication");if(!connectionFactory)throw new common_Error.Do("connectionFactory");if(!synthesizerConfig)throw new common_Error.Do("synthesizerConfig");this.privAuthentication=authentication,this.privConnectionFactory=connectionFactory,this.privSynthesizerConfig=synthesizerConfig,this.privIsDisposed=!1,this.privSpeechSynthesizer=speechSynthesizer,this.privSessionAudioDestination=audioDestination,this.privSynthesisTurn=new SynthesisTurn,this.privConnectionEvents=new EventSource.n,this.privServiceEvents=new EventSource.n,this.privSynthesisContext=new SynthesisContext(this.privSpeechSynthesizer),this.privAgentConfig=new AgentConfig.H,this.connectionEvents.attach((connectionEvent=>{if("ConnectionClosedEvent"===connectionEvent.name){const connectionClosedEvent=connectionEvent;1e3!==connectionClosedEvent.statusCode&&this.cancelSynthesisLocal(CancellationReason._.Error,1007===connectionClosedEvent.statusCode?CancellationErrorCodes.E.BadRequestParameters:CancellationErrorCodes.E.ConnectionFailure,connectionClosedEvent.reason+" websocket error code: "+connectionClosedEvent.statusCode)}}))}get synthesisContext(){return this.privSynthesisContext}get agentConfig(){return this.privAgentConfig}get connectionEvents(){return this.privConnectionEvents}get serviceEvents(){return this.privServiceEvents}set activityTemplate(messagePayload){this.privActivityTemplate=messagePayload}get activityTemplate(){return this.privActivityTemplate}set audioOutputFormat(format){this.privAudioOutputFormat=format,this.privSynthesisTurn.audioOutputFormat=format,void 0!==this.privSessionAudioDestination&&(this.privSessionAudioDestination.format=format),void 0!==this.synthesisContext&&(this.synthesisContext.audioOutputFormat=format)}static addHeader(audio,format){if(!format.hasHeader)return audio;format.updateHeader(audio.byteLength);const tmp=new Uint8Array(audio.byteLength+format.header.byteLength);return tmp.set(new Uint8Array(format.header),0),tmp.set(new Uint8Array(audio),format.header.byteLength),tmp.buffer}isDisposed(){return this.privIsDisposed}dispose(reason){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){if(this.privIsDisposed=!0,void 0!==this.privSessionAudioDestination&&this.privSessionAudioDestination.close(),this.privConnectionConfigurationPromise){const connection=yield this.privConnectionConfigurationPromise;yield connection.dispose(reason)}}))}connect(){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){yield this.connectImpl()}))}sendNetworkMessage(path,payload){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){const type="string"==typeof payload?ConnectionMessage.C.Text:ConnectionMessage.C.Binary,contentType="string"==typeof payload?"application/json":"";return(yield this.fetchConnection()).send(new SpeechConnectionMessage_Internal.r(type,path,this.privSynthesisTurn.requestId,contentType,payload))}))}Speak(text,isSSML,requestId,successCallback,errorCallBack,audioDestination){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){let ssml;if(ssml=isSSML?text:this.privSpeechSynthesizer.buildSsml(text),void 0!==this.speakOverride)return this.speakOverride(ssml,requestId,successCallback,errorCallBack);this.privSuccessCallback=successCallback,this.privErrorCallback=errorCallBack,this.privSynthesisTurn.startNewSynthesis(requestId,text,isSSML,audioDestination);try{yield this.connectImpl();const connection=yield this.fetchConnection();yield this.sendSynthesisContext(connection),yield this.sendSsmlMessage(connection,ssml,requestId);const synthesisStartEventArgs=new SpeechSynthesisEventArgs(new SpeechSynthesisResult(requestId,ResultReason.s.SynthesizingAudioStarted));this.privSpeechSynthesizer.synthesisStarted&&this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer,synthesisStartEventArgs);this.receiveMessage()}catch(e){return this.cancelSynthesisLocal(CancellationReason._.Error,CancellationErrorCodes.E.ConnectionFailure,e),Promise.reject(e)}}))}cancelSynthesis(requestId,cancellationReason,errorCode,error){const properties=new PropertyCollection.O;properties.setProperty(Exports.CancellationErrorCodePropertyName,CancellationErrorCodes.E[errorCode]);const result=new SpeechSynthesisResult(requestId,ResultReason.s.Canceled,void 0,error,properties);if(this.privSpeechSynthesizer.SynthesisCanceled){const cancelEvent=new SpeechSynthesisEventArgs(result);try{this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer,cancelEvent)}catch(_a){}}if(this.privSuccessCallback)try{this.privSuccessCallback(result)}catch(_b){}}cancelSynthesisLocal(cancellationReason,errorCode,error){this.privSynthesisTurn.isSynthesizing&&(this.privSynthesisTurn.onStopSynthesizing(),this.cancelSynthesis(this.privSynthesisTurn.requestId,cancellationReason,errorCode,error))}processTypeSpecificMessages(connectionMessage,successCallback,errorCallBack){return!0}receiveMessage(){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){try{const connection=yield this.fetchConnection(),message=yield connection.read();if(void 0!==this.receiveMessageOverride)return this.receiveMessageOverride();if(this.privIsDisposed)return;if(!message)return this.privSynthesisTurn.isSynthesizing?this.receiveMessage():void 0;this.privServiceHasSentMessage=!0;const connectionMessage=SpeechConnectionMessage_Internal.r.fromConnectionMessage(message);if(connectionMessage.requestId.toLowerCase()===this.privSynthesisTurn.requestId.toLowerCase())switch(connectionMessage.path.toLowerCase()){case"turn.start":this.privSynthesisTurn.onServiceTurnStartResponse();break;case"response":this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);break;case"audio":if(this.privSynthesisTurn.streamId.toLowerCase()===connectionMessage.streamId.toLowerCase()&&connectionMessage.binaryBody){if(this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody),this.privSpeechSynthesizer.synthesizing)try{const audioWithHeader=SynthesisAdapterBase.addHeader(connectionMessage.binaryBody,this.privSynthesisTurn.audioOutputFormat),ev=new SpeechSynthesisEventArgs(new SpeechSynthesisResult(this.privSynthesisTurn.requestId,ResultReason.s.SynthesizingAudio,audioWithHeader));this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer,ev)}catch(error){}void 0!==this.privSessionAudioDestination&&this.privSessionAudioDestination.write(connectionMessage.binaryBody)}break;case"audio.metadata":const metadataList=SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;for(const metadata of metadataList)switch(metadata.Type){case MetadataType.WordBoundary:this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);const wordBoundaryEventArgs=new SpeechSynthesisWordBoundaryEventArgs(metadata.Data.Offset,metadata.Data.text.Text,metadata.Data.text.Length,this.privSynthesisTurn.currentTextOffset);if(this.privSpeechSynthesizer.wordBoundary)try{this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer,wordBoundaryEventArgs)}catch(error){}break;case MetadataType.Bookmark:const bookmarkEventArgs=new SpeechSynthesisBookmarkEventArgs(metadata.Data.Offset,metadata.Data.Bookmark);if(this.privSpeechSynthesizer.bookmarkReached)try{this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer,bookmarkEventArgs)}catch(error){}break;case MetadataType.Viseme:if(this.privSynthesisTurn.onVisemeMetadataReceived(metadata),metadata.Data.IsLastAnimation){const visemeEventArgs=new SpeechSynthesisVisemeEventArgs(metadata.Data.Offset,metadata.Data.VisemeId,this.privSynthesisTurn.getAndClearVisemeAnimation());if(this.privSpeechSynthesizer.visemeReceived)try{this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer,visemeEventArgs)}catch(error){}}}break;case"turn.end":let result;this.privSynthesisTurn.onServiceTurnEndResponse();try{const audioBuffer=yield this.privSynthesisTurn.getAllReceivedAudioWithHeader();result=new SpeechSynthesisResult(this.privSynthesisTurn.requestId,ResultReason.s.SynthesizingAudioCompleted,audioBuffer),this.privSuccessCallback&&this.privSuccessCallback(result)}catch(error){this.privErrorCallback&&this.privErrorCallback(error)}if(this.privSpeechSynthesizer.synthesisCompleted)try{this.privSpeechSynthesizer.synthesisCompleted(this.privSpeechSynthesizer,new SpeechSynthesisEventArgs(result))}catch(e){}break;default:this.processTypeSpecificMessages(connectionMessage)||this.privServiceEvents&&this.serviceEvents.onEvent(new ConnectionEvents.e2(connectionMessage.path.toLowerCase(),connectionMessage.textBody))}return this.receiveMessage()}catch(e){}}))}connectImpl(isUnAuthorized=!1){if(this.privConnectionPromise)return this.privConnectionPromise.then((connection=>connection.state()===IConnection.e.Disconnected?(this.privConnectionId=null,this.privConnectionPromise=null,this.privServiceHasSentMessage=!1,this.connectImpl()):this.privConnectionPromise),(error=>(this.privConnectionId=null,this.privConnectionPromise=null,this.privServiceHasSentMessage=!1,this.connectImpl())));this.privAuthFetchEventId=(0,Guid.Q)(),this.privConnectionId=(0,Guid.Q)(),this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId,this.privConnectionId);const authPromise=isUnAuthorized?this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId):this.privAuthentication.fetch(this.privAuthFetchEventId);return this.privConnectionPromise=authPromise.then((result=>SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){yield this.privSynthesisTurn.onAuthCompleted(!1);const connection=this.privConnectionFactory.create(this.privSynthesizerConfig,result,this.privConnectionId);connection.events.attach((event=>{this.connectionEvents.onEvent(event)}));const response=yield connection.open();return 200===response.statusCode?(yield this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode),Promise.resolve(connection)):403!==response.statusCode||isUnAuthorized?(yield this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode,response.reason),Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`)):this.connectImpl(!0)}))),(error=>SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){throw yield this.privSynthesisTurn.onAuthCompleted(!0,error),new Error(error)})))),this.privConnectionPromise.catch((()=>{})),this.privConnectionPromise}fetchConnection(){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){return this.privConnectionConfigurationPromise?this.privConnectionConfigurationPromise.then((connection=>connection.state()===IConnection.e.Disconnected?(this.privConnectionId=null,this.privConnectionConfigurationPromise=null,this.privServiceHasSentMessage=!1,this.fetchConnection()):this.privConnectionConfigurationPromise),(error=>(this.privConnectionId=null,this.privConnectionConfigurationPromise=null,this.privServiceHasSentMessage=!1,this.fetchConnection()))):(this.privConnectionConfigurationPromise=this.configureConnection(),yield this.privConnectionConfigurationPromise)}))}configureConnection(){return SynthesisAdapterBase_awaiter(this,void 0,void 0,(function*(){const connection=yield this.connectImpl();return void 0!==this.configConnectionOverride?this.configConnectionOverride(connection):(yield this.sendSpeechServiceConfig(connection,this.privSynthesizerConfig.SpeechServiceConfig.serialize()),connection)}))}}SynthesisAdapterBase.telemetryDataEnabled=!0},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{D:()=>WebsocketMessageFormatter});var _common_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js");class WebsocketMessageFormatter{constructor(){this.toConnectionMessage=message=>{const deferral=new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.BH;try{if(message.messageType===_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Text){const textMessage=message.textContent;let headers={},body=null;if(textMessage){const headerBodySplit=textMessage.split("\r\n\r\n");headerBodySplit&&headerBodySplit.length>0&&(headers=this.parseHeaders(headerBodySplit[0]),headerBodySplit.length>1&&(body=headerBodySplit[1]))}deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.H(message.messageType,body,headers,message.id))}else if(message.messageType===_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Binary){const binaryMessage=message.binaryContent;let headers={},body=null;if(!binaryMessage||binaryMessage.byteLength<2)throw new Error("Invalid binary message format. Header length missing.");const dataView=new DataView(binaryMessage),headerLength=dataView.getInt16(0);if(binaryMessage.byteLength<headerLength+2)throw new Error("Invalid binary message format. Header content missing.");let headersString="";for(let i=0;i<headerLength;i++)headersString+=String.fromCharCode(dataView.getInt8(i+2));headers=this.parseHeaders(headersString),binaryMessage.byteLength>headerLength+2&&(body=binaryMessage.slice(2+headerLength)),deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.H(message.messageType,body,headers,message.id))}}catch(e){deferral.reject(`Error formatting the message. Error: ${e}`)}return deferral.promise},this.fromConnectionMessage=message=>{const deferral=new _common_Exports__WEBPACK_IMPORTED_MODULE_0__.BH;try{if(message.messageType===_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Text){const payload=`${this.makeHeaders(message)}\r\n${message.textBody?message.textBody:""}`;deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.S(_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Text,payload,message.id))}else if(message.messageType===_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Binary){const headersString=this.makeHeaders(message),content=message.binaryBody,headerBuffer=this.stringToArrayBuffer(headersString),headerInt8Array=new Int8Array(headerBuffer),headerLength=headerInt8Array.byteLength,payloadInt8Array=new Int8Array(2+headerLength+(content?content.byteLength:0));if(payloadInt8Array[0]=headerLength>>8&255,payloadInt8Array[1]=255&headerLength,payloadInt8Array.set(headerInt8Array,2),content){const bodyInt8Array=new Int8Array(content);payloadInt8Array.set(bodyInt8Array,2+headerLength)}const payload=payloadInt8Array.buffer;deferral.resolve(new _common_Exports__WEBPACK_IMPORTED_MODULE_2__.S(_common_Exports__WEBPACK_IMPORTED_MODULE_1__.C.Binary,payload,message.id))}}catch(e){deferral.reject(`Error formatting the message. ${e}`)}return deferral.promise},this.makeHeaders=message=>{let headersString="";if(message.headers)for(const header in message.headers)header&&(headersString+=`${header}: ${message.headers[header]}\r\n`);return headersString},this.parseHeaders=headersString=>{const headers={};if(headersString){const headerMatches=headersString.match(/[^\r\n]+/g);if(headers)for(const header of headerMatches)if(header){const separatorIndex=header.indexOf(":"),headerName=separatorIndex>0?header.substr(0,separatorIndex).trim().toLowerCase():header,headerValue=separatorIndex>0&&header.length>separatorIndex+1?header.substr(separatorIndex+1).trim():"";headers[headerName]=headerValue}}return headers},this.stringToArrayBuffer=str=>{const buffer=new ArrayBuffer(str.length),view=new DataView(buffer);for(let i=0;i<str.length;i++)view.setUint8(i,str.charCodeAt(i));return buffer}}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{He:()=>AudioStreamNodeDetachedEvent,Jl:()=>AudioSourceReadyEvent,QZ:()=>AudioSourceInitializingEvent,hA:()=>AudioStreamNodeErrorEvent,i5:()=>AudioStreamNodeAttachingEvent,ls:()=>AudioSourceOffEvent,n0:()=>AudioSourceErrorEvent,sQ:()=>AudioStreamNodeAttachedEvent});var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class AudioSourceEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.A{constructor(eventName,audioSourceId,eventType=_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Info){super(eventName,eventType),this.privAudioSourceId=audioSourceId}get audioSourceId(){return this.privAudioSourceId}}class AudioSourceInitializingEvent extends AudioSourceEvent{constructor(audioSourceId){super("AudioSourceInitializingEvent",audioSourceId)}}class AudioSourceReadyEvent extends AudioSourceEvent{constructor(audioSourceId){super("AudioSourceReadyEvent",audioSourceId)}}class AudioSourceOffEvent extends AudioSourceEvent{constructor(audioSourceId){super("AudioSourceOffEvent",audioSourceId)}}class AudioSourceErrorEvent extends AudioSourceEvent{constructor(audioSourceId,error){super("AudioSourceErrorEvent",audioSourceId,_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Error),this.privError=error}get error(){return this.privError}}class AudioStreamNodeEvent extends AudioSourceEvent{constructor(eventName,audioSourceId,audioNodeId){super(eventName,audioSourceId),this.privAudioNodeId=audioNodeId}get audioNodeId(){return this.privAudioNodeId}}class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent{constructor(audioSourceId,audioNodeId){super("AudioStreamNodeAttachingEvent",audioSourceId,audioNodeId)}}class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent{constructor(audioSourceId,audioNodeId){super("AudioStreamNodeAttachedEvent",audioSourceId,audioNodeId)}}class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent{constructor(audioSourceId,audioNodeId){super("AudioStreamNodeDetachedEvent",audioSourceId,audioNodeId)}}class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent{constructor(audioSourceId,audioNodeId,error){super("AudioStreamNodeErrorEvent",audioSourceId,audioNodeId),this.privError=error}get error(){return this.privError}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{u:()=>BackgroundEvent});var _Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class BackgroundEvent extends _Exports__WEBPACK_IMPORTED_MODULE_0__.A{constructor(error){super("BackgroundEvent",_Exports__WEBPACK_IMPORTED_MODULE_0__.t.Error),this.privError=error}get error(){return this.privError}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K4:()=>ConnectionErrorEvent,PE:()=>ConnectionClosedEvent,Qz:()=>ConnectionMessageReceivedEvent,YF:()=>ConnectionStartEvent,Zk:()=>ConnectionEstablishedEvent,e2:()=>ServiceEvent,w2:()=>ConnectionMessageSentEvent,xz:()=>ConnectionEstablishErrorEvent});var _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class ServiceEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.A{constructor(eventName,jsonstring,eventType=_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Info){super(eventName,eventType),this.privJsonResult=jsonstring}get jsonString(){return this.privJsonResult}}class ConnectionEvent extends _PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.A{constructor(eventName,connectionId,eventType=_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Info){super(eventName,eventType),this.privConnectionId=connectionId}get connectionId(){return this.privConnectionId}}class ConnectionStartEvent extends ConnectionEvent{constructor(connectionId,uri,headers){super("ConnectionStartEvent",connectionId),this.privUri=uri,this.privHeaders=headers}get uri(){return this.privUri}get headers(){return this.privHeaders}}class ConnectionEstablishedEvent extends ConnectionEvent{constructor(connectionId,metadata){super("ConnectionEstablishedEvent",connectionId)}}class ConnectionClosedEvent extends ConnectionEvent{constructor(connectionId,statusCode,reason){super("ConnectionClosedEvent",connectionId,_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Debug),this.privReason=reason,this.privStatusCode=statusCode}get reason(){return this.privReason}get statusCode(){return this.privStatusCode}}class ConnectionErrorEvent extends ConnectionEvent{constructor(connectionId,message,type){super("ConnectionErrorEvent",connectionId,_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Debug),this.privMessage=message,this.privType=type}get message(){return this.privMessage}get type(){return this.privType}}class ConnectionEstablishErrorEvent extends ConnectionEvent{constructor(connectionId,statuscode,reason){super("ConnectionEstablishErrorEvent",connectionId,_PlatformEvent__WEBPACK_IMPORTED_MODULE_0__.t.Error),this.privStatusCode=statuscode,this.privReason=reason}get reason(){return this.privReason}get statusCode(){return this.privStatusCode}}class ConnectionMessageReceivedEvent extends ConnectionEvent{constructor(connectionId,networkReceivedTimeISO,message){super("ConnectionMessageReceivedEvent",connectionId),this.privNetworkReceivedTime=networkReceivedTimeISO,this.privMessage=message}get networkReceivedTime(){return this.privNetworkReceivedTime}get message(){return this.privMessage}}class ConnectionMessageSentEvent extends ConnectionEvent{constructor(connectionId,networkSentTimeISO,message){super("ConnectionMessageSentEvent",connectionId),this.privNetworkSentTime=networkSentTimeISO,this.privMessage=message}get networkSentTime(){return this.privNetworkSentTime}get message(){return this.privMessage}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{C:()=>MessageType,H:()=>ConnectionMessage});var MessageType,_Error__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_Guid__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");!function(MessageType){MessageType[MessageType.Text=0]="Text",MessageType[MessageType.Binary=1]="Binary"}(MessageType||(MessageType={}));class ConnectionMessage{constructor(messageType,body,headers,id){if(this.privBody=null,messageType===MessageType.Text&&body&&"string"!=typeof body)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Payload must be a string");if(messageType===MessageType.Binary&&body&&!(body instanceof ArrayBuffer))throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Payload must be ArrayBuffer");switch(this.privMessageType=messageType,this.privBody=body,this.privHeaders=headers||{},this.privId=id||(0,_Guid__WEBPACK_IMPORTED_MODULE_1__.Q)(),this.messageType){case MessageType.Binary:this.privSize=null!==this.binaryBody?this.binaryBody.byteLength:0;break;case MessageType.Text:this.privSize=this.textBody.length}}get messageType(){return this.privMessageType}get headers(){return this.privHeaders}get body(){return this.privBody}get textBody(){if(this.privMessageType===MessageType.Binary)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Not supported for binary message");return this.privBody}get binaryBody(){if(this.privMessageType===MessageType.Text)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Not supported for text message");return this.privBody}get id(){return this.privId}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{$2:()=>InvalidOperationError,Do:()=>ArgumentNullError,IV:()=>ObjectDisposedError});class ArgumentNullError extends Error{constructor(argumentName){super(argumentName),this.name="ArgumentNull",this.message=argumentName}}class InvalidOperationError extends Error{constructor(error){super(error),this.name="InvalidOperation",this.message=error}}class ObjectDisposedError extends Error{constructor(objectName,error){super(error),this.name=objectName+"ObjectDisposed",this.message=error}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{n:()=>EventSource});var _Error__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_Guid__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");class EventSource{constructor(metadata){this.privEventListeners={},this.privIsDisposed=!1,this.onEvent=event=>{if(this.isDisposed())throw new _Error__WEBPACK_IMPORTED_MODULE_0__.IV("EventSource");if(this.metadata)for(const paramName in this.metadata)paramName&&event.metadata&&(event.metadata[paramName]||(event.metadata[paramName]=this.metadata[paramName]));for(const eventId in this.privEventListeners)eventId&&this.privEventListeners[eventId]&&this.privEventListeners[eventId](event)},this.attach=onEventCallback=>{const id=(0,_Guid__WEBPACK_IMPORTED_MODULE_1__.Q)();return this.privEventListeners[id]=onEventCallback,{detach:()=>(delete this.privEventListeners[id],Promise.resolve())}},this.attachListener=listener=>this.attach(listener.onEvent),this.isDisposed=()=>this.privIsDisposed,this.dispose=()=>{this.privEventListeners=null,this.privIsDisposed=!0},this.privMetadata=metadata}get metadata(){return this.privMetadata}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{z:()=>Events});var _Error__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_EventSource__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");class Events{static get instance(){return Events.privInstance}}Events.privInstance=new _EventSource__WEBPACK_IMPORTED_MODULE_0__.n,Events.setEventSource=eventSource=>{if(!eventSource)throw new _Error__WEBPACK_IMPORTED_MODULE_1__.Do("eventSource");Events.privInstance=eventSource}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var getRandomValues;__webpack_require__.d(__webpack_exports__,{Q:()=>createNoDashGuid});var rnds8=new Uint8Array(16);function rng(){if(!getRandomValues&&!(getRandomValues="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return getRandomValues(rnds8)}const regex=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const esm_browser_validate=function validate(uuid){return"string"==typeof uuid&&regex.test(uuid)};for(var byteToHex=[],i=0;i<256;++i)byteToHex.push((i+256).toString(16).substr(1));const esm_browser_stringify=function stringify(arr){var offset=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,uuid=(byteToHex[arr[offset+0]]+byteToHex[arr[offset+1]]+byteToHex[arr[offset+2]]+byteToHex[arr[offset+3]]+"-"+byteToHex[arr[offset+4]]+byteToHex[arr[offset+5]]+"-"+byteToHex[arr[offset+6]]+byteToHex[arr[offset+7]]+"-"+byteToHex[arr[offset+8]]+byteToHex[arr[offset+9]]+"-"+byteToHex[arr[offset+10]]+byteToHex[arr[offset+11]]+byteToHex[arr[offset+12]]+byteToHex[arr[offset+13]]+byteToHex[arr[offset+14]]+byteToHex[arr[offset+15]]).toLowerCase();if(!esm_browser_validate(uuid))throw TypeError("Stringified UUID is invalid");return uuid};const esm_browser_v4=function v4(options,buf,offset){var rnds=(options=options||{}).random||(options.rng||rng)();if(rnds[6]=15&rnds[6]|64,rnds[8]=63&rnds[8]|128,buf){offset=offset||0;for(var i=0;i<16;++i)buf[offset+i]=rnds[i];return buf}return esm_browser_stringify(rnds)},createNoDashGuid=()=>esm_browser_v4().replace(new RegExp("-","g"),"").toUpperCase()},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var ConnectionState;__webpack_require__.d(__webpack_exports__,{e:()=>ConnectionState}),function(ConnectionState){ConnectionState[ConnectionState.None=0]="None",ConnectionState[ConnectionState.Connected=1]="Connected",ConnectionState[ConnectionState.Connecting=2]="Connecting",ConnectionState[ConnectionState.Disconnected=3]="Disconnected"}(ConnectionState||(ConnectionState={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>PlatformEvent,t:()=>EventType});var EventType,_Guid__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");!function(EventType){EventType[EventType.Debug=0]="Debug",EventType[EventType.Info=1]="Info",EventType[EventType.Warning=2]="Warning",EventType[EventType.Error=3]="Error"}(EventType||(EventType={}));class PlatformEvent{constructor(eventName,eventType){this.privName=eventName,this.privEventId=(0,_Guid__WEBPACK_IMPORTED_MODULE_0__.Q)(),this.privEventTime=(new Date).toISOString(),this.privEventType=eventType,this.privMetadata={}}get name(){return this.privName}get eventId(){return this.privEventId}get eventTime(){return this.privEventTime}get eventType(){return this.privEventType}get metadata(){return this.privMetadata}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var PromiseState;__webpack_require__.d(__webpack_exports__,{BH:()=>Deferred,Kb:()=>marshalPromiseToCallbacks}),function(PromiseState){PromiseState[PromiseState.None=0]="None",PromiseState[PromiseState.Resolved=1]="Resolved",PromiseState[PromiseState.Rejected=2]="Rejected"}(PromiseState||(PromiseState={}));class Deferred{constructor(){this.resolve=result=>(this.privResolve(result),this),this.reject=error=>(this.privReject(error),this),this.privPromise=new Promise(((resolve,reject)=>{this.privResolve=resolve,this.privReject=reject}))}get promise(){return this.privPromise}}function marshalPromiseToCallbacks(promise,cb,err){promise.then((val=>{try{cb&&cb(val)}catch(error){if(err)try{if(error instanceof Error){const typedError=error;err(typedError.name+": "+typedError.message)}else err(error)}catch(error){}}}),(error=>{if(err)try{if(error instanceof Error){const typedError=error;err(typedError.name+": "+typedError.message)}else err(error)}catch(error){}}))}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{c:()=>Queue});var Error=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js");class List{constructor(list){if(this.privSubscriptionIdCounter=0,this.privAddSubscriptions={},this.privRemoveSubscriptions={},this.privDisposedSubscriptions={},this.privDisposeReason=null,this.get=itemIndex=>(this.throwIfDisposed(),this.privList[itemIndex]),this.first=()=>this.get(0),this.last=()=>this.get(this.length()-1),this.add=item=>{this.throwIfDisposed(),this.insertAt(this.privList.length,item)},this.insertAt=(index,item)=>{this.throwIfDisposed(),0===index?this.privList.unshift(item):index===this.privList.length?this.privList.push(item):this.privList.splice(index,0,item),this.triggerSubscriptions(this.privAddSubscriptions)},this.removeFirst=()=>(this.throwIfDisposed(),this.removeAt(0)),this.removeLast=()=>(this.throwIfDisposed(),this.removeAt(this.length()-1)),this.removeAt=index=>(this.throwIfDisposed(),this.remove(index,1)[0]),this.remove=(index,count)=>{this.throwIfDisposed();const removedElements=this.privList.splice(index,count);return this.triggerSubscriptions(this.privRemoveSubscriptions),removedElements},this.clear=()=>{this.throwIfDisposed(),this.remove(0,this.length())},this.length=()=>(this.throwIfDisposed(),this.privList.length),this.onAdded=addedCallback=>{this.throwIfDisposed();const subscriptionId=this.privSubscriptionIdCounter++;return this.privAddSubscriptions[subscriptionId]=addedCallback,{detach:()=>(delete this.privAddSubscriptions[subscriptionId],Promise.resolve())}},this.onRemoved=removedCallback=>{this.throwIfDisposed();const subscriptionId=this.privSubscriptionIdCounter++;return this.privRemoveSubscriptions[subscriptionId]=removedCallback,{detach:()=>(delete this.privRemoveSubscriptions[subscriptionId],Promise.resolve())}},this.onDisposed=disposedCallback=>{this.throwIfDisposed();const subscriptionId=this.privSubscriptionIdCounter++;return this.privDisposedSubscriptions[subscriptionId]=disposedCallback,{detach:()=>(delete this.privDisposedSubscriptions[subscriptionId],Promise.resolve())}},this.join=seperator=>(this.throwIfDisposed(),this.privList.join(seperator)),this.toArray=()=>{const cloneCopy=Array();return this.privList.forEach((val=>{cloneCopy.push(val)})),cloneCopy},this.any=callback=>(this.throwIfDisposed(),callback?this.where(callback).length()>0:this.length()>0),this.all=callback=>(this.throwIfDisposed(),this.where(callback).length()===this.length()),this.forEach=callback=>{this.throwIfDisposed();for(let i=0;i<this.length();i++)callback(this.privList[i],i)},this.select=callback=>{this.throwIfDisposed();const selectList=[];for(let i=0;i<this.privList.length;i++)selectList.push(callback(this.privList[i],i));return new List(selectList)},this.where=callback=>{this.throwIfDisposed();const filteredList=new List;for(let i=0;i<this.privList.length;i++)callback(this.privList[i],i)&&filteredList.add(this.privList[i]);return filteredList},this.orderBy=compareFn=>{this.throwIfDisposed();const orderedArray=this.toArray().sort(compareFn);return new List(orderedArray)},this.orderByDesc=compareFn=>(this.throwIfDisposed(),this.orderBy(((a,b)=>compareFn(b,a)))),this.clone=()=>(this.throwIfDisposed(),new List(this.toArray())),this.concat=list=>(this.throwIfDisposed(),new List(this.privList.concat(list.toArray()))),this.concatArray=array=>(this.throwIfDisposed(),new List(this.privList.concat(array))),this.isDisposed=()=>null==this.privList,this.dispose=reason=>{this.isDisposed()||(this.privDisposeReason=reason,this.privList=null,this.privAddSubscriptions=null,this.privRemoveSubscriptions=null,this.triggerSubscriptions(this.privDisposedSubscriptions))},this.throwIfDisposed=()=>{if(this.isDisposed())throw new Error.IV("List",this.privDisposeReason)},this.triggerSubscriptions=subscriptions=>{if(subscriptions)for(const subscriptionId in subscriptions)subscriptionId&&subscriptions[subscriptionId]()},this.privList=[],list)for(const item of list)this.privList.push(item)}}var SubscriberType,common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};!function(SubscriberType){SubscriberType[SubscriberType.Dequeue=0]="Dequeue",SubscriberType[SubscriberType.Peek=1]="Peek"}(SubscriberType||(SubscriberType={}));class Queue{constructor(list){this.privPromiseStore=new List,this.privIsDrainInProgress=!1,this.privIsDisposing=!1,this.privDisposeReason=null,this.enqueue=item=>{this.throwIfDispose(),this.enqueueFromPromise(new Promise(((resolve,reject)=>{resolve(item)})))},this.enqueueFromPromise=promise=>{this.throwIfDispose(),promise.then((val=>{this.privList.add(val)}),(error=>{}))},this.dequeue=()=>{this.throwIfDispose();const deferredSubscriber=new common_Promise.BH;return this.privSubscribers&&(this.privSubscribers.add({deferral:deferredSubscriber,type:SubscriberType.Dequeue}),this.drain()),deferredSubscriber.promise},this.peek=()=>{this.throwIfDispose();const deferredSubscriber=new common_Promise.BH;return this.privSubscribers&&(this.privSubscribers.add({deferral:deferredSubscriber,type:SubscriberType.Peek}),this.drain()),deferredSubscriber.promise},this.length=()=>(this.throwIfDispose(),this.privList.length()),this.isDisposed=()=>null==this.privSubscribers,this.drain=()=>{if(!this.privIsDrainInProgress&&!this.privIsDisposing){this.privIsDrainInProgress=!0;const subs=this.privSubscribers,lists=this.privList;if(subs&&lists){for(;lists.length()>0&&subs.length()>0&&!this.privIsDisposing;){const subscriber=subs.removeFirst();if(subscriber.type===SubscriberType.Peek)subscriber.deferral.resolve(lists.first());else{const dequeuedItem=lists.removeFirst();subscriber.deferral.resolve(dequeuedItem)}}this.privSubscribers===subs&&(this.privSubscribers=subs),this.privList===lists&&(this.privList=lists)}this.privIsDrainInProgress=!1}},this.throwIfDispose=()=>{if(this.isDisposed()){if(this.privDisposeReason)throw new Error.$2(this.privDisposeReason);throw new Error.IV("Queue")}if(this.privIsDisposing)throw new Error.$2("Queue disposing")},this.privList=list||new List,this.privDetachables=[],this.privSubscribers=new List,this.privDetachables.push(this.privList.onAdded(this.drain))}drainAndDispose(pendingItemProcessor,reason){return __awaiter(this,void 0,void 0,(function*(){if(!this.isDisposed()&&!this.privIsDisposing){this.privDisposeReason=reason,this.privIsDisposing=!0;const subs=this.privSubscribers;if(subs){for(;subs.length()>0;){subs.removeFirst().deferral.resolve(void 0)}this.privSubscribers===subs&&(this.privSubscribers=subs)}for(const detachable of this.privDetachables)yield detachable.detach();if(this.privPromiseStore.length()>0&&pendingItemProcessor){const promiseArray=[];return this.privPromiseStore.toArray().forEach((wrapper=>{promiseArray.push(wrapper)})),Promise.all(promiseArray).finally((()=>{this.privSubscribers=null,this.privList.forEach(((item,index)=>{pendingItemProcessor(item)})),this.privList=null})).then()}this.privSubscribers=null,this.privList=null}}))}dispose(reason){return __awaiter(this,void 0,void 0,(function*(){yield this.drainAndDispose(null,reason)}))}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/RawWebsocketMessage.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{S:()=>RawWebsocketMessage});var _ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),_Error__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_Guid__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js");class RawWebsocketMessage{constructor(messageType,payload,id){if(this.privPayload=null,!payload)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.Do("payload");if(messageType===_ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.C.Binary&&"ArrayBuffer"!==payload.__proto__.constructor.name)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Payload must be ArrayBuffer");if(messageType===_ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.C.Text&&"string"!=typeof payload)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Payload must be a string");this.privMessageType=messageType,this.privPayload=payload,this.privId=id||(0,_Guid__WEBPACK_IMPORTED_MODULE_2__.Q)()}get messageType(){return this.privMessageType}get payload(){return this.privPayload}get textContent(){if(this.privMessageType===_ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.C.Binary)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Not supported for binary message");return this.privPayload}get binaryContent(){if(this.privMessageType===_ConnectionMessage__WEBPACK_IMPORTED_MODULE_1__.C.Text)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Not supported for text message");return this.privPayload}get id(){return this.privId}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{F:()=>Stream});var _Error__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),_Guid__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),_Queue__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class Stream{constructor(streamId){this.privIsWriteEnded=!1,this.privIsReadEnded=!1,this.read=()=>{if(this.privIsReadEnded)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Stream read has already finished");return this.privReaderQueue.dequeue().then((streamChunk=>__awaiter(this,void 0,void 0,(function*(){return(void 0===streamChunk||streamChunk.isEnd)&&(yield this.privReaderQueue.dispose("End of stream reached")),streamChunk}))))},this.readEnded=()=>{this.privIsReadEnded||(this.privIsReadEnded=!0,this.privReaderQueue=new _Queue__WEBPACK_IMPORTED_MODULE_1__.c)},this.throwIfClosed=()=>{if(this.privIsWriteEnded)throw new _Error__WEBPACK_IMPORTED_MODULE_0__.$2("Stream closed")},this.privId=streamId||(0,_Guid__WEBPACK_IMPORTED_MODULE_2__.Q)(),this.privReaderQueue=new _Queue__WEBPACK_IMPORTED_MODULE_1__.c}get isClosed(){return this.privIsWriteEnded}get isReadEnded(){return this.privIsReadEnded}get id(){return this.privId}close(){this.privIsWriteEnded||(this.writeStreamChunk({buffer:null,isEnd:!0,timeReceived:Date.now()}),this.privIsWriteEnded=!0)}writeStreamChunk(streamChunk){if(this.throwIfClosed(),!this.privReaderQueue.isDisposed())try{this.privReaderQueue.enqueue(streamChunk)}catch(e){}}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{rU:()=>AudioConfig});class RiffPcmEncoder{constructor(actualSampleRate,desiredSampleRate){this.encode=actualAudioFrame=>{const audioFrame=this.downSampleAudioFrame(actualAudioFrame,this.privActualSampleRate,this.privDesiredSampleRate);if(!audioFrame)return null;const audioLength=2*audioFrame.length,buffer=new ArrayBuffer(audioLength),view=new DataView(buffer);return this.floatTo16BitPCM(view,0,audioFrame),buffer},this.setString=(view,offset,str)=>{for(let i=0;i<str.length;i++)view.setUint8(offset+i,str.charCodeAt(i))},this.floatTo16BitPCM=(view,offset,input)=>{for(let i=0;i<input.length;i++,offset+=2){const s=Math.max(-1,Math.min(1,input[i]));view.setInt16(offset,s<0?32768*s:32767*s,!0)}},this.downSampleAudioFrame=(srcFrame,srcRate,dstRate)=>{if(!srcFrame)return null;if(dstRate===srcRate||dstRate>srcRate)return srcFrame;const ratio=srcRate/dstRate,dstLength=Math.round(srcFrame.length/ratio),dstFrame=new Float32Array(dstLength);let srcOffset=0,dstOffset=0;for(;dstOffset<dstLength;){const nextSrcOffset=Math.round((dstOffset+1)*ratio);let accum=0,count=0;for(;srcOffset<nextSrcOffset&&srcOffset<srcFrame.length;)accum+=srcFrame[srcOffset++],count++;dstFrame[dstOffset++]=accum/count}return dstFrame},this.privActualSampleRate=actualSampleRate,this.privDesiredSampleRate=desiredSampleRate}}class PcmRecorder{constructor(stopInputOnRelease){this.record=(context,mediaStream,outputStream)=>{const waveStreamEncoder=new RiffPcmEncoder(context.sampleRate,16e3);let needHeader=!0;const micInput=context.createMediaStreamSource(mediaStream);if(!this.privSpeechProcessorScript){const blob=new Blob(["class SP extends AudioWorkletProcessor {\n                constructor(options) {\n                  super(options);\n                }\n                process(inputs, outputs) {\n                  const input = inputs[0];\n                  const output = [];\n                  for (let channel = 0; channel < input.length; channel += 1) {\n                    output[channel] = input[channel];\n                  }\n                  this.port.postMessage(output[0]);\n                  return true;\n                }\n              }\n              registerProcessor('speech-processor', SP);"],{type:"application/javascript; charset=utf-8"});this.privSpeechProcessorScript=URL.createObjectURL(blob)}const attachScriptProcessor=()=>{const scriptNode=(()=>{let bufferSize=0;try{return context.createScriptProcessor(bufferSize,1,1)}catch(error){bufferSize=2048;let audioSampleRate=context.sampleRate;for(;bufferSize<16384&&audioSampleRate>=32e3;)bufferSize<<=1,audioSampleRate>>=1;return context.createScriptProcessor(bufferSize,1,1)}})();scriptNode.onaudioprocess=event=>{const inputFrame=event.inputBuffer.getChannelData(0);if(outputStream&&!outputStream.isClosed){const waveFrame=waveStreamEncoder.encode(inputFrame);waveFrame&&(outputStream.writeStreamChunk({buffer:waveFrame,isEnd:!1,timeReceived:Date.now()}),needHeader=!1)}},micInput.connect(scriptNode),scriptNode.connect(context.destination),this.privMediaResources={scriptProcessorNode:scriptNode,source:micInput,stream:mediaStream}};if(this.privSpeechProcessorScript&&context.audioWorklet)context.audioWorklet.addModule(this.privSpeechProcessorScript).then((()=>{const workletNode=new AudioWorkletNode(context,"speech-processor");workletNode.port.onmessage=ev=>{const inputFrame=ev.data;if(outputStream&&!outputStream.isClosed){const waveFrame=waveStreamEncoder.encode(inputFrame);waveFrame&&(outputStream.writeStreamChunk({buffer:waveFrame,isEnd:!1,timeReceived:Date.now()}),needHeader=!1)}},micInput.connect(workletNode),workletNode.connect(context.destination),this.privMediaResources={scriptProcessorNode:workletNode,source:micInput,stream:mediaStream}})).catch((()=>{attachScriptProcessor()}));else try{attachScriptProcessor()}catch(err){throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err}`)}},this.releaseMediaResources=context=>{this.privMediaResources&&(this.privMediaResources.scriptProcessorNode&&(this.privMediaResources.scriptProcessorNode.disconnect(context.destination),this.privMediaResources.scriptProcessorNode=null),this.privMediaResources.source&&(this.privMediaResources.source.disconnect(),this.privStopInputOnRelease&&this.privMediaResources.stream.getTracks().forEach((track=>track.stop())),this.privMediaResources.source=null))},this.privStopInputOnRelease=stopInputOnRelease}setWorkletUrl(url){this.privSpeechProcessorScript=url}}var RecognizerConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js"),common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),AudioSourceEvents=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js"),Stream=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js");class ChunkedArrayBufferStream extends Stream.F{constructor(targetChunkSize,streamId){super(streamId),this.privTargetChunkSize=targetChunkSize,this.privNextBufferReadyBytes=0}writeStreamChunk(chunk){if(chunk.isEnd||0===this.privNextBufferReadyBytes&&chunk.buffer.byteLength===this.privTargetChunkSize)return void super.writeStreamChunk(chunk);let bytesCopiedFromBuffer=0;for(;bytesCopiedFromBuffer<chunk.buffer.byteLength;){void 0===this.privNextBufferToWrite&&(this.privNextBufferToWrite=new ArrayBuffer(this.privTargetChunkSize),this.privNextBufferStartTime=chunk.timeReceived);const bytesToCopy=Math.min(chunk.buffer.byteLength-bytesCopiedFromBuffer,this.privTargetChunkSize-this.privNextBufferReadyBytes),targetView=new Uint8Array(this.privNextBufferToWrite),sourceView=new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer,bytesToCopy+bytesCopiedFromBuffer));targetView.set(sourceView,this.privNextBufferReadyBytes),this.privNextBufferReadyBytes+=bytesToCopy,bytesCopiedFromBuffer+=bytesToCopy,this.privNextBufferReadyBytes===this.privTargetChunkSize&&(super.writeStreamChunk({buffer:this.privNextBufferToWrite,isEnd:!1,timeReceived:this.privNextBufferStartTime}),this.privNextBufferReadyBytes=0,this.privNextBufferToWrite=void 0)}}close(){0===this.privNextBufferReadyBytes||this.isClosed||super.writeStreamChunk({buffer:this.privNextBufferToWrite.slice(0,this.privNextBufferReadyBytes),isEnd:!1,timeReceived:this.privNextBufferStartTime}),super.close()}}var Events=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js"),Guid=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),EventSource=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js"),AudioStreamFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class MicAudioSource{constructor(privRecorder,deviceId,audioSourceId,mediaStream){this.privRecorder=privRecorder,this.deviceId=deviceId,this.privStreams={},this.turnOn=()=>{if(this.privInitializeDeferral)return this.privInitializeDeferral.promise;this.privInitializeDeferral=new common_Promise.BH;try{this.createAudioContext()}catch(error){if(error instanceof Error){const typedError=error;this.privInitializeDeferral.reject(typedError.name+": "+typedError.message)}else this.privInitializeDeferral.reject(error);return this.privInitializeDeferral.promise}const nav=window.navigator;let getUserMedia=nav.getUserMedia||nav.webkitGetUserMedia||nav.mozGetUserMedia||nav.msGetUserMedia;if(nav.mediaDevices&&(getUserMedia=(constraints,successCallback,errorCallback)=>{nav.mediaDevices.getUserMedia(constraints).then(successCallback).catch(errorCallback)}),getUserMedia){const next=()=>{this.onEvent(new AudioSourceEvents.QZ(this.privId)),this.privMediaStream&&this.privMediaStream.active?(this.onEvent(new AudioSourceEvents.Jl(this.privId)),this.privInitializeDeferral.resolve()):getUserMedia({audio:!this.deviceId||{deviceId:this.deviceId},video:!1},(mediaStream=>{this.privMediaStream=mediaStream,this.onEvent(new AudioSourceEvents.Jl(this.privId)),this.privInitializeDeferral.resolve()}),(error=>{const errorMsg=`Error occurred during microphone initialization: ${error}`;this.privInitializeDeferral.reject(errorMsg),this.onEvent(new AudioSourceEvents.n0(this.privId,errorMsg))}))};"suspended"===this.privContext.state?this.privContext.resume().then(next).catch((reason=>{this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`)})):next()}else{const errorMsg="Browser does not support getUserMedia.";this.privInitializeDeferral.reject(errorMsg),this.onEvent(new AudioSourceEvents.n0(errorMsg,""))}return this.privInitializeDeferral.promise},this.id=()=>this.privId,this.attach=audioNodeId=>(this.onEvent(new AudioSourceEvents.i5(this.privId,audioNodeId)),this.listen(audioNodeId).then((stream=>(this.onEvent(new AudioSourceEvents.sQ(this.privId,audioNodeId)),{detach:()=>__awaiter(this,void 0,void 0,(function*(){return stream.readEnded(),delete this.privStreams[audioNodeId],this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)),this.turnOff()})),id:()=>audioNodeId,read:()=>stream.read()})))),this.detach=audioNodeId=>{audioNodeId&&this.privStreams[audioNodeId]&&(this.privStreams[audioNodeId].close(),delete this.privStreams[audioNodeId],this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)))},this.listen=audioNodeId=>__awaiter(this,void 0,void 0,(function*(){yield this.turnOn();const stream=new ChunkedArrayBufferStream(this.privOutputChunkSize,audioNodeId);this.privStreams[audioNodeId]=stream;try{this.privRecorder.record(this.privContext,this.privMediaStream,stream)}catch(error){throw this.onEvent(new AudioSourceEvents.hA(this.privId,audioNodeId,error)),error}return stream})),this.onEvent=event=>{this.privEvents.onEvent(event),Events.z.instance.onEvent(event)},this.createAudioContext=()=>{this.privContext||(this.privContext=AudioStreamFormat.Bm.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec))},this.privOutputChunkSize=MicAudioSource.AUDIOFORMAT.avgBytesPerSec/10,this.privId=audioSourceId||(0,Guid.Q)(),this.privEvents=new EventSource.n,this.privMediaStream=mediaStream||null,this.privIsClosing=!1}get format(){return Promise.resolve(MicAudioSource.AUDIOFORMAT)}get blob(){return Promise.reject("Not implemented for Mic input")}turnOff(){return __awaiter(this,void 0,void 0,(function*(){for(const streamId in this.privStreams)if(streamId){const stream=this.privStreams[streamId];stream&&stream.close()}this.onEvent(new AudioSourceEvents.ls(this.privId)),this.privInitializeDeferral&&(yield this.privInitializeDeferral,this.privInitializeDeferral=null),yield this.destroyAudioContext()}))}get events(){return this.privEvents}get deviceInfo(){return this.getMicrophoneLabel().then((label=>({bitspersample:MicAudioSource.AUDIOFORMAT.bitsPerSample,channelcount:MicAudioSource.AUDIOFORMAT.channels,connectivity:RecognizerConfig.wF.Unknown,manufacturer:"Speech SDK",model:label,samplerate:MicAudioSource.AUDIOFORMAT.samplesPerSec,type:RecognizerConfig.dt.Microphones})))}setProperty(name,value){if("MICROPHONE-WorkletSourceUrl"!==name)throw new Error("Property '"+name+"' is not supported on Microphone.");this.privRecorder.setWorkletUrl(value)}getMicrophoneLabel(){if(void 0!==this.privMicrophoneLabel)return Promise.resolve(this.privMicrophoneLabel);if(void 0===this.privMediaStream||!this.privMediaStream.active)return Promise.resolve("microphone");this.privMicrophoneLabel="microphone";const microphoneDeviceId=this.privMediaStream.getTracks()[0].getSettings().deviceId;if(void 0===microphoneDeviceId)return Promise.resolve(this.privMicrophoneLabel);const deferred=new common_Promise.BH;return navigator.mediaDevices.enumerateDevices().then((devices=>{for(const device of devices)if(device.deviceId===microphoneDeviceId){this.privMicrophoneLabel=device.label;break}deferred.resolve(this.privMicrophoneLabel)}),(()=>deferred.resolve(this.privMicrophoneLabel))),deferred.promise}destroyAudioContext(){return __awaiter(this,void 0,void 0,(function*(){if(!this.privContext)return;this.privRecorder.releaseMediaResources(this.privContext);let hasClose=!1;"close"in this.privContext&&(hasClose=!0),hasClose?this.privIsClosing||(this.privIsClosing=!0,yield this.privContext.close(),this.privContext=null,this.privIsClosing=!1):null!==this.privContext&&"running"===this.privContext.state&&(yield this.privContext.suspend())}))}}MicAudioSource.AUDIOFORMAT=AudioStreamFormat.HT.getDefaultInputFormat();var FileAudioSource_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class FileAudioSource{constructor(file,filename,audioSourceId){this.privStreams={},this.privHeaderEnd=44,this.turnOn=()=>{if(this.privFilename.lastIndexOf(".wav")!==this.privFilename.length-4){const errorMsg=this.privFilename+" is not supported. Only WAVE files are allowed at the moment.";return this.onEvent(new AudioSourceEvents.n0(errorMsg,"")),Promise.reject(errorMsg)}this.onEvent(new AudioSourceEvents.QZ(this.privId)),this.onEvent(new AudioSourceEvents.Jl(this.privId))},this.id=()=>this.privId,this.attach=audioNodeId=>FileAudioSource_awaiter(this,void 0,void 0,(function*(){this.onEvent(new AudioSourceEvents.i5(this.privId,audioNodeId));const stream=yield this.upload(audioNodeId);return this.onEvent(new AudioSourceEvents.sQ(this.privId,audioNodeId)),Promise.resolve({detach:()=>FileAudioSource_awaiter(this,void 0,void 0,(function*(){stream.readEnded(),delete this.privStreams[audioNodeId],this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)),yield this.turnOff()})),id:()=>audioNodeId,read:()=>stream.read()})})),this.detach=audioNodeId=>{audioNodeId&&this.privStreams[audioNodeId]&&(this.privStreams[audioNodeId].close(),delete this.privStreams[audioNodeId],this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)))},this.turnOff=()=>{for(const streamId in this.privStreams)if(streamId){const stream=this.privStreams[streamId];stream&&!stream.isClosed&&stream.close()}return this.onEvent(new AudioSourceEvents.ls(this.privId)),Promise.resolve()},this.onEvent=event=>{this.privEvents.onEvent(event),Events.z.instance.onEvent(event)},this.privId=audioSourceId||(0,Guid.Q)(),this.privEvents=new EventSource.n,this.privSource=file,"undefined"!=typeof window&&"undefined"!=typeof Blob&&this.privSource instanceof Blob?this.privFilename=file.name:this.privFilename=filename||"unknown.wav",this.privAudioFormatPromise=this.readHeader()}get format(){return this.privAudioFormatPromise}get blob(){return Promise.resolve(this.privSource)}get events(){return this.privEvents}get deviceInfo(){return this.privAudioFormatPromise.then((result=>Promise.resolve({bitspersample:result.bitsPerSample,channelcount:result.channels,connectivity:RecognizerConfig.wF.Unknown,manufacturer:"Speech SDK",model:"File",samplerate:result.samplesPerSec,type:RecognizerConfig.dt.File})))}readHeader(){const header=this.privSource.slice(0,512),headerResult=new common_Promise.BH,processHeader=header=>{const view=new DataView(header),getWord=index=>String.fromCharCode(view.getUint8(index),view.getUint8(index+1),view.getUint8(index+2),view.getUint8(index+3));if("RIFF"!==getWord(0))return void headerResult.reject("Invalid WAV header in file, RIFF was not found");if("WAVE"!==getWord(8)||"fmt "!==getWord(12))return void headerResult.reject("Invalid WAV header in file, WAVEfmt was not found");const formatSize=view.getInt32(16,!0),channelCount=view.getUint16(22,!0),sampleRate=view.getUint32(24,!0),bitsPerSample=view.getUint16(34,!0);let pos=36+Math.max(formatSize-16,0);for(;"data"!==getWord(pos);pos+=2)if(pos>504)return void headerResult.reject("Invalid WAV header in file, data block was not found");this.privHeaderEnd=pos+8,headerResult.resolve(AudioStreamFormat.HT.getWaveFormatPCM(sampleRate,bitsPerSample,channelCount))};if("undefined"!=typeof window&&"undefined"!=typeof Blob&&header instanceof Blob){const reader=new FileReader;reader.onload=event=>{const header=event.target.result;processHeader(header)},reader.readAsArrayBuffer(header)}else{const h=header;processHeader(h.buffer.slice(h.byteOffset,h.byteOffset+h.byteLength))}return headerResult.promise}upload(audioNodeId){return FileAudioSource_awaiter(this,void 0,void 0,(function*(){const onerror=error=>{const errorMsg=`Error occurred while processing '${this.privFilename}'. ${error}`;throw this.onEvent(new AudioSourceEvents.hA(this.privId,audioNodeId,errorMsg)),new Error(errorMsg)};try{yield this.turnOn();const format=yield this.privAudioFormatPromise,stream=new ChunkedArrayBufferStream(format.avgBytesPerSec/10,audioNodeId);this.privStreams[audioNodeId]=stream;const chunk=this.privSource.slice(this.privHeaderEnd),processFile=buff=>{stream.isClosed||(stream.writeStreamChunk({buffer:buff,isEnd:!1,timeReceived:Date.now()}),stream.close())};if("undefined"!=typeof window&&"undefined"!=typeof Blob&&chunk instanceof Blob){const reader=new FileReader;reader.onerror=ev=>{onerror(ev.toString())},reader.onload=event=>{const fileBuffer=event.target.result;processFile(fileBuffer)},reader.readAsArrayBuffer(chunk)}else{const c=chunk;processFile(c.buffer.slice(c.byteOffset,c.byteOffset+c.byteLength))}return stream}catch(e){onerror(e)}}))}}var Contracts=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");class PullAudioInputStreamCallback{}var AudioInputStream_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class AudioInputStream{constructor(){}static createPushStream(format){return PushAudioInputStream.create(format)}static createPullStream(callback,format){return PullAudioInputStream.create(callback,format)}}class PushAudioInputStream extends AudioInputStream{static create(format){return new PushAudioInputStreamImpl(format)}}class PushAudioInputStreamImpl extends PushAudioInputStream{constructor(format){super(),this.onEvent=event=>{this.privEvents.onEvent(event),Events.z.instance.onEvent(event)},this.privFormat=void 0===format?AudioStreamFormat.Bm.getDefaultInputFormat():format,this.privEvents=new EventSource.n,this.privId=(0,Guid.Q)(),this.privStream=new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec/10)}get format(){return Promise.resolve(this.privFormat)}write(dataBuffer){this.privStream.writeStreamChunk({buffer:dataBuffer,isEnd:!1,timeReceived:Date.now()})}close(){this.privStream.close()}id(){return this.privId}get blob(){return this.attach("id").then((audioNode=>{const data=[];let bufferData=Buffer.from("");const readCycle=()=>audioNode.read().then((audioStreamChunk=>!audioStreamChunk||audioStreamChunk.isEnd?"undefined"!=typeof XMLHttpRequest&&"undefined"!=typeof Blob?Promise.resolve(new Blob(data)):Promise.resolve(Buffer.from(bufferData)):("undefined"!=typeof Blob?data.push(audioStreamChunk.buffer):bufferData=Buffer.concat([bufferData,this.toBuffer(audioStreamChunk.buffer)]),readCycle())));return readCycle()}))}turnOn(){this.onEvent(new AudioSourceEvents.QZ(this.privId)),this.onEvent(new AudioSourceEvents.Jl(this.privId))}attach(audioNodeId){return AudioInputStream_awaiter(this,void 0,void 0,(function*(){this.onEvent(new AudioSourceEvents.i5(this.privId,audioNodeId)),yield this.turnOn();const stream=this.privStream;return this.onEvent(new AudioSourceEvents.sQ(this.privId,audioNodeId)),{detach:()=>AudioInputStream_awaiter(this,void 0,void 0,(function*(){return this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)),this.turnOff()})),id:()=>audioNodeId,read:()=>stream.read()}}))}detach(audioNodeId){this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId))}turnOff(){}get events(){return this.privEvents}get deviceInfo(){return Promise.resolve({bitspersample:this.privFormat.bitsPerSample,channelcount:this.privFormat.channels,connectivity:RecognizerConfig.wF.Unknown,manufacturer:"Speech SDK",model:"PushStream",samplerate:this.privFormat.samplesPerSec,type:RecognizerConfig.dt.Stream})}toBuffer(arrayBuffer){const buf=Buffer.alloc(arrayBuffer.byteLength),view=new Uint8Array(arrayBuffer);for(let i=0;i<buf.length;++i)buf[i]=view[i];return buf}}class PullAudioInputStream extends AudioInputStream{constructor(){super()}static create(callback,format){return new PullAudioInputStreamImpl(callback,format)}}class PullAudioInputStreamImpl extends PullAudioInputStream{constructor(callback,format){super(),this.onEvent=event=>{this.privEvents.onEvent(event),Events.z.instance.onEvent(event)},this.privFormat=void 0===format?AudioStreamFormat.HT.getDefaultInputFormat():format,this.privEvents=new EventSource.n,this.privId=(0,Guid.Q)(),this.privCallback=callback,this.privIsClosed=!1,this.privBufferSize=this.privFormat.avgBytesPerSec/10}get format(){return Promise.resolve(this.privFormat)}close(){this.privIsClosed=!0,this.privCallback.close()}id(){return this.privId}get blob(){return Promise.reject("Not implemented")}turnOn(){this.onEvent(new AudioSourceEvents.QZ(this.privId)),this.onEvent(new AudioSourceEvents.Jl(this.privId))}attach(audioNodeId){return AudioInputStream_awaiter(this,void 0,void 0,(function*(){return this.onEvent(new AudioSourceEvents.i5(this.privId,audioNodeId)),yield this.turnOn(),this.onEvent(new AudioSourceEvents.sQ(this.privId,audioNodeId)),{detach:()=>(this.privCallback.close(),this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId)),this.turnOff()),id:()=>audioNodeId,read:()=>{let transmitBuff,totalBytes=0;for(;totalBytes<this.privBufferSize;){const readBuff=new ArrayBuffer(this.privBufferSize-totalBytes),pulledBytes=this.privCallback.read(readBuff);if(void 0===transmitBuff)transmitBuff=readBuff;else{new Int8Array(transmitBuff).set(new Int8Array(readBuff),totalBytes)}if(0===pulledBytes)break;totalBytes+=pulledBytes}return Promise.resolve({buffer:transmitBuff.slice(0,totalBytes),isEnd:this.privIsClosed||0===totalBytes,timeReceived:Date.now()})}}}))}detach(audioNodeId){this.onEvent(new AudioSourceEvents.He(this.privId,audioNodeId))}turnOff(){}get events(){return this.privEvents}get deviceInfo(){return Promise.resolve({bitspersample:this.privFormat.bitsPerSample,channelcount:this.privFormat.channels,connectivity:RecognizerConfig.wF.Unknown,manufacturer:"Speech SDK",model:"PullStream",samplerate:this.privFormat.samplesPerSec,type:RecognizerConfig.dt.Stream})}}var SpeakerAudioDestination=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js"),PushAudioOutputStreamCallback=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js"),AudioOutputStream=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js"),AudioFileWriter=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js");class AudioConfig{static fromDefaultMicrophoneInput(){const pcmRecorder=new PcmRecorder(!0);return new AudioConfigImpl(new MicAudioSource(pcmRecorder))}static fromMicrophoneInput(deviceId){const pcmRecorder=new PcmRecorder(!0);return new AudioConfigImpl(new MicAudioSource(pcmRecorder,deviceId))}static fromWavFileInput(file,name="unnamedBuffer.wav"){return new AudioConfigImpl(new FileAudioSource(file,name))}static fromStreamInput(audioStream){if(audioStream instanceof PullAudioInputStreamCallback)return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream));if(audioStream instanceof AudioInputStream)return new AudioConfigImpl(audioStream);if("undefined"!=typeof MediaStream&&audioStream instanceof MediaStream){const pcmRecorder=new PcmRecorder(!1);return new AudioConfigImpl(new MicAudioSource(pcmRecorder,null,null,audioStream))}throw new Error("Not Supported Type")}static fromDefaultSpeakerOutput(){return new AudioOutputConfigImpl(new SpeakerAudioDestination.K)}static fromSpeakerOutput(player){if(void 0===player)return AudioConfig.fromDefaultSpeakerOutput();if(player instanceof SpeakerAudioDestination.K)return new AudioOutputConfigImpl(player);throw new Error("Not Supported Type")}static fromAudioFileOutput(filename){return new AudioOutputConfigImpl(new AudioFileWriter.O(filename))}static fromStreamOutput(audioStream){if(audioStream instanceof PushAudioOutputStreamCallback.y)return new AudioOutputConfigImpl(new AudioOutputStream.KS(audioStream));if(audioStream instanceof AudioOutputStream.XO)return new AudioOutputConfigImpl(audioStream);if(audioStream instanceof AudioOutputStream.Ao)return new AudioOutputConfigImpl(audioStream);throw new Error("Not Supported Type")}}class AudioConfigImpl extends AudioConfig{constructor(source){super(),this.privSource=source}get format(){return this.privSource.format}close(cb,err){this.privSource.turnOff().then((()=>{cb&&cb()}),(error=>{err&&err(error)}))}id(){return this.privSource.id()}get blob(){return this.privSource.blob}turnOn(){return this.privSource.turnOn()}attach(audioNodeId){return this.privSource.attach(audioNodeId)}detach(audioNodeId){return this.privSource.detach(audioNodeId)}turnOff(){return this.privSource.turnOff()}get events(){return this.privSource.events}setProperty(name,value){if(Contracts.a.throwIfNull(value,"value"),void 0===this.privSource.setProperty)throw new Error("This AudioConfig instance does not support setting properties.");this.privSource.setProperty(name,value)}getProperty(name,def){if(void 0!==this.privSource.getProperty)return this.privSource.getProperty(name,def);throw new Error("This AudioConfig instance does not support getting properties.")}get deviceInfo(){return this.privSource.deviceInfo}}class AudioOutputConfigImpl extends AudioConfig{constructor(destination){super(),this.privDestination=destination}set format(format){this.privDestination.format=format}write(buffer){this.privDestination.write(buffer)}close(){this.privDestination.close()}id(){return this.privDestination.id()}setProperty(name,value){throw new Error("This AudioConfig instance does not support setting properties.")}getProperty(name,def){throw new Error("This AudioConfig instance does not support getting properties.")}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{O:()=>AudioFileWriter});var fs__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("?9463"),_Contracts__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js");class AudioFileWriter{constructor(filename){this.id=()=>this.privId,_Contracts__WEBPACK_IMPORTED_MODULE_1__.a.throwIfNullOrUndefined(fs__WEBPACK_IMPORTED_MODULE_0__.openSync,"\nFile System access not available, please use Push or PullAudioOutputStream"),this.privFd=fs__WEBPACK_IMPORTED_MODULE_0__.openSync(filename,"w")}set format(format){_Contracts__WEBPACK_IMPORTED_MODULE_1__.a.throwIfNotUndefined(this.privAudioFormat,"format is already set"),this.privAudioFormat=format;let headerOffset=0;this.privAudioFormat.hasHeader&&(headerOffset=this.privAudioFormat.header.byteLength),void 0!==this.privFd&&(this.privWriteStream=fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream("",{fd:this.privFd,start:headerOffset,autoClose:!1}))}write(buffer){_Contracts__WEBPACK_IMPORTED_MODULE_1__.a.throwIfNullOrUndefined(this.privAudioFormat,"must set format before writing."),void 0!==this.privWriteStream&&this.privWriteStream.write(new Uint8Array(buffer.slice(0)))}close(){void 0!==this.privFd&&(this.privWriteStream.on("finish",(()=>{this.privAudioFormat.hasHeader&&(this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten),fs__WEBPACK_IMPORTED_MODULE_0__.writeSync(this.privFd,new Int8Array(this.privAudioFormat.header),0,this.privAudioFormat.header.byteLength,0)),fs__WEBPACK_IMPORTED_MODULE_0__.closeSync(this.privFd),this.privFd=void 0})),this.privWriteStream.end())}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{d:()=>AudioOutputFormatImpl});var _SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js"),_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js");class AudioOutputFormatImpl extends _AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.Bm{constructor(formatTag,channels,samplesPerSec,avgBytesPerSec,blockAlign,bitsPerSample,audioFormatString,requestAudioFormatString,hasHeader){super(samplesPerSec,bitsPerSample,channels,formatTag),this.formatTag=formatTag,this.avgBytesPerSec=avgBytesPerSec,this.blockAlign=blockAlign,this.priAudioFormatString=audioFormatString,this.priRequestAudioFormatString=requestAudioFormatString,this.priHasHeader=hasHeader}static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat){return void 0===speechSynthesisOutputFormat?AudioOutputFormatImpl.getDefaultOutputFormat():AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat])}static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString){switch(speechSynthesisOutputFormatString){case"raw-8khz-8bit-mono-mulaw":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MuLaw,1,8e3,8e3,1,8,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"riff-16khz-16kbps-mono-siren":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.Siren,1,16e3,2e3,40,0,speechSynthesisOutputFormatString,"audio-16khz-16kbps-mono-siren",!0);case"audio-16khz-16kbps-mono-siren":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.Siren,1,16e3,2e3,40,0,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-16khz-32kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,16e3,4096,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-16khz-128kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,16e3,16384,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-16khz-64kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,16e3,8192,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-48kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,24e3,6144,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-96kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,24e3,12288,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-160kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,24e3,20480,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"raw-16khz-16bit-mono-truesilk":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.SILKSkype,1,16e3,32e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"riff-8khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,8e3,16e3,2,16,speechSynthesisOutputFormatString,"raw-8khz-16bit-mono-pcm",!0);case"riff-24khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,24e3,48e3,2,16,speechSynthesisOutputFormatString,"raw-24khz-16bit-mono-pcm",!0);case"riff-8khz-8bit-mono-mulaw":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MuLaw,1,8e3,8e3,1,8,speechSynthesisOutputFormatString,"raw-8khz-8bit-mono-mulaw",!0);case"raw-16khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,16e3,32e3,2,16,speechSynthesisOutputFormatString,"raw-16khz-16bit-mono-pcm",!1);case"raw-24khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,24e3,48e3,2,16,speechSynthesisOutputFormatString,"raw-24khz-16bit-mono-pcm",!1);case"raw-8khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,8e3,16e3,2,16,speechSynthesisOutputFormatString,"raw-8khz-16bit-mono-pcm",!1);case"ogg-16khz-16bit-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OGG_OPUS,1,16e3,8192,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"ogg-24khz-16bit-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OGG_OPUS,1,24e3,8192,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"raw-48khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,48e3,96e3,2,16,speechSynthesisOutputFormatString,"raw-48khz-16bit-mono-pcm",!1);case"riff-48khz-16bit-mono-pcm":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,48e3,96e3,2,16,speechSynthesisOutputFormatString,"raw-48khz-16bit-mono-pcm",!0);case"audio-48khz-96kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,48e3,12288,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-48khz-192kbitrate-mono-mp3":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3,1,48e3,24576,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"ogg-48khz-16bit-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OGG_OPUS,1,48e3,12e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"webm-16khz-16bit-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.WEBM_OPUS,1,16e3,4e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"webm-24khz-16bit-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.WEBM_OPUS,1,24e3,6e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"webm-24khz-16bit-24kbps-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.WEBM_OPUS,1,24e3,3e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-16khz-16bit-32kbps-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OPUS,1,16e3,4e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-16bit-48kbps-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OPUS,1,24e3,6e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-16bit-24kbps-mono-opus":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OPUS,1,24e3,3e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-24khz-16bit-mono-flac":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.FLAC,1,24e3,24e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"audio-48khz-16bit-mono-flac":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.FLAC,1,48e3,3e4,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"raw-24khz-16bit-mono-truesilk":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.SILKSkype,1,24e3,48e3,2,16,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"raw-8khz-8bit-mono-alaw":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.ALaw,1,8e3,8e3,1,8,speechSynthesisOutputFormatString,speechSynthesisOutputFormatString,!1);case"riff-8khz-8bit-mono-alaw":return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.ALaw,1,8e3,8e3,1,8,speechSynthesisOutputFormatString,"raw-8khz-8bit-mono-alaw",!0);default:return new AudioOutputFormatImpl(_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM,1,16e3,32e3,2,16,"riff-16khz-16bit-mono-pcm","raw-16khz-16bit-mono-pcm",!0)}}static getDefaultOutputFormat(){return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString("undefined"!=typeof window?"audio-24khz-48kbitrate-mono-mp3":"riff-16khz-16bit-mono-pcm")}get hasHeader(){return this.priHasHeader}get header(){if(this.hasHeader)return this.privHeader}updateHeader(audioLength){if(this.priHasHeader){new DataView(this.privHeader).setUint32(40,audioLength,!0)}}get requestAudioFormatString(){return this.priRequestAudioFormatString}}AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString={[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw8Khz8BitMonoMULaw]:"raw-8khz-8bit-mono-mulaw",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff16Khz16KbpsMonoSiren]:"riff-16khz-16kbps-mono-siren",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio16Khz16KbpsMonoSiren]:"audio-16khz-16kbps-mono-siren",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio16Khz32KBitRateMonoMp3]:"audio-16khz-32kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio16Khz128KBitRateMonoMp3]:"audio-16khz-128kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio16Khz64KBitRateMonoMp3]:"audio-16khz-64kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio24Khz48KBitRateMonoMp3]:"audio-24khz-48kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio24Khz96KBitRateMonoMp3]:"audio-24khz-96kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio24Khz160KBitRateMonoMp3]:"audio-24khz-160kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw16Khz16BitMonoTrueSilk]:"raw-16khz-16bit-mono-truesilk",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff16Khz16BitMonoPcm]:"riff-16khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff8Khz16BitMonoPcm]:"riff-8khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff24Khz16BitMonoPcm]:"riff-24khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff8Khz8BitMonoMULaw]:"riff-8khz-8bit-mono-mulaw",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw16Khz16BitMonoPcm]:"raw-16khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw24Khz16BitMonoPcm]:"raw-24khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw8Khz16BitMonoPcm]:"raw-8khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Ogg16Khz16BitMonoOpus]:"ogg-16khz-16bit-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Ogg24Khz16BitMonoOpus]:"ogg-24khz-16bit-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw48Khz16BitMonoPcm]:"raw-48khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff48Khz16BitMonoPcm]:"riff-48khz-16bit-mono-pcm",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio48Khz96KBitRateMonoMp3]:"audio-48khz-96kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio48Khz192KBitRateMonoMp3]:"audio-48khz-192kbitrate-mono-mp3",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Ogg48Khz16BitMonoOpus]:"ogg-48khz-16bit-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Webm16Khz16BitMonoOpus]:"webm-16khz-16bit-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Webm24Khz16BitMonoOpus]:"webm-24khz-16bit-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Webm24Khz16Bit24KbpsMonoOpus]:"webm-24khz-16bit-24kbps-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw24Khz16BitMonoTrueSilk]:"raw-24khz-16bit-mono-truesilk",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Raw8Khz8BitMonoALaw]:"raw-8khz-8bit-mono-alaw",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Riff8Khz8BitMonoALaw]:"riff-8khz-8bit-mono-alaw",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio16Khz16Bit32KbpsMonoOpus]:"audio-16khz-16bit-32kbps-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio24Khz16Bit48KbpsMonoOpus]:"audio-24khz-16bit-48kbps-mono-opus",[_SpeechSynthesisOutputFormat__WEBPACK_IMPORTED_MODULE_1__.Y.Audio24Khz16Bit24KbpsMonoOpus]:"audio-24khz-16bit-24kbps-mono-opus"}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Ao:()=>PullAudioOutputStream,KS:()=>PushAudioOutputStreamImpl,NO:()=>PullAudioOutputStreamImpl,XO:()=>PushAudioOutputStream});var _common_Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Stream.js"),_Contracts__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js"),_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class AudioOutputStream{constructor(){}static createPullStream(){return PullAudioOutputStream.create()}}class PullAudioOutputStream extends AudioOutputStream{static create(){return new PullAudioOutputStreamImpl}}class PullAudioOutputStreamImpl extends PullAudioOutputStream{constructor(){super(),this.privId=(0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.Q)(),this.privStream=new _common_Exports__WEBPACK_IMPORTED_MODULE_1__.F}set format(format){null==format&&(this.privFormat=_AudioOutputFormat__WEBPACK_IMPORTED_MODULE_2__.d.getDefaultOutputFormat()),this.privFormat=format}get format(){return this.privFormat}get isClosed(){return this.privStream.isClosed}id(){return this.privId}read(dataBuffer){return __awaiter(this,void 0,void 0,(function*(){const intView=new Int8Array(dataBuffer);let totalBytes=0;if(void 0!==this.privLastChunkView){if(this.privLastChunkView.length>dataBuffer.byteLength)return intView.set(this.privLastChunkView.slice(0,dataBuffer.byteLength)),this.privLastChunkView=this.privLastChunkView.slice(dataBuffer.byteLength),Promise.resolve(dataBuffer.byteLength);intView.set(this.privLastChunkView),totalBytes=this.privLastChunkView.length,this.privLastChunkView=void 0}for(;totalBytes<dataBuffer.byteLength&&!this.privStream.isReadEnded;){const chunk=yield this.privStream.read();if(void 0===chunk||chunk.isEnd)yield this.privStream.readEnded();else{let tmpBuffer;chunk.buffer.byteLength>dataBuffer.byteLength-totalBytes?(tmpBuffer=chunk.buffer.slice(0,dataBuffer.byteLength-totalBytes),this.privLastChunkView=new Int8Array(chunk.buffer.slice(dataBuffer.byteLength-totalBytes))):tmpBuffer=chunk.buffer,intView.set(new Int8Array(tmpBuffer),totalBytes),totalBytes+=tmpBuffer.byteLength}}return totalBytes}))}write(dataBuffer){_Contracts__WEBPACK_IMPORTED_MODULE_3__.a.throwIfNullOrUndefined(this.privStream,"must set format before writing"),this.privStream.writeStreamChunk({buffer:dataBuffer,isEnd:!1,timeReceived:Date.now()})}close(){this.privStream.close()}}class PushAudioOutputStream extends AudioOutputStream{constructor(){super()}static create(callback){return new PushAudioOutputStreamImpl(callback)}}class PushAudioOutputStreamImpl extends PushAudioOutputStream{constructor(callback){super(),this.privId=(0,_common_Exports__WEBPACK_IMPORTED_MODULE_0__.Q)(),this.privCallback=callback}set format(format){}write(buffer){this.privCallback.write&&this.privCallback.write(buffer)}close(){this.privCallback.close&&this.privCallback.close()}id(){return this.privId}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var AudioFormatTag;__webpack_require__.d(__webpack_exports__,{Bm:()=>AudioStreamFormatImpl,HT:()=>AudioStreamFormat,WY:()=>AudioFormatTag}),function(AudioFormatTag){AudioFormatTag[AudioFormatTag.PCM=1]="PCM",AudioFormatTag[AudioFormatTag.MuLaw=2]="MuLaw",AudioFormatTag[AudioFormatTag.Siren=3]="Siren",AudioFormatTag[AudioFormatTag.MP3=4]="MP3",AudioFormatTag[AudioFormatTag.SILKSkype=5]="SILKSkype",AudioFormatTag[AudioFormatTag.OGG_OPUS=6]="OGG_OPUS",AudioFormatTag[AudioFormatTag.WEBM_OPUS=7]="WEBM_OPUS",AudioFormatTag[AudioFormatTag.ALaw=8]="ALaw",AudioFormatTag[AudioFormatTag.FLAC=9]="FLAC",AudioFormatTag[AudioFormatTag.OPUS=10]="OPUS"}(AudioFormatTag||(AudioFormatTag={}));class AudioStreamFormat{static getDefaultInputFormat(){return AudioStreamFormatImpl.getDefaultInputFormat()}static getWaveFormat(samplesPerSecond,bitsPerSample,channels,format){return new AudioStreamFormatImpl(samplesPerSecond,bitsPerSample,channels,format)}static getWaveFormatPCM(samplesPerSecond,bitsPerSample,channels){return new AudioStreamFormatImpl(samplesPerSecond,bitsPerSample,channels)}}class AudioStreamFormatImpl extends AudioStreamFormat{constructor(samplesPerSec=16e3,bitsPerSample=16,channels=1,format=AudioFormatTag.PCM){super(),this.setString=(view,offset,str)=>{for(let i=0;i<str.length;i++)view.setUint8(offset+i,str.charCodeAt(i))};let isWavFormat=!0;switch(format){case AudioFormatTag.PCM:this.formatTag=1;break;case AudioFormatTag.ALaw:this.formatTag=6;break;case AudioFormatTag.MuLaw:this.formatTag=7;break;default:isWavFormat=!1}if(this.bitsPerSample=bitsPerSample,this.samplesPerSec=samplesPerSec,this.channels=channels,this.avgBytesPerSec=this.samplesPerSec*this.channels*(this.bitsPerSample/8),this.blockAlign=this.channels*Math.max(this.bitsPerSample,8),isWavFormat){this.privHeader=new ArrayBuffer(44);const view=new DataView(this.privHeader);this.setString(view,0,"RIFF"),view.setUint32(4,0,!0),this.setString(view,8,"WAVEfmt "),view.setUint32(16,16,!0),view.setUint16(20,this.formatTag,!0),view.setUint16(22,this.channels,!0),view.setUint32(24,this.samplesPerSec,!0),view.setUint32(28,this.avgBytesPerSec,!0),view.setUint16(32,this.channels*(this.bitsPerSample/8),!0),view.setUint16(34,this.bitsPerSample,!0),this.setString(view,36,"data"),view.setUint32(40,0,!0)}}static getDefaultInputFormat(){return new AudioStreamFormatImpl}static getAudioContext(sampleRate){const AudioContext=window.AudioContext||window.webkitAudioContext||!1;if(AudioContext)return void 0!==sampleRate&&navigator.mediaDevices.getSupportedConstraints().sampleRate?new AudioContext({sampleRate}):new AudioContext;throw new Error("Browser does not support Web Audio API (AudioContext is not available).")}close(){}get header(){return this.privHeader}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{y:()=>PushAudioOutputStreamCallback});class PushAudioOutputStreamCallback{}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/SpeakerAudioDestination.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K:()=>SpeakerAudioDestination});var _common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js"),_common_Exports__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/BackgroundError.js"),_AudioOutputStream__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js"),_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioStreamFormat.js"),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};const AudioFormatToMimeType={[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM]:"audio/wav",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MuLaw]:"audio/x-wav",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MP3]:"audio/mpeg",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.OGG_OPUS]:"audio/ogg",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.WEBM_OPUS]:"audio/webm; codecs=opus",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.ALaw]:"audio/x-wav",[_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.FLAC]:"audio/flac"};class SpeakerAudioDestination{constructor(audioDestinationId){this.privPlaybackStarted=!1,this.privAppendingToBuffer=!1,this.privMediaSourceOpened=!1,this.privBytesReceived=0,this.privId=audioDestinationId||(0,_common_Exports__WEBPACK_IMPORTED_MODULE_1__.Q)(),this.privIsPaused=!1,this.privIsClosed=!1}id(){return this.privId}write(buffer,cb,err){void 0!==this.privAudioBuffer?(this.privAudioBuffer.push(buffer),this.updateSourceBuffer().then((()=>{cb&&cb()}),(error=>{err&&err(error)}))):void 0!==this.privAudioOutputStream&&(this.privAudioOutputStream.write(buffer),this.privBytesReceived+=buffer.byteLength)}close(cb,err){if(this.privIsClosed=!0,void 0!==this.privSourceBuffer)this.handleSourceBufferUpdateEnd().then((()=>{cb&&cb()}),(error=>{err&&err(error)}));else if(void 0!==this.privAudioOutputStream)if(this.privFormat.formatTag!==_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.PCM&&this.privFormat.formatTag!==_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.MuLaw&&this.privFormat.formatTag!==_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY.ALaw||!1!==this.privFormat.hasHeader){let receivedAudio=new ArrayBuffer(this.privBytesReceived);this.privAudioOutputStream.read(receivedAudio).then((_=>{receivedAudio=_common_speech_Exports__WEBPACK_IMPORTED_MODULE_2__.E.addHeader(receivedAudio,this.privFormat);const audioBlob=new Blob([receivedAudio],{type:AudioFormatToMimeType[this.privFormat.formatTag]});this.privAudio.src=window.URL.createObjectURL(audioBlob),this.notifyPlayback().then((()=>{cb&&cb()}),(error=>{err&&err(error)}))}),(error=>{err&&err(error)}))}else console.warn("Play back is not supported for raw PCM, mulaw or alaw format without header."),this.onAudioEnd&&this.onAudioEnd(this);else this.onAudioEnd&&this.onAudioEnd(this)}set format(format){if("undefined"!=typeof AudioContext||void 0!==window.webkitAudioContext){this.privFormat=format;const mimeType=AudioFormatToMimeType[this.privFormat.formatTag];void 0===mimeType?console.warn(`Unknown mimeType for format ${_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY[this.privFormat.formatTag]}; playback is not supported.`):"undefined"!=typeof MediaSource&&MediaSource.isTypeSupported(mimeType)?(this.privAudio=new Audio,this.privAudioBuffer=[],this.privMediaSource=new MediaSource,this.privAudio.src=URL.createObjectURL(this.privMediaSource),this.privAudio.load(),this.privMediaSource.onsourceopen=event=>{this.privMediaSourceOpened=!0,this.privMediaSource.duration=1800,this.privSourceBuffer=this.privMediaSource.addSourceBuffer(mimeType),this.privSourceBuffer.onupdate=_=>{this.updateSourceBuffer().catch((reason=>{_common_Exports__WEBPACK_IMPORTED_MODULE_3__.z.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.u(reason))}))},this.privSourceBuffer.onupdateend=_=>{this.handleSourceBufferUpdateEnd().catch((reason=>{_common_Exports__WEBPACK_IMPORTED_MODULE_3__.z.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.u(reason))}))},this.privSourceBuffer.onupdatestart=_=>{this.privAppendingToBuffer=!1}},this.updateSourceBuffer().catch((reason=>{_common_Exports__WEBPACK_IMPORTED_MODULE_3__.z.instance.onEvent(new _common_Exports__WEBPACK_IMPORTED_MODULE_4__.u(reason))}))):(console.warn(`Format ${_AudioStreamFormat__WEBPACK_IMPORTED_MODULE_0__.WY[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`),this.privAudioOutputStream=new _AudioOutputStream__WEBPACK_IMPORTED_MODULE_5__.NO,this.privAudioOutputStream.format=this.privFormat,this.privAudio=new Audio)}}get volume(){return this.privAudio.volume}set volume(volume){this.privAudio.volume=volume}mute(){this.privAudio.muted=!0}unmute(){this.privAudio.muted=!1}get isClosed(){return this.privIsClosed}get currentTime(){return void 0!==this.privAudio?this.privAudio.currentTime:-1}pause(){this.privIsPaused||void 0===this.privAudio||(this.privAudio.pause(),this.privIsPaused=!0)}resume(cb,err){this.privIsPaused&&void 0!==this.privAudio&&(this.privAudio.play().then((()=>{cb&&cb()}),(error=>{err&&err(error)})),this.privIsPaused=!1)}get internalAudio(){return this.privAudio}updateSourceBuffer(){return __awaiter(this,void 0,void 0,(function*(){if(void 0!==this.privAudioBuffer&&this.privAudioBuffer.length>0&&this.sourceBufferAvailable()){this.privAppendingToBuffer=!0;const binary=this.privAudioBuffer.shift();try{this.privSourceBuffer.appendBuffer(binary)}catch(error){return this.privAudioBuffer.unshift(binary),void console.log("buffer filled, pausing addition of binaries until space is made")}yield this.notifyPlayback()}else this.canEndStream()&&(yield this.handleSourceBufferUpdateEnd())}))}handleSourceBufferUpdateEnd(){return __awaiter(this,void 0,void 0,(function*(){this.canEndStream()&&this.sourceBufferAvailable()&&(this.privMediaSource.endOfStream(),yield this.notifyPlayback())}))}notifyPlayback(){return __awaiter(this,void 0,void 0,(function*(){this.privPlaybackStarted||void 0===this.privAudio||(this.privPlaybackStarted=!0,this.onAudioStart&&this.onAudioStart(this),this.privAudio.onended=()=>{this.onAudioEnd&&this.onAudioEnd(this)},this.privIsPaused||(yield this.privAudio.play()))}))}canEndStream(){return this.isClosed&&void 0!==this.privSourceBuffer&&0===this.privAudioBuffer.length&&this.privMediaSourceOpened&&!this.privAppendingToBuffer&&"open"===this.privMediaSource.readyState}sourceBufferAvailable(){return void 0!==this.privSourceBuffer&&!this.privSourceBuffer.updating}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var CancellationErrorCode;__webpack_require__.d(__webpack_exports__,{E:()=>CancellationErrorCode}),function(CancellationErrorCode){CancellationErrorCode[CancellationErrorCode.NoError=0]="NoError",CancellationErrorCode[CancellationErrorCode.AuthenticationFailure=1]="AuthenticationFailure",CancellationErrorCode[CancellationErrorCode.BadRequestParameters=2]="BadRequestParameters",CancellationErrorCode[CancellationErrorCode.TooManyRequests=3]="TooManyRequests",CancellationErrorCode[CancellationErrorCode.ConnectionFailure=4]="ConnectionFailure",CancellationErrorCode[CancellationErrorCode.ServiceTimeout=5]="ServiceTimeout",CancellationErrorCode[CancellationErrorCode.ServiceError=6]="ServiceError",CancellationErrorCode[CancellationErrorCode.RuntimeError=7]="RuntimeError",CancellationErrorCode[CancellationErrorCode.Forbidden=8]="Forbidden"}(CancellationErrorCode||(CancellationErrorCode={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var CancellationReason;__webpack_require__.d(__webpack_exports__,{_:()=>CancellationReason}),function(CancellationReason){CancellationReason[CancellationReason.Error=0]="Error",CancellationReason[CancellationReason.EndOfStream=1]="EndOfStream"}(CancellationReason||(CancellationReason={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{a:()=>Contracts});class Contracts{static throwIfNullOrUndefined(param,name){if(null==param)throw new Error("throwIfNullOrUndefined:"+name)}static throwIfNull(param,name){if(null===param)throw new Error("throwIfNull:"+name)}static throwIfNullOrWhitespace(param,name){if(Contracts.throwIfNullOrUndefined(param,name),(""+param).trim().length<1)throw new Error("throwIfNullOrWhitespace:"+name)}static throwIfDisposed(isDisposed){if(isDisposed)throw new Error("the object is already disposed")}static throwIfArrayEmptyOrWhitespace(array,name){if(Contracts.throwIfNullOrUndefined(array,name),0===array.length)throw new Error("throwIfArrayEmptyOrWhitespace:"+name);for(const item of array)Contracts.throwIfNullOrWhitespace(item,name)}static throwIfFileDoesNotExist(param,name){Contracts.throwIfNullOrWhitespace(param,name)}static throwIfNotUndefined(param,name){if(void 0!==param)throw new Error("throwIfNotUndefined:"+name)}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var OutputFormat;__webpack_require__.d(__webpack_exports__,{W:()=>OutputFormat}),function(OutputFormat){OutputFormat[OutputFormat.Simple=0]="Simple",OutputFormat[OutputFormat.Detailed=1]="Detailed"}(OutputFormat||(OutputFormat={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{O:()=>PropertyCollection});var _Exports__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js");class PropertyCollection{constructor(){this.privKeys=[],this.privValues=[]}getProperty(key,def){let keyToUse;keyToUse="string"==typeof key?key:_Exports__WEBPACK_IMPORTED_MODULE_0__.o[key];for(let n=0;n<this.privKeys.length;n++)if(this.privKeys[n]===keyToUse)return this.privValues[n];return def}setProperty(key,value){let keyToUse;keyToUse="string"==typeof key?key:_Exports__WEBPACK_IMPORTED_MODULE_0__.o[key];for(let n=0;n<this.privKeys.length;n++)if(this.privKeys[n]===keyToUse)return void(this.privValues[n]=value);this.privKeys.push(keyToUse),this.privValues.push(value)}clone(){const clonedMap=new PropertyCollection;for(let n=0;n<this.privKeys.length;n++)clonedMap.privKeys.push(this.privKeys[n]),clonedMap.privValues.push(this.privValues[n]);return clonedMap}mergeTo(destinationCollection){this.privKeys.forEach((key=>{if(void 0===destinationCollection.getProperty(key,void 0)){const value=this.getProperty(key);destinationCollection.setProperty(key,value)}}))}get keys(){return this.privKeys}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var PropertyId;__webpack_require__.d(__webpack_exports__,{o:()=>PropertyId}),function(PropertyId){PropertyId[PropertyId.SpeechServiceConnection_Key=0]="SpeechServiceConnection_Key",PropertyId[PropertyId.SpeechServiceConnection_Endpoint=1]="SpeechServiceConnection_Endpoint",PropertyId[PropertyId.SpeechServiceConnection_Region=2]="SpeechServiceConnection_Region",PropertyId[PropertyId.SpeechServiceAuthorization_Token=3]="SpeechServiceAuthorization_Token",PropertyId[PropertyId.SpeechServiceAuthorization_Type=4]="SpeechServiceAuthorization_Type",PropertyId[PropertyId.SpeechServiceConnection_EndpointId=5]="SpeechServiceConnection_EndpointId",PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages=6]="SpeechServiceConnection_TranslationToLanguages",PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice=7]="SpeechServiceConnection_TranslationVoice",PropertyId[PropertyId.SpeechServiceConnection_TranslationFeatures=8]="SpeechServiceConnection_TranslationFeatures",PropertyId[PropertyId.SpeechServiceConnection_IntentRegion=9]="SpeechServiceConnection_IntentRegion",PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName=10]="SpeechServiceConnection_ProxyHostName",PropertyId[PropertyId.SpeechServiceConnection_ProxyPort=11]="SpeechServiceConnection_ProxyPort",PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName=12]="SpeechServiceConnection_ProxyUserName",PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword=13]="SpeechServiceConnection_ProxyPassword",PropertyId[PropertyId.SpeechServiceConnection_RecoMode=14]="SpeechServiceConnection_RecoMode",PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage=15]="SpeechServiceConnection_RecoLanguage",PropertyId[PropertyId.Speech_SessionId=16]="Speech_SessionId",PropertyId[PropertyId.SpeechServiceConnection_SynthLanguage=17]="SpeechServiceConnection_SynthLanguage",PropertyId[PropertyId.SpeechServiceConnection_SynthVoice=18]="SpeechServiceConnection_SynthVoice",PropertyId[PropertyId.SpeechServiceConnection_SynthOutputFormat=19]="SpeechServiceConnection_SynthOutputFormat",PropertyId[PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages=20]="SpeechServiceConnection_AutoDetectSourceLanguages",PropertyId[PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse=21]="SpeechServiceResponse_RequestDetailedResultTrueFalse",PropertyId[PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse=22]="SpeechServiceResponse_RequestProfanityFilterTrueFalse",PropertyId[PropertyId.SpeechServiceResponse_JsonResult=23]="SpeechServiceResponse_JsonResult",PropertyId[PropertyId.SpeechServiceResponse_JsonErrorDetails=24]="SpeechServiceResponse_JsonErrorDetails",PropertyId[PropertyId.CancellationDetails_Reason=25]="CancellationDetails_Reason",PropertyId[PropertyId.CancellationDetails_ReasonText=26]="CancellationDetails_ReasonText",PropertyId[PropertyId.CancellationDetails_ReasonDetailedText=27]="CancellationDetails_ReasonDetailedText",PropertyId[PropertyId.LanguageUnderstandingServiceResponse_JsonResult=28]="LanguageUnderstandingServiceResponse_JsonResult",PropertyId[PropertyId.SpeechServiceConnection_Url=29]="SpeechServiceConnection_Url",PropertyId[PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs=30]="SpeechServiceConnection_InitialSilenceTimeoutMs",PropertyId[PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs=31]="SpeechServiceConnection_EndSilenceTimeoutMs",PropertyId[PropertyId.SpeechServiceConnection_EnableAudioLogging=32]="SpeechServiceConnection_EnableAudioLogging",PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption=33]="SpeechServiceResponse_ProfanityOption",PropertyId[PropertyId.SpeechServiceResponse_PostProcessingOption=34]="SpeechServiceResponse_PostProcessingOption",PropertyId[PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps=35]="SpeechServiceResponse_RequestWordLevelTimestamps",PropertyId[PropertyId.SpeechServiceResponse_StablePartialResultThreshold=36]="SpeechServiceResponse_StablePartialResultThreshold",PropertyId[PropertyId.SpeechServiceResponse_OutputFormatOption=37]="SpeechServiceResponse_OutputFormatOption",PropertyId[PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult=38]="SpeechServiceResponse_TranslationRequestStablePartialResult",PropertyId[PropertyId.Conversation_ApplicationId=39]="Conversation_ApplicationId",PropertyId[PropertyId.Conversation_DialogType=40]="Conversation_DialogType",PropertyId[PropertyId.Conversation_Initial_Silence_Timeout=41]="Conversation_Initial_Silence_Timeout",PropertyId[PropertyId.Conversation_From_Id=42]="Conversation_From_Id",PropertyId[PropertyId.Conversation_Conversation_Id=43]="Conversation_Conversation_Id",PropertyId[PropertyId.Conversation_Custom_Voice_Deployment_Ids=44]="Conversation_Custom_Voice_Deployment_Ids",PropertyId[PropertyId.Conversation_Speech_Activity_Template=45]="Conversation_Speech_Activity_Template",PropertyId[PropertyId.Conversation_Request_Bot_Status_Messages=46]="Conversation_Request_Bot_Status_Messages",PropertyId[PropertyId.Conversation_Agent_Connection_Id=47]="Conversation_Agent_Connection_Id",PropertyId[PropertyId.SpeechServiceConnection_Host=48]="SpeechServiceConnection_Host",PropertyId[PropertyId.ConversationTranslator_Host=49]="ConversationTranslator_Host",PropertyId[PropertyId.ConversationTranslator_Name=50]="ConversationTranslator_Name",PropertyId[PropertyId.ConversationTranslator_CorrelationId=51]="ConversationTranslator_CorrelationId",PropertyId[PropertyId.ConversationTranslator_Token=52]="ConversationTranslator_Token",PropertyId[PropertyId.PronunciationAssessment_ReferenceText=53]="PronunciationAssessment_ReferenceText",PropertyId[PropertyId.PronunciationAssessment_GradingSystem=54]="PronunciationAssessment_GradingSystem",PropertyId[PropertyId.PronunciationAssessment_Granularity=55]="PronunciationAssessment_Granularity",PropertyId[PropertyId.PronunciationAssessment_EnableMiscue=56]="PronunciationAssessment_EnableMiscue",PropertyId[PropertyId.PronunciationAssessment_Json=57]="PronunciationAssessment_Json",PropertyId[PropertyId.PronunciationAssessment_Params=58]="PronunciationAssessment_Params",PropertyId[PropertyId.SpeakerRecognition_Api_Version=59]="SpeakerRecognition_Api_Version"}(PropertyId||(PropertyId={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var ResultReason;__webpack_require__.d(__webpack_exports__,{s:()=>ResultReason}),function(ResultReason){ResultReason[ResultReason.NoMatch=0]="NoMatch",ResultReason[ResultReason.Canceled=1]="Canceled",ResultReason[ResultReason.RecognizingSpeech=2]="RecognizingSpeech",ResultReason[ResultReason.RecognizedSpeech=3]="RecognizedSpeech",ResultReason[ResultReason.RecognizedKeyword=4]="RecognizedKeyword",ResultReason[ResultReason.RecognizingIntent=5]="RecognizingIntent",ResultReason[ResultReason.RecognizedIntent=6]="RecognizedIntent",ResultReason[ResultReason.TranslatingSpeech=7]="TranslatingSpeech",ResultReason[ResultReason.TranslatedSpeech=8]="TranslatedSpeech",ResultReason[ResultReason.SynthesizingAudio=9]="SynthesizingAudio",ResultReason[ResultReason.SynthesizingAudioCompleted=10]="SynthesizingAudioCompleted",ResultReason[ResultReason.SynthesizingAudioStarted=11]="SynthesizingAudioStarted",ResultReason[ResultReason.EnrollingVoiceProfile=12]="EnrollingVoiceProfile",ResultReason[ResultReason.EnrolledVoiceProfile=13]="EnrolledVoiceProfile",ResultReason[ResultReason.RecognizedSpeakers=14]="RecognizedSpeakers",ResultReason[ResultReason.RecognizedSpeaker=15]="RecognizedSpeaker",ResultReason[ResultReason.ResetVoiceProfile=16]="ResetVoiceProfile",ResultReason[ResultReason.DeletedVoiceProfile=17]="DeletedVoiceProfile",ResultReason[ResultReason.VoicesListRetrieved=18]="VoicesListRetrieved"}(ResultReason||(ResultReason={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechConfig.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{c:()=>SpeechConfig});var ProfanityOption,Exports=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js"),Contracts=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js"),PropertyId=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js"),PropertyCollection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js"),OutputFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js");!function(ProfanityOption){ProfanityOption[ProfanityOption.Masked=0]="Masked",ProfanityOption[ProfanityOption.Removed=1]="Removed",ProfanityOption[ProfanityOption.Raw=2]="Raw"}(ProfanityOption||(ProfanityOption={}));var SpeechSynthesisOutputFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js");class SpeechConfig{constructor(){}static fromSubscription(subscriptionKey,region){Contracts.a.throwIfNullOrWhitespace(subscriptionKey,"subscriptionKey"),Contracts.a.throwIfNullOrWhitespace(region,"region");const speechImpl=new SpeechConfigImpl;return speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Region,region),speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_IntentRegion,region),speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Key,subscriptionKey),speechImpl}static fromEndpoint(endpoint,subscriptionKey){Contracts.a.throwIfNull(endpoint,"endpoint");const speechImpl=new SpeechConfigImpl;return speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Endpoint,endpoint.href),void 0!==subscriptionKey&&speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Key,subscriptionKey),speechImpl}static fromHost(hostName,subscriptionKey){Contracts.a.throwIfNull(hostName,"hostName");const speechImpl=new SpeechConfigImpl;return speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Host,hostName.protocol+"//"+hostName.hostname+(""===hostName.port?"":":"+hostName.port)),void 0!==subscriptionKey&&speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Key,subscriptionKey),speechImpl}static fromAuthorizationToken(authorizationToken,region){Contracts.a.throwIfNull(authorizationToken,"authorizationToken"),Contracts.a.throwIfNullOrWhitespace(region,"region");const speechImpl=new SpeechConfigImpl;return speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_Region,region),speechImpl.setProperty(PropertyId.o.SpeechServiceConnection_IntentRegion,region),speechImpl.authorizationToken=authorizationToken,speechImpl}close(){}}class SpeechConfigImpl extends SpeechConfig{constructor(){super(),this.privProperties=new PropertyCollection.O,this.speechRecognitionLanguage="en-US",this.outputFormat=OutputFormat.W.Simple}get properties(){return this.privProperties}get endPoint(){return new URL(this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint))}get subscriptionKey(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_Key)}get region(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_Region)}get authorizationToken(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token)}set authorizationToken(value){this.privProperties.setProperty(PropertyId.o.SpeechServiceAuthorization_Token,value)}get speechRecognitionLanguage(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_RecoLanguage)}set speechRecognitionLanguage(value){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_RecoLanguage,value)}get autoDetectSourceLanguages(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_AutoDetectSourceLanguages)}set autoDetectSourceLanguages(value){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_AutoDetectSourceLanguages,value)}get outputFormat(){return OutputFormat.W[this.privProperties.getProperty(Exports.OutputFormatPropertyName,void 0)]}set outputFormat(value){this.privProperties.setProperty(Exports.OutputFormatPropertyName,OutputFormat.W[value])}get endpointId(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_EndpointId)}set endpointId(value){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_EndpointId,value)}setProperty(name,value){Contracts.a.throwIfNull(value,"value"),this.privProperties.setProperty(name,value)}getProperty(name,def){return this.privProperties.getProperty(name,def)}setProxy(proxyHostName,proxyPort,proxyUserName,proxyPassword){this.setProperty(PropertyId.o[PropertyId.o.SpeechServiceConnection_ProxyHostName],proxyHostName),this.setProperty(PropertyId.o[PropertyId.o.SpeechServiceConnection_ProxyPort],proxyPort),this.setProperty(PropertyId.o[PropertyId.o.SpeechServiceConnection_ProxyUserName],proxyUserName),this.setProperty(PropertyId.o[PropertyId.o.SpeechServiceConnection_ProxyPassword],proxyPassword)}setServiceProperty(name,value,channel){const currentProperties=JSON.parse(this.privProperties.getProperty(Exports.ServicePropertiesPropertyName,"{}"));currentProperties[name]=value,this.privProperties.setProperty(Exports.ServicePropertiesPropertyName,JSON.stringify(currentProperties))}setProfanity(profanity){this.privProperties.setProperty(PropertyId.o.SpeechServiceResponse_ProfanityOption,ProfanityOption[profanity])}enableAudioLogging(){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_EnableAudioLogging,"true")}requestWordLevelTimestamps(){this.privProperties.setProperty(PropertyId.o.SpeechServiceResponse_RequestWordLevelTimestamps,"true")}enableDictation(){this.privProperties.setProperty(Exports.ForceDictationPropertyName,"true")}clone(){const ret=new SpeechConfigImpl;return ret.privProperties=this.privProperties.clone(),ret}get speechSynthesisLanguage(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_SynthLanguage)}set speechSynthesisLanguage(language){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_SynthLanguage,language)}get speechSynthesisVoiceName(){return this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_SynthVoice)}set speechSynthesisVoiceName(voice){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_SynthVoice,voice)}get speechSynthesisOutputFormat(){return SpeechSynthesisOutputFormat.Y[this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_SynthOutputFormat,void 0)]}set speechSynthesisOutputFormat(format){this.privProperties.setProperty(PropertyId.o.SpeechServiceConnection_SynthOutputFormat,SpeechSynthesisOutputFormat.Y[format])}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechRecognizer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{F:()=>SpeechRecognizer});var WebsocketConnection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js"),ProxyInfo=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js"),Exports=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js"),PropertyId=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js"),OutputFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/OutputFormat.js"),ConnectionFactoryBase=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js"),RecognizerConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js"),WebsocketMessageFormatter=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js"),HeaderNames=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js"),QueryParameterNames=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");class SpeechConnectionFactory extends ConnectionFactoryBase._{constructor(){super(...arguments),this.interactiveRelativeUri="/speech/recognition/interactive/cognitiveservices/v1",this.conversationRelativeUri="/speech/recognition/conversation/cognitiveservices/v1",this.dictationRelativeUri="/speech/recognition/dictation/cognitiveservices/v1",this.create=(config,authInfo,connectionId)=>{let endpoint=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint,void 0);const region=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Region,void 0),hostSuffix=ConnectionFactoryBase._.getHostSuffix(region),host=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Host,"wss://"+region+".stt.speech"+hostSuffix),queryParams={},endpointId=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_EndpointId,void 0),language=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_RecoLanguage,void 0);if(endpointId?endpoint&&-1!==endpoint.search(QueryParameterNames.o.CustomSpeechDeploymentId)||(queryParams[QueryParameterNames.o.CustomSpeechDeploymentId]=endpointId):language&&(endpoint&&-1!==endpoint.search(QueryParameterNames.o.Language)||(queryParams[QueryParameterNames.o.Language]=language)),endpoint&&-1!==endpoint.search(QueryParameterNames.o.Format)||(queryParams[QueryParameterNames.o.Format]=config.parameters.getProperty(Exports.OutputFormatPropertyName,OutputFormat.W[OutputFormat.W.Simple]).toLowerCase()),void 0!==config.autoDetectSourceLanguages&&(queryParams[QueryParameterNames.o.EnableLanguageId]="true"),this.setCommonUrlParams(config,queryParams,endpoint),!endpoint)switch(config.recognitionMode){case RecognizerConfig.jf.Conversation:endpoint="true"===config.parameters.getProperty(Exports.ForceDictationPropertyName,"false")?host+this.dictationRelativeUri:host+this.conversationRelativeUri;break;case RecognizerConfig.jf.Dictation:endpoint=host+this.dictationRelativeUri;break;default:endpoint=host+this.interactiveRelativeUri}const headers={};void 0!==authInfo.token&&""!==authInfo.token&&(headers[authInfo.headerName]=authInfo.token),headers[HeaderNames.S.ConnectionId]=connectionId,config.parameters.setProperty(PropertyId.o.SpeechServiceConnection_Url,endpoint);const enableCompression="true"===config.parameters.getProperty("SPEECH-EnableWebsocketCompression","false");return new WebsocketConnection.i(endpoint,queryParams,headers,new WebsocketMessageFormatter.D,ProxyInfo.i.fromRecognizerConfig(config),enableCompression,connectionId)}}}var PropertyCollection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");class RecognitionResult{constructor(resultId,reason,text,duration,offset,language,languageDetectionConfidence,errorDetails,json,properties){this.privResultId=resultId,this.privReason=reason,this.privText=text,this.privDuration=duration,this.privOffset=offset,this.privLanguage=language,this.privLanguageDetectionConfidence=languageDetectionConfidence,this.privErrorDetails=errorDetails,this.privJson=json,this.privProperties=properties}get resultId(){return this.privResultId}get reason(){return this.privReason}get text(){return this.privText}get duration(){return this.privDuration}get offset(){return this.privOffset}get language(){return this.privLanguage}get languageDetectionConfidence(){return this.privLanguageDetectionConfidence}get errorDetails(){return this.privErrorDetails}get json(){return this.privJson}get properties(){return this.privProperties}}class SpeechRecognitionResult extends RecognitionResult{constructor(resultId,reason,text,duration,offset,language,languageDetectionConfidence,speakerId,errorDetails,json,properties){super(resultId,reason,text,duration,offset,language,languageDetectionConfidence,errorDetails,json,properties),this.privSpeakerId=speakerId}get speakerId(){return this.privSpeakerId}}var ResultReason=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js");class SessionEventArgs{constructor(sessionId){this.privSessionId=sessionId}get sessionId(){return this.privSessionId}}class RecognitionEventArgs extends SessionEventArgs{constructor(offset,sessionId){super(sessionId),this.privOffset=offset}get offset(){return this.privOffset}}class SpeechRecognitionEventArgs extends RecognitionEventArgs{constructor(result,offset,sessionId){super(offset,sessionId),this.privResult=result}get result(){return this.privResult}}var CancellationErrorCodes=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationErrorCodes.js");class CancellationEventArgsBase extends RecognitionEventArgs{constructor(reason,errorDetails,errorCode,offset,sessionId){super(offset,sessionId),this.privReason=reason,this.privErrorDetails=errorDetails,this.privErrorCode=errorCode}get reason(){return this.privReason}get errorCode(){return this.privErrorCode}get errorDetails(){return this.privErrorDetails}}class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase{}class ReplayableAudioNode{constructor(audioSource,bytesPerSecond){this.privBuffers=[],this.privReplayOffset=0,this.privLastShrinkOffset=0,this.privBufferStartOffset=0,this.privBufferSerial=0,this.privBufferedBytes=0,this.privReplay=!1,this.privLastChunkAcquiredTime=0,this.id=()=>this.privAudioNode.id(),this.privAudioNode=audioSource,this.privBytesPerSecond=bytesPerSecond}read(){if(this.privReplay&&0!==this.privBuffers.length){const offsetToSeek=this.privReplayOffset-this.privBufferStartOffset;let bytesToSeek=Math.round(offsetToSeek*this.privBytesPerSecond*1e-7);0!=bytesToSeek%2&&bytesToSeek++;let i=0;for(;i<this.privBuffers.length&&bytesToSeek>=this.privBuffers[i].chunk.buffer.byteLength;)bytesToSeek-=this.privBuffers[i++].chunk.buffer.byteLength;if(i<this.privBuffers.length){const retVal=this.privBuffers[i].chunk.buffer.slice(bytesToSeek);return this.privReplayOffset+=retVal.byteLength/this.privBytesPerSecond*1e7,i===this.privBuffers.length-1&&(this.privReplay=!1),Promise.resolve({buffer:retVal,isEnd:!1,timeReceived:this.privBuffers[i].chunk.timeReceived})}}return this.privAudioNode.read().then((result=>(result&&result.buffer&&(this.privBuffers.push(new BufferEntry(result,this.privBufferSerial++,this.privBufferedBytes)),this.privBufferedBytes+=result.buffer.byteLength),result)))}detach(){return this.privBuffers=void 0,this.privAudioNode.detach()}replay(){this.privBuffers&&0!==this.privBuffers.length&&(this.privReplay=!0,this.privReplayOffset=this.privLastShrinkOffset)}shrinkBuffers(offset){if(void 0===this.privBuffers||0===this.privBuffers.length)return;this.privLastShrinkOffset=offset;const offsetToSeek=offset-this.privBufferStartOffset;let bytesToSeek=Math.round(offsetToSeek*this.privBytesPerSecond*1e-7),i=0;for(;i<this.privBuffers.length&&bytesToSeek>=this.privBuffers[i].chunk.buffer.byteLength;)bytesToSeek-=this.privBuffers[i++].chunk.buffer.byteLength;this.privBufferStartOffset=Math.round(offset-bytesToSeek/this.privBytesPerSecond*1e7),this.privBuffers=this.privBuffers.slice(i)}findTimeAtOffset(offset){if(offset<this.privBufferStartOffset||void 0===this.privBuffers)return 0;for(const value of this.privBuffers){const startOffset=value.byteOffset/this.privBytesPerSecond*1e7,endOffset=startOffset+value.chunk.buffer.byteLength/this.privBytesPerSecond*1e7;if(offset>=startOffset&&offset<=endOffset)return value.chunk.timeReceived}return 0}}class BufferEntry{constructor(chunk,serial,byteOffset){this.chunk=chunk,this.serial=serial,this.byteOffset=byteOffset}}var ConnectionMessage=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionMessage.js"),common_Error=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),EventSource=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/EventSource.js");class Timeout{}Timeout.workerTimers=null,Timeout.clearTimeout=timerId=>Timeout.timers().clearTimeout(timerId),Timeout.setTimeout=(func,delay)=>Timeout.timers().setTimeout(func,delay),Timeout.load=url=>{const scheduledTimeoutFunctions=new Map([[0,()=>{}]]),unhandledRequests=new Map,worker=new Worker(url);worker.addEventListener("message",(({data})=>{if(Timeout.isCallNotification(data)){const{params:{timerId}}=data,idOrFunc=scheduledTimeoutFunctions.get(timerId);if("number"==typeof idOrFunc){const unhandledTimerId=unhandledRequests.get(idOrFunc);if(void 0===unhandledTimerId||unhandledTimerId!==timerId)throw new Error("The timer is in an undefined state.")}else{if(void 0===idOrFunc)throw new Error("The timer is in an undefined state.");idOrFunc(),scheduledTimeoutFunctions.delete(timerId)}}else{if(!Timeout.isClearResponse(data)){const{error:{message}}=data;throw new Error(message)}{const{id}=data,unhandledTimerId=unhandledRequests.get(id);if(void 0===unhandledTimerId)throw new Error("The timer is in an undefined state.");unhandledRequests.delete(id),scheduledTimeoutFunctions.delete(unhandledTimerId)}}}));return{clearTimeout:timerId=>{const id=Math.random();unhandledRequests.set(id,timerId),scheduledTimeoutFunctions.set(timerId,id),worker.postMessage({id,method:"clear",params:{timerId}})},setTimeout:(func,delay)=>{const timerId=Math.random();return scheduledTimeoutFunctions.set(timerId,func),worker.postMessage({id:null,method:"set",params:{delay,now:performance.now(),timerId}}),timerId}}},Timeout.loadWorkerTimers=()=>()=>{if(null!==Timeout.workerTimers)return Timeout.workerTimers;const blob=new Blob(['!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error(\'There is no interval scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if("performance"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o="performance"in self?performance.now():Date.now();o>n?postMessage({id:null,method:"call",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){"use strict";n.r(t);var r=n(2);for(var o in r)"default"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)"default"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)"default"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)"default"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)"default"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)"default"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)"default"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)"default"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(11);for(var o in r)"default"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)"default"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)"default"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n(1);for(var i in o)"default"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)"default"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener("message",({data:e})=>{try{if("clear"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if("set"!==e.method)throw new Error(\'The given method "\'.concat(e.method,\'" is not supported\'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);'],{type:"application/javascript; charset=utf-8"}),url=URL.createObjectURL(blob);return Timeout.workerTimers=Timeout.load(url),Timeout.workerTimers.setTimeout((()=>URL.revokeObjectURL(url)),0),Timeout.workerTimers},Timeout.timers=Timeout.loadWorkerTimers(),Timeout.isCallNotification=message=>void 0!==message.method&&"call"===message.method,Timeout.isClearResponse=message=>null===message.error&&"number"==typeof message.id;var RecognitionCompletionStatus,ConnectionEvents=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/ConnectionEvents.js"),IConnection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/IConnection.js"),Guid=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),CancellationReason=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/CancellationReason.js"),common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),Events=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Events.js"),PlatformEvent=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/PlatformEvent.js");class SpeechRecognitionEvent extends PlatformEvent.A{constructor(eventName,requestId,sessionId,eventType=PlatformEvent.t.Info){super(eventName,eventType),this.privRequestId=requestId,this.privSessionId=sessionId}get requestId(){return this.privRequestId}get sessionId(){return this.privSessionId}}class RecognitionTriggeredEvent extends SpeechRecognitionEvent{constructor(requestId,sessionId,audioSourceId,audioNodeId){super("RecognitionTriggeredEvent",requestId,sessionId),this.privAudioSourceId=audioSourceId,this.privAudioNodeId=audioNodeId}get audioSourceId(){return this.privAudioSourceId}get audioNodeId(){return this.privAudioNodeId}}class ListeningStartedEvent extends SpeechRecognitionEvent{constructor(requestId,sessionId,audioSourceId,audioNodeId){super("ListeningStartedEvent",requestId,sessionId),this.privAudioSourceId=audioSourceId,this.privAudioNodeId=audioNodeId}get audioSourceId(){return this.privAudioSourceId}get audioNodeId(){return this.privAudioNodeId}}class ConnectingToServiceEvent extends SpeechRecognitionEvent{constructor(requestId,authFetchEventid,sessionId){super("ConnectingToServiceEvent",requestId,sessionId),this.privAuthFetchEventid=authFetchEventid}get authFetchEventid(){return this.privAuthFetchEventid}}class RecognitionStartedEvent extends SpeechRecognitionEvent{constructor(requestId,audioSourceId,audioNodeId,authFetchEventId,sessionId){super("RecognitionStartedEvent",requestId,sessionId),this.privAudioSourceId=audioSourceId,this.privAudioNodeId=audioNodeId,this.privAuthFetchEventId=authFetchEventId}get audioSourceId(){return this.privAudioSourceId}get audioNodeId(){return this.privAudioNodeId}get authFetchEventId(){return this.privAuthFetchEventId}}!function(RecognitionCompletionStatus){RecognitionCompletionStatus[RecognitionCompletionStatus.Success=0]="Success",RecognitionCompletionStatus[RecognitionCompletionStatus.AudioSourceError=1]="AudioSourceError",RecognitionCompletionStatus[RecognitionCompletionStatus.AudioSourceTimeout=2]="AudioSourceTimeout",RecognitionCompletionStatus[RecognitionCompletionStatus.AuthTokenFetchError=3]="AuthTokenFetchError",RecognitionCompletionStatus[RecognitionCompletionStatus.AuthTokenFetchTimeout=4]="AuthTokenFetchTimeout",RecognitionCompletionStatus[RecognitionCompletionStatus.UnAuthorized=5]="UnAuthorized",RecognitionCompletionStatus[RecognitionCompletionStatus.ConnectTimeout=6]="ConnectTimeout",RecognitionCompletionStatus[RecognitionCompletionStatus.ConnectError=7]="ConnectError",RecognitionCompletionStatus[RecognitionCompletionStatus.ClientRecognitionActivityTimeout=8]="ClientRecognitionActivityTimeout",RecognitionCompletionStatus[RecognitionCompletionStatus.UnknownError=9]="UnknownError"}(RecognitionCompletionStatus||(RecognitionCompletionStatus={}));var AudioSourceEvents=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/AudioSourceEvents.js");class ServiceTelemetryListener{constructor(requestId,audioSourceId,audioNodeId){this.privIsDisposed=!1,this.privListeningTriggerMetric=null,this.privMicMetric=null,this.privConnectionEstablishMetric=null,this.onEvent=e=>{if(!this.privIsDisposed&&(e instanceof RecognitionTriggeredEvent&&e.requestId===this.privRequestId&&(this.privListeningTriggerMetric={End:e.eventTime,Name:"ListeningTrigger",Start:e.eventTime}),e instanceof AudioSourceEvents.i5&&e.audioSourceId===this.privAudioSourceId&&e.audioNodeId===this.privAudioNodeId&&(this.privMicStartTime=e.eventTime),e instanceof AudioSourceEvents.sQ&&e.audioSourceId===this.privAudioSourceId&&e.audioNodeId===this.privAudioNodeId&&(this.privMicStartTime=e.eventTime),e instanceof AudioSourceEvents.n0&&e.audioSourceId===this.privAudioSourceId&&(this.privMicMetric||(this.privMicMetric={End:e.eventTime,Error:e.error,Name:"Microphone",Start:this.privMicStartTime})),e instanceof AudioSourceEvents.hA&&e.audioSourceId===this.privAudioSourceId&&e.audioNodeId===this.privAudioNodeId&&(this.privMicMetric||(this.privMicMetric={End:e.eventTime,Error:e.error,Name:"Microphone",Start:this.privMicStartTime})),e instanceof AudioSourceEvents.He&&e.audioSourceId===this.privAudioSourceId&&e.audioNodeId===this.privAudioNodeId&&(this.privMicMetric||(this.privMicMetric={End:e.eventTime,Name:"Microphone",Start:this.privMicStartTime})),e instanceof ConnectingToServiceEvent&&e.requestId===this.privRequestId&&(this.privConnectionId=e.sessionId),e instanceof ConnectionEvents.YF&&e.connectionId===this.privConnectionId&&(this.privConnectionStartTime=e.eventTime),e instanceof ConnectionEvents.Zk&&e.connectionId===this.privConnectionId&&(this.privConnectionEstablishMetric||(this.privConnectionEstablishMetric={End:e.eventTime,Id:this.privConnectionId,Name:"Connection",Start:this.privConnectionStartTime})),e instanceof ConnectionEvents.xz&&e.connectionId===this.privConnectionId&&(this.privConnectionEstablishMetric||(this.privConnectionEstablishMetric={End:e.eventTime,Error:this.getConnectionError(e.statusCode),Id:this.privConnectionId,Name:"Connection",Start:this.privConnectionStartTime})),e instanceof ConnectionEvents.Qz&&e.connectionId===this.privConnectionId&&e.message&&e.message.headers&&e.message.headers.path)){this.privReceivedMessages[e.message.headers.path]||(this.privReceivedMessages[e.message.headers.path]=new Array);const maxMessagesToSend=50;this.privReceivedMessages[e.message.headers.path].length<maxMessagesToSend&&this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime)}},this.getTelemetry=()=>{const metrics=new Array;this.privListeningTriggerMetric&&metrics.push(this.privListeningTriggerMetric),this.privMicMetric&&metrics.push(this.privMicMetric),this.privConnectionEstablishMetric&&metrics.push(this.privConnectionEstablishMetric),this.privPhraseLatencies.length>0&&metrics.push({PhraseLatencyMs:this.privPhraseLatencies}),this.privHypothesisLatencies.length>0&&metrics.push({FirstHypothesisLatencyMs:this.privHypothesisLatencies});const telemetry={Metrics:metrics,ReceivedMessages:this.privReceivedMessages},json=JSON.stringify(telemetry);return this.privReceivedMessages={},this.privListeningTriggerMetric=null,this.privMicMetric=null,this.privConnectionEstablishMetric=null,this.privPhraseLatencies=[],this.privHypothesisLatencies=[],json},this.dispose=()=>{this.privIsDisposed=!0},this.getConnectionError=statusCode=>{switch(statusCode){case 400:case 1002:case 1003:case 1005:case 1007:case 1008:case 1009:return"BadRequest";case 401:return"Unauthorized";case 403:return"Forbidden";case 503:case 1001:return"ServerUnavailable";case 500:case 1011:return"ServerError";case 408:case 504:return"Timeout";default:return"statuscode:"+statusCode.toString()}},this.privRequestId=requestId,this.privAudioSourceId=audioSourceId,this.privAudioNodeId=audioNodeId,this.privReceivedMessages={},this.privPhraseLatencies=[],this.privHypothesisLatencies=[]}phraseReceived(audioReceivedTime){audioReceivedTime>0&&this.privPhraseLatencies.push(Date.now()-audioReceivedTime)}hypothesisReceived(audioReceivedTime){audioReceivedTime>0&&this.privHypothesisLatencies.push(Date.now()-audioReceivedTime)}get hasTelemetry(){return 0!==Object.keys(this.privReceivedMessages).length||null!==this.privListeningTriggerMetric||null!==this.privMicMetric||null!==this.privConnectionEstablishMetric||0!==this.privPhraseLatencies.length||0!==this.privHypothesisLatencies.length}}var __awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class RequestSession{constructor(audioSourceId){this.privIsDisposed=!1,this.privDetachables=new Array,this.privIsAudioNodeDetached=!1,this.privIsRecognizing=!1,this.privIsSpeechEnded=!1,this.privTurnStartAudioOffset=0,this.privLastRecoOffset=0,this.privHypothesisReceived=!1,this.privBytesSent=0,this.privRecogNumber=0,this.privInTurn=!1,this.privConnectionAttempts=0,this.onPreConnectionStart=(authFetchEventId,connectionId)=>{this.privAuthFetchEventId=authFetchEventId,this.privSessionId=connectionId,this.onEvent(new ConnectingToServiceEvent(this.privRequestId,this.privAuthFetchEventId,this.privSessionId))},this.onSpeechContext=()=>{this.privRequestId=(0,Guid.Q)()},this.onServiceTurnStartResponse=()=>{this.privTurnDeferral&&this.privInTurn&&(this.privTurnDeferral.reject("Another turn started before current completed."),this.privTurnDeferral.promise.then().catch((()=>{}))),this.privInTurn=!0,this.privTurnDeferral=new common_Promise.BH},this.getTelemetry=()=>this.privServiceTelemetryListener.hasTelemetry?this.privServiceTelemetryListener.getTelemetry():null,this.onEvent=event=>{this.privServiceTelemetryListener&&this.privServiceTelemetryListener.onEvent(event),Events.z.instance.onEvent(event)},this.privAudioSourceId=audioSourceId,this.privRequestId=(0,Guid.Q)(),this.privAudioNodeId=(0,Guid.Q)(),this.privTurnDeferral=new common_Promise.BH,this.privTurnDeferral.resolve()}get sessionId(){return this.privSessionId}get requestId(){return this.privRequestId}get audioNodeId(){return this.privAudioNodeId}get turnCompletionPromise(){return this.privTurnDeferral.promise}get isSpeechEnded(){return this.privIsSpeechEnded}get isRecognizing(){return this.privIsRecognizing}get currentTurnAudioOffset(){return this.privTurnStartAudioOffset}get recogNumber(){return this.privRecogNumber}get numConnectionAttempts(){return this.privConnectionAttempts}get bytesSent(){return this.privBytesSent}listenForServiceTelemetry(eventSource){this.privServiceTelemetryListener&&this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener))}startNewRecognition(){this.privIsSpeechEnded=!1,this.privIsRecognizing=!0,this.privTurnStartAudioOffset=0,this.privLastRecoOffset=0,this.privRecogNumber++,this.privServiceTelemetryListener=new ServiceTelemetryListener(this.privRequestId,this.privAudioSourceId,this.privAudioNodeId),this.onEvent(new RecognitionTriggeredEvent(this.requestId,this.privSessionId,this.privAudioSourceId,this.privAudioNodeId))}onAudioSourceAttachCompleted(audioNode,isError,error){return __awaiter(this,void 0,void 0,(function*(){this.privAudioNode=audioNode,this.privIsAudioNodeDetached=!1,isError?yield this.onComplete():this.onEvent(new ListeningStartedEvent(this.privRequestId,this.privSessionId,this.privAudioSourceId,this.privAudioNodeId))}))}onAuthCompleted(isError,error){return __awaiter(this,void 0,void 0,(function*(){isError&&(yield this.onComplete())}))}onConnectionEstablishCompleted(statusCode,reason){return __awaiter(this,void 0,void 0,(function*(){if(200===statusCode)return this.onEvent(new RecognitionStartedEvent(this.requestId,this.privAudioSourceId,this.privAudioNodeId,this.privAuthFetchEventId,this.privSessionId)),this.privAudioNode&&this.privAudioNode.replay(),this.privTurnStartAudioOffset=this.privLastRecoOffset,void(this.privBytesSent=0);403===statusCode&&(yield this.onComplete())}))}onServiceTurnEndResponse(continuousRecognition){return __awaiter(this,void 0,void 0,(function*(){this.privTurnDeferral.resolve(),!continuousRecognition||this.isSpeechEnded?(yield this.onComplete(),this.privInTurn=!1):(this.privTurnStartAudioOffset=this.privLastRecoOffset,this.privAudioNode.replay())}))}onHypothesis(offset){this.privHypothesisReceived||(this.privHypothesisReceived=!0,this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset)))}onPhraseRecognized(offset){this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset)),this.onServiceRecognized(offset)}onServiceRecognized(offset){this.privLastRecoOffset=offset,this.privHypothesisReceived=!1,this.privAudioNode.shrinkBuffers(offset),this.privConnectionAttempts=0}onAudioSent(bytesSent){this.privBytesSent+=bytesSent}onRetryConnection(){this.privConnectionAttempts++}dispose(error){var _a;return __awaiter(this,void 0,void 0,(function*(){if(!this.privIsDisposed){this.privIsDisposed=!0;for(const detachable of this.privDetachables)yield detachable.detach();null===(_a=this.privServiceTelemetryListener)||void 0===_a||_a.dispose(),this.privIsRecognizing=!1}}))}onStopRecognizing(){return __awaiter(this,void 0,void 0,(function*(){yield this.onComplete()}))}onSpeechEnded(){this.privIsSpeechEnded=!0}onComplete(){return __awaiter(this,void 0,void 0,(function*(){this.privIsRecognizing&&(this.privIsRecognizing=!1,yield this.detachAudioNode())}))}detachAudioNode(){return __awaiter(this,void 0,void 0,(function*(){this.privIsAudioNodeDetached||(this.privIsAudioNodeDetached=!0,this.privAudioNode&&(yield this.privAudioNode.detach()))}))}}class DynamicGrammarBuilder{addPhrase(phrase){this.privPhrases||(this.privPhrases=[]),phrase instanceof Array?this.privPhrases=this.privPhrases.concat(phrase):this.privPhrases.push(phrase)}clearPhrases(){this.privPhrases=void 0}addReferenceGrammar(grammar){this.privGrammars||(this.privGrammars=[]),grammar instanceof Array?this.privGrammars=this.privGrammars.concat(grammar):this.privGrammars.push(grammar)}clearGrammars(){this.privGrammars=void 0}generateGrammarObject(){if(void 0===this.privGrammars&&void 0===this.privPhrases)return;const retObj={};if(retObj.ReferenceGrammars=this.privGrammars,void 0!==this.privPhrases&&0!==this.privPhrases.length){const retPhrases=[];this.privPhrases.forEach(((value,index,array)=>{retPhrases.push({Text:value})})),retObj.Groups=[{Type:"Generic",Items:retPhrases}]}return retObj}}class SpeechContext{constructor(dynamicGrammar){this.privContext={},this.privDynamicGrammar=dynamicGrammar}setSection(sectionName,value){this.privContext[sectionName]=value}setPronunciationAssessmentParams(params){void 0===this.privContext.phraseDetection&&(this.privContext.phraseDetection={enrichment:{pronunciationAssessment:{}}}),this.privContext.phraseDetection.enrichment.pronunciationAssessment=JSON.parse(params),void 0===this.privContext.phraseOutput&&(this.privContext.phraseOutput={detailed:{options:[]},format:{}}),this.privContext.phraseOutput.format="Detailed",this.privContext.phraseOutput.detailed.options.push("PronunciationAssessment"),-1===this.privContext.phraseOutput.detailed.options.indexOf("WordTimings")&&this.privContext.phraseOutput.detailed.options.push("WordTimings"),-1===this.privContext.phraseOutput.detailed.options.indexOf("SNR")&&this.privContext.phraseOutput.detailed.options.push("SNR")}toJSON(){const dgi=this.privDynamicGrammar.generateGrammarObject();this.setSection("dgi",dgi);return JSON.stringify(this.privContext)}}var AgentConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/AgentConfig.js");class SpeechDetected{constructor(json){this.privSpeechStartDetected=JSON.parse(json)}static fromJSON(json){return new SpeechDetected(json)}get Offset(){return this.privSpeechStartDetected.Offset}}var SynthesisStatus,RecognitionStatus,SpeechConnectionMessage_Internal=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SpeechConnectionMessage.Internal.js"),ServiceRecognizerBase_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class ServiceRecognizerBase{constructor(authentication,connectionFactory,audioSource,recognizerConfig,recognizer){if(this.privSetTimeout=setTimeout,this.privIsLiveAudio=!1,this.recognizeOverride=void 0,this.disconnectOverride=void 0,this.receiveMessageOverride=void 0,this.sendSpeechContext=connection=>{const speechContextJson=this.speechContext.toJSON();if(this.privRequestSession.onSpeechContext(),speechContextJson)return connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"speech.context",this.privRequestSession.requestId,"application/json",speechContextJson))},this.sendPrePayloadJSONOverride=void 0,this.postConnectImplOverride=void 0,this.configConnectionOverride=void 0,this.sendSpeechServiceConfig=(connection,requestSession,SpeechServiceConfigJson)=>{if(!0!==ServiceRecognizerBase.telemetryDataEnabled){const replacement={context:{system:JSON.parse(SpeechServiceConfigJson).context.system}};SpeechServiceConfigJson=JSON.stringify(replacement)}if("true"===this.privRecognizerConfig.parameters.getProperty("TranscriptionService_SingleChannel","false").toLowerCase()){const json=JSON.parse(SpeechServiceConfigJson);json.context.DisableReferenceChannel="True",json.context.MicSpec="1_0_0",SpeechServiceConfigJson=JSON.stringify(json)}if(SpeechServiceConfigJson)return connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"speech.config",requestSession.requestId,"application/json",SpeechServiceConfigJson))},!authentication)throw new common_Error.Do("authentication");if(!connectionFactory)throw new common_Error.Do("connectionFactory");if(!audioSource)throw new common_Error.Do("audioSource");if(!recognizerConfig)throw new common_Error.Do("recognizerConfig");this.privMustReportEndOfStream=!1,this.privAuthentication=authentication,this.privConnectionFactory=connectionFactory,this.privAudioSource=audioSource,this.privRecognizerConfig=recognizerConfig,this.privIsDisposed=!1,this.privRecognizer=recognizer,this.privRequestSession=new RequestSession(this.privAudioSource.id()),this.privConnectionEvents=new EventSource.n,this.privServiceEvents=new EventSource.n,this.privDynamicGrammar=new DynamicGrammarBuilder,this.privSpeechContext=new SpeechContext(this.privDynamicGrammar),this.privAgentConfig=new AgentConfig.H,"undefined"!=typeof Blob&&"undefined"!=typeof Worker&&(this.privSetTimeout=Timeout.setTimeout),this.connectionEvents.attach((connectionEvent=>ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if("ConnectionClosedEvent"===connectionEvent.name){const connectionClosedEvent=connectionEvent;(1003===connectionClosedEvent.statusCode||1007===connectionClosedEvent.statusCode||1002===connectionClosedEvent.statusCode||4e3===connectionClosedEvent.statusCode||this.privRequestSession.numConnectionAttempts>this.privRecognizerConfig.maxRetryCount)&&(yield this.cancelRecognitionLocal(CancellationReason._.Error,1007===connectionClosedEvent.statusCode?CancellationErrorCodes.E.BadRequestParameters:CancellationErrorCodes.E.ConnectionFailure,connectionClosedEvent.reason+" websocket error code: "+connectionClosedEvent.statusCode))}}))))}get audioSource(){return this.privAudioSource}get speechContext(){return this.privSpeechContext}get dynamicGrammar(){return this.privDynamicGrammar}get agentConfig(){return this.privAgentConfig}set conversationTranslatorToken(token){this.privRecognizerConfig.parameters.setProperty(PropertyId.o.ConversationTranslator_Token,token)}set authentication(auth){this.privAuthentication=this.authentication}isDisposed(){return this.privIsDisposed}dispose(reason){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if(this.privIsDisposed=!0,this.privConnectionConfigurationPromise)try{const connection=yield this.privConnectionConfigurationPromise;yield connection.dispose(reason)}catch(error){return}}))}get connectionEvents(){return this.privConnectionEvents}get serviceEvents(){return this.privServiceEvents}get recognitionMode(){return this.privRecognizerConfig.recognitionMode}recognize(recoMode,successCallback,errorCallBack){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if(void 0!==this.recognizeOverride)return this.recognizeOverride(recoMode,successCallback,errorCallBack);this.privConnectionConfigurationPromise=null,this.privRecognizerConfig.recognitionMode=recoMode,this.privSuccessCallback=successCallback,this.privErrorCallback=errorCallBack,this.privRequestSession.startNewRecognition(),this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);const conPromise=this.connectImpl();let audioNode;try{const audioStreamNode=yield this.audioSource.attach(this.privRequestSession.audioNodeId),format=yield this.audioSource.format,deviceInfo=yield this.audioSource.deviceInfo;this.privIsLiveAudio=deviceInfo.type&&deviceInfo.type===RecognizerConfig.dt.Microphones,audioNode=new ReplayableAudioNode(audioStreamNode,format.avgBytesPerSec),yield this.privRequestSession.onAudioSourceAttachCompleted(audioNode,!1),this.privRecognizerConfig.SpeechServiceConfig.Context.audio={source:deviceInfo}}catch(error){throw yield this.privRequestSession.onStopRecognizing(),error}try{yield conPromise}catch(error){return void(yield this.cancelRecognitionLocal(CancellationReason._.Error,CancellationErrorCodes.E.ConnectionFailure,error))}const sessionStartEventArgs=new SessionEventArgs(this.privRequestSession.sessionId);this.privRecognizer.sessionStarted&&this.privRecognizer.sessionStarted(this.privRecognizer,sessionStartEventArgs);this.receiveMessage();this.sendAudio(audioNode).catch((error=>ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){yield this.cancelRecognitionLocal(CancellationReason._.Error,CancellationErrorCodes.E.RuntimeError,error)}))))}))}stopRecognizing(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if(this.privRequestSession.isRecognizing)try{yield this.audioSource.turnOff(),yield this.sendFinalAudio(),yield this.privRequestSession.onStopRecognizing(),yield this.privRequestSession.turnCompletionPromise}finally{yield this.privRequestSession.dispose()}}))}connect(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){return yield this.connectImpl(),Promise.resolve()}))}connectAsync(cb,err){this.connectImpl().then((connection=>{try{cb&&cb()}catch(e){err&&err(e)}}),(reason=>{try{err&&err(reason)}catch(error){}}))}disconnect(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){yield this.cancelRecognitionLocal(CancellationReason._.Error,CancellationErrorCodes.E.NoError,"Disconnecting"),void 0!==this.disconnectOverride&&(yield this.disconnectOverride());try{yield(yield this.privConnectionPromise).dispose()}catch(error){}this.privConnectionPromise=null}))}sendMessage(message){}sendNetworkMessage(path,payload){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const type="string"==typeof payload?ConnectionMessage.C.Text:ConnectionMessage.C.Binary,contentType="string"==typeof payload?"application/json":"";return(yield this.fetchConnection()).send(new SpeechConnectionMessage_Internal.r(type,path,this.privRequestSession.requestId,contentType,payload))}))}set activityTemplate(messagePayload){this.privActivityTemplate=messagePayload}get activityTemplate(){return this.privActivityTemplate}sendTelemetryData(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const telemetryData=this.privRequestSession.getTelemetry();if(!0!==ServiceRecognizerBase.telemetryDataEnabled||this.privIsDisposed||null===telemetryData)return;if(ServiceRecognizerBase.telemetryData)try{ServiceRecognizerBase.telemetryData(telemetryData)}catch(_a){}const connection=yield this.fetchConnection();yield connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Text,"telemetry",this.privRequestSession.requestId,"application/json",telemetryData))}))}cancelRecognitionLocal(cancellationReason,errorCode,error){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){this.privRequestSession.isRecognizing&&(yield this.privRequestSession.onStopRecognizing(),this.cancelRecognition(this.privRequestSession.sessionId,this.privRequestSession.requestId,cancellationReason,errorCode,error))}))}receiveMessage(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){try{if(this.privIsDisposed)return;let connection=yield this.fetchConnection();const message=yield connection.read();if(void 0!==this.receiveMessageOverride)return this.receiveMessageOverride();if(!message)return this.privRequestSession.isRecognizing?this.receiveMessage():void 0;this.privServiceHasSentMessage=!0;const connectionMessage=SpeechConnectionMessage_Internal.r.fromConnectionMessage(message);if(connectionMessage.requestId.toLowerCase()===this.privRequestSession.requestId.toLowerCase())switch(connectionMessage.path.toLowerCase()){case"turn.start":this.privMustReportEndOfStream=!0,this.privRequestSession.onServiceTurnStartResponse();break;case"speech.startdetected":const speechStartDetected=SpeechDetected.fromJSON(connectionMessage.textBody),speechStartEventArgs=new RecognitionEventArgs(speechStartDetected.Offset,this.privRequestSession.sessionId);this.privRecognizer.speechStartDetected&&this.privRecognizer.speechStartDetected(this.privRecognizer,speechStartEventArgs);break;case"speech.enddetected":let json;json=connectionMessage.textBody.length>0?connectionMessage.textBody:"{ Offset: 0 }";const speechStopDetected=SpeechDetected.fromJSON(json);this.privRecognizerConfig.isContinuousRecognition&&this.privRequestSession.onServiceRecognized(speechStopDetected.Offset+this.privRequestSession.currentTurnAudioOffset);const speechStopEventArgs=new RecognitionEventArgs(speechStopDetected.Offset+this.privRequestSession.currentTurnAudioOffset,this.privRequestSession.sessionId);this.privRecognizer.speechEndDetected&&this.privRecognizer.speechEndDetected(this.privRecognizer,speechStopEventArgs);break;case"turn.end":yield this.sendTelemetryData(),this.privRequestSession.isSpeechEnded&&this.privMustReportEndOfStream&&(this.privMustReportEndOfStream=!1,yield this.cancelRecognitionLocal(CancellationReason._.EndOfStream,CancellationErrorCodes.E.NoError,void 0));const sessionStopEventArgs=new SessionEventArgs(this.privRequestSession.sessionId);if(yield this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition),!this.privRecognizerConfig.isContinuousRecognition||this.privRequestSession.isSpeechEnded||!this.privRequestSession.isRecognizing)return void(this.privRecognizer.sessionStopped&&this.privRecognizer.sessionStopped(this.privRecognizer,sessionStopEventArgs));connection=yield this.fetchConnection(),yield this.sendPrePayloadJSON(connection);break;default:(yield this.processTypeSpecificMessages(connectionMessage))||this.privServiceEvents&&this.serviceEvents.onEvent(new ConnectionEvents.e2(connectionMessage.path.toLowerCase(),connectionMessage.textBody))}return this.receiveMessage()}catch(error){return null}}))}sendPrePayloadJSON(connection){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if(void 0!==this.sendPrePayloadJSONOverride)return this.sendPrePayloadJSONOverride(connection);yield this.sendSpeechContext(connection),yield this.sendWaveHeader(connection)}))}sendWaveHeader(connection){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const format=yield this.audioSource.format;return connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Binary,"audio",this.privRequestSession.requestId,"audio/x-wav",format.header))}))}connectImpl(){return this.privConnectionPromise?this.privConnectionPromise.then((connection=>connection.state()===IConnection.e.Disconnected?(this.privConnectionId=null,this.privConnectionPromise=null,this.privServiceHasSentMessage=!1,this.connectImpl()):this.privConnectionPromise),(error=>(this.privConnectionId=null,this.privConnectionPromise=null,this.privServiceHasSentMessage=!1,this.connectImpl()))):(this.privConnectionPromise=this.retryableConnect(),this.privConnectionPromise.catch((()=>{})),void 0!==this.postConnectImplOverride?this.postConnectImplOverride(this.privConnectionPromise):this.privConnectionPromise)}fetchConnection(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){return this.privConnectionConfigurationPromise?this.privConnectionConfigurationPromise.then((connection=>connection.state()===IConnection.e.Disconnected?(this.privConnectionId=null,this.privConnectionConfigurationPromise=null,this.privServiceHasSentMessage=!1,this.fetchConnection()):this.privConnectionConfigurationPromise),(error=>(this.privConnectionId=null,this.privConnectionConfigurationPromise=null,this.privServiceHasSentMessage=!1,this.fetchConnection()))):(this.privConnectionConfigurationPromise=this.configureConnection(),yield this.privConnectionConfigurationPromise)}))}sendAudio(audioStreamNode){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const audioFormat=yield this.audioSource.format;let nextSendTime=Date.now();const fastLaneSizeMs=this.privRecognizerConfig.parameters.getProperty("SPEECH-TransmitLengthBeforThrottleMs","5000"),maxSendUnthrottledBytes=audioFormat.avgBytesPerSec/1e3*parseInt(fastLaneSizeMs,10),startRecogNumber=this.privRequestSession.recogNumber,readAndUploadCycle=()=>ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){if(!this.privIsDisposed&&!this.privRequestSession.isSpeechEnded&&this.privRequestSession.isRecognizing&&this.privRequestSession.recogNumber===startRecogNumber){const connection=yield this.fetchConnection(),audioStreamChunk=yield audioStreamNode.read();if(this.privRequestSession.isSpeechEnded)return;let payload,sendDelay;if(!audioStreamChunk||audioStreamChunk.isEnd?(payload=null,sendDelay=0):(payload=audioStreamChunk.buffer,this.privRequestSession.onAudioSent(payload.byteLength),sendDelay=maxSendUnthrottledBytes>=this.privRequestSession.bytesSent?0:Math.max(0,nextSendTime-Date.now())),0!==sendDelay&&(yield this.delay(sendDelay)),null!==payload&&(nextSendTime=Date.now()+1e3*payload.byteLength/(2*audioFormat.avgBytesPerSec)),!this.privIsDisposed&&!this.privRequestSession.isSpeechEnded&&this.privRequestSession.isRecognizing&&this.privRequestSession.recogNumber===startRecogNumber){if(connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Binary,"audio",this.privRequestSession.requestId,null,payload)).catch((()=>{this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch((()=>{}))})),!(null==audioStreamChunk?void 0:audioStreamChunk.isEnd))return readAndUploadCycle();this.privIsLiveAudio||this.privRequestSession.onSpeechEnded()}}}));return readAndUploadCycle()}))}retryableConnect(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){let isUnAuthorized=!1;this.privAuthFetchEventId=(0,Guid.Q)();const sessionId=this.privRequestSession.sessionId;this.privConnectionId=void 0!==sessionId?sessionId:(0,Guid.Q)(),this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId,this.privConnectionId);let lastStatusCode=0,lastReason="";for(;this.privRequestSession.numConnectionAttempts<=this.privRecognizerConfig.maxRetryCount;){const authPromise=isUnAuthorized?this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId):this.privAuthentication.fetch(this.privAuthFetchEventId),auth=yield authPromise;yield this.privRequestSession.onAuthCompleted(!1);const connection=this.privConnectionFactory.create(this.privRecognizerConfig,auth,this.privConnectionId);this.privRequestSession.listenForServiceTelemetry(connection.events),connection.events.attach((event=>{this.connectionEvents.onEvent(event)}));const response=yield connection.open();if(200===response.statusCode)return yield this.privRequestSession.onConnectionEstablishCompleted(response.statusCode),Promise.resolve(connection);1006===response.statusCode&&(isUnAuthorized=!0),lastStatusCode=response.statusCode,lastReason=response.reason,this.privRequestSession.onRetryConnection()}return yield this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode,lastReason),Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`)}))}delay(delayMs){return new Promise(((resolve,reject)=>{this.privSetTimeout(resolve,delayMs)}))}writeBufferToConsole(buffer){let out="Buffer Size: ";if(null===buffer)out+="null";else{const readView=new Uint8Array(buffer);out+=buffer.byteLength+"\r\n";for(let i=0;i<buffer.byteLength;i++)out+=readView[i].toString(16).padStart(2,"0")+" "}console.info(out)}sendFinalAudio(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const connection=yield this.fetchConnection();yield connection.send(new SpeechConnectionMessage_Internal.r(ConnectionMessage.C.Binary,"audio",this.privRequestSession.requestId,null,null))}))}configureConnection(){return ServiceRecognizerBase_awaiter(this,void 0,void 0,(function*(){const connection=yield this.connectImpl();return void 0!==this.configConnectionOverride?this.configConnectionOverride(connection):(yield this.sendSpeechServiceConfig(connection,this.privRequestSession,this.privRecognizerConfig.SpeechServiceConfig.serialize()),yield this.sendPrePayloadJSON(connection),connection)}))}}ServiceRecognizerBase.telemetryDataEnabled=!0;class SpeechHypothesis{constructor(json){this.privSpeechHypothesis=JSON.parse(json)}static fromJSON(json){return new SpeechHypothesis(json)}get Text(){return this.privSpeechHypothesis.Text}get Offset(){return this.privSpeechHypothesis.Offset}get Duration(){return this.privSpeechHypothesis.Duration}get Language(){return void 0===this.privSpeechHypothesis.PrimaryLanguage?void 0:this.privSpeechHypothesis.PrimaryLanguage.Language}get LanguageDetectionConfidence(){return void 0===this.privSpeechHypothesis.PrimaryLanguage?void 0:this.privSpeechHypothesis.PrimaryLanguage.Confidence}get SpeakerId(){return this.privSpeechHypothesis.SpeakerId}}!function(SynthesisStatus){SynthesisStatus[SynthesisStatus.Success=0]="Success",SynthesisStatus[SynthesisStatus.SynthesisEnd=1]="SynthesisEnd",SynthesisStatus[SynthesisStatus.Error=2]="Error"}(SynthesisStatus||(SynthesisStatus={})),function(RecognitionStatus){RecognitionStatus[RecognitionStatus.Success=0]="Success",RecognitionStatus[RecognitionStatus.NoMatch=1]="NoMatch",RecognitionStatus[RecognitionStatus.InitialSilenceTimeout=2]="InitialSilenceTimeout",RecognitionStatus[RecognitionStatus.BabbleTimeout=3]="BabbleTimeout",RecognitionStatus[RecognitionStatus.Error=4]="Error",RecognitionStatus[RecognitionStatus.EndOfDictation=5]="EndOfDictation",RecognitionStatus[RecognitionStatus.TooManyRequests=6]="TooManyRequests",RecognitionStatus[RecognitionStatus.BadRequest=7]="BadRequest",RecognitionStatus[RecognitionStatus.Forbidden=8]="Forbidden"}(RecognitionStatus||(RecognitionStatus={}));class SimpleSpeechPhrase{constructor(json){this.privSimpleSpeechPhrase=JSON.parse(json),this.privSimpleSpeechPhrase.RecognitionStatus=RecognitionStatus[this.privSimpleSpeechPhrase.RecognitionStatus]}static fromJSON(json){return new SimpleSpeechPhrase(json)}get RecognitionStatus(){return this.privSimpleSpeechPhrase.RecognitionStatus}get DisplayText(){return this.privSimpleSpeechPhrase.DisplayText}get Offset(){return this.privSimpleSpeechPhrase.Offset}get Duration(){return this.privSimpleSpeechPhrase.Duration}get Language(){return void 0===this.privSimpleSpeechPhrase.PrimaryLanguage?void 0:this.privSimpleSpeechPhrase.PrimaryLanguage.Language}get LanguageDetectionConfidence(){return void 0===this.privSimpleSpeechPhrase.PrimaryLanguage?void 0:this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence}get SpeakerId(){return this.privSimpleSpeechPhrase.SpeakerId}}class EnumTranslation{static implTranslateRecognitionResult(recognitionStatus){let reason=ResultReason.s.Canceled;switch(recognitionStatus){case RecognitionStatus.Success:reason=ResultReason.s.RecognizedSpeech;break;case RecognitionStatus.NoMatch:case RecognitionStatus.InitialSilenceTimeout:case RecognitionStatus.BabbleTimeout:case RecognitionStatus.EndOfDictation:reason=ResultReason.s.NoMatch;break;case RecognitionStatus.Error:case RecognitionStatus.BadRequest:case RecognitionStatus.Forbidden:default:reason=ResultReason.s.Canceled}return reason}static implTranslateCancelResult(recognitionStatus){let reason=CancellationReason._.EndOfStream;switch(recognitionStatus){case RecognitionStatus.Success:case RecognitionStatus.EndOfDictation:case RecognitionStatus.NoMatch:reason=CancellationReason._.EndOfStream;break;case RecognitionStatus.InitialSilenceTimeout:case RecognitionStatus.BabbleTimeout:case RecognitionStatus.Error:case RecognitionStatus.BadRequest:case RecognitionStatus.Forbidden:default:reason=CancellationReason._.Error}return reason}static implTranslateCancelErrorCode(recognitionStatus){let reason=CancellationErrorCodes.E.NoError;switch(recognitionStatus){case RecognitionStatus.Error:reason=CancellationErrorCodes.E.ServiceError;break;case RecognitionStatus.TooManyRequests:reason=CancellationErrorCodes.E.TooManyRequests;break;case RecognitionStatus.BadRequest:reason=CancellationErrorCodes.E.BadRequestParameters;break;case RecognitionStatus.Forbidden:reason=CancellationErrorCodes.E.Forbidden;break;default:reason=CancellationErrorCodes.E.NoError}return reason}static implTranslateErrorDetails(cancellationErrorCode){let errorDetails="The speech service encountered an internal error and could not continue.";switch(cancellationErrorCode){case CancellationErrorCodes.E.Forbidden:errorDetails="The recognizer is using a free subscription that ran out of quota.";break;case CancellationErrorCodes.E.BadRequestParameters:errorDetails="Invalid parameter or unsupported audio format in the request.";break;case CancellationErrorCodes.E.TooManyRequests:errorDetails="The number of parallel requests exceeded the number of allowed concurrent transcriptions."}return errorDetails}}class DetailedSpeechPhrase{constructor(json){this.privDetailedSpeechPhrase=JSON.parse(json),this.privDetailedSpeechPhrase.RecognitionStatus=RecognitionStatus[this.privDetailedSpeechPhrase.RecognitionStatus]}static fromJSON(json){return new DetailedSpeechPhrase(json)}getJsonWithCorrectedOffsets(baseOffset){if(this.privDetailedSpeechPhrase.NBest){let firstWordOffset;for(const phrase of this.privDetailedSpeechPhrase.NBest)if(phrase.Words&&phrase.Words[0]){firstWordOffset=phrase.Words[0].Offset;break}if(firstWordOffset&&firstWordOffset<baseOffset){const offset=baseOffset-firstWordOffset;for(const details of this.privDetailedSpeechPhrase.NBest)if(details.Words)for(const word of details.Words)word.Offset+=offset}}return JSON.stringify(this.privDetailedSpeechPhrase)}get RecognitionStatus(){return this.privDetailedSpeechPhrase.RecognitionStatus}get NBest(){return this.privDetailedSpeechPhrase.NBest}get Duration(){return this.privDetailedSpeechPhrase.Duration}get Offset(){return this.privDetailedSpeechPhrase.Offset}get Language(){return void 0===this.privDetailedSpeechPhrase.PrimaryLanguage?void 0:this.privDetailedSpeechPhrase.PrimaryLanguage.Language}get LanguageDetectionConfidence(){return void 0===this.privDetailedSpeechPhrase.PrimaryLanguage?void 0:this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence}get Text(){return this.privDetailedSpeechPhrase.NBest&&this.privDetailedSpeechPhrase.NBest[0]?this.privDetailedSpeechPhrase.NBest[0].Display:this.privDetailedSpeechPhrase.DisplayText}get SpeakerId(){return this.privDetailedSpeechPhrase.SpeakerId}}var SpeechServiceRecognizer_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class SpeechServiceRecognizer extends ServiceRecognizerBase{constructor(authentication,connectionFactory,audioSource,recognizerConfig,speechRecognizer){if(super(authentication,connectionFactory,audioSource,recognizerConfig,speechRecognizer),this.privSpeechRecognizer=speechRecognizer,void 0!==recognizerConfig.autoDetectSourceLanguages){const sourceLanguages=recognizerConfig.autoDetectSourceLanguages.split(",");this.privSpeechContext.setSection("languageId",{languages:sourceLanguages,onSuccess:{action:"Recognize"},onUnknown:{action:"None"}}),this.privSpeechContext.setSection("phraseOutput",{interimResults:{resultType:"Auto"},phraseResults:{resultType:"Always"}})}}processTypeSpecificMessages(connectionMessage){return SpeechServiceRecognizer_awaiter(this,void 0,void 0,(function*(){let result;const resultProps=new PropertyCollection.O;resultProps.setProperty(PropertyId.o.SpeechServiceResponse_JsonResult,connectionMessage.textBody);let processed=!1;switch(connectionMessage.path.toLowerCase()){case"speech.hypothesis":case"speech.fragment":const hypothesis=SpeechHypothesis.fromJSON(connectionMessage.textBody),offset=hypothesis.Offset+this.privRequestSession.currentTurnAudioOffset;result=new SpeechRecognitionResult(this.privRequestSession.requestId,ResultReason.s.RecognizingSpeech,hypothesis.Text,hypothesis.Duration,offset,hypothesis.Language,hypothesis.LanguageDetectionConfidence,void 0,void 0,connectionMessage.textBody,resultProps),this.privRequestSession.onHypothesis(offset);const ev=new SpeechRecognitionEventArgs(result,hypothesis.Duration,this.privRequestSession.sessionId);if(this.privSpeechRecognizer.recognizing)try{this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer,ev)}catch(error){}processed=!0;break;case"speech.phrase":const simple=SimpleSpeechPhrase.fromJSON(connectionMessage.textBody),resultReason=EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);if(this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset+simple.Offset+simple.Duration),ResultReason.s.Canceled===resultReason){const cancelReason=EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus),cancellationErrorCode=EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);yield this.cancelRecognitionLocal(cancelReason,cancellationErrorCode,EnumTranslation.implTranslateErrorDetails(cancellationErrorCode))}else{if(!this.privRequestSession.isSpeechEnded||resultReason!==ResultReason.s.NoMatch||simple.RecognitionStatus===RecognitionStatus.InitialSilenceTimeout){if(this.privRecognizerConfig.parameters.getProperty(Exports.OutputFormatPropertyName)===OutputFormat.W[OutputFormat.W.Simple])result=new SpeechRecognitionResult(this.privRequestSession.requestId,resultReason,simple.DisplayText,simple.Duration,simple.Offset+this.privRequestSession.currentTurnAudioOffset,simple.Language,simple.LanguageDetectionConfidence,void 0,void 0,connectionMessage.textBody,resultProps);else{const detailed=DetailedSpeechPhrase.fromJSON(connectionMessage.textBody),totalOffset=detailed.Offset+this.privRequestSession.currentTurnAudioOffset,offsetCorrectedJson=detailed.getJsonWithCorrectedOffsets(totalOffset);result=new SpeechRecognitionResult(this.privRequestSession.requestId,resultReason,detailed.RecognitionStatus===RecognitionStatus.Success?detailed.NBest[0].Display:void 0,detailed.Duration,totalOffset,detailed.Language,detailed.LanguageDetectionConfidence,void 0,void 0,offsetCorrectedJson,resultProps)}const event=new SpeechRecognitionEventArgs(result,result.offset,this.privRequestSession.sessionId);if(this.privSpeechRecognizer.recognized)try{this.privSpeechRecognizer.recognized(this.privSpeechRecognizer,event)}catch(error){}}if(this.privSuccessCallback){try{this.privSuccessCallback(result)}catch(e){this.privErrorCallback&&this.privErrorCallback(e)}this.privSuccessCallback=void 0,this.privErrorCallback=void 0}}processed=!0}return processed}))}cancelRecognition(sessionId,requestId,cancellationReason,errorCode,error){const properties=new PropertyCollection.O;if(properties.setProperty(Exports.CancellationErrorCodePropertyName,CancellationErrorCodes.E[errorCode]),this.privSpeechRecognizer.canceled){const cancelEvent=new SpeechRecognitionCanceledEventArgs(cancellationReason,error,errorCode,void 0,sessionId);try{this.privSpeechRecognizer.canceled(this.privSpeechRecognizer,cancelEvent)}catch(_a){}}if(this.privSuccessCallback){const result=new SpeechRecognitionResult(requestId,ResultReason.s.Canceled,void 0,void 0,void 0,void 0,void 0,void 0,error,void 0,properties);try{this.privSuccessCallback(result),this.privSuccessCallback=void 0}catch(_b){}}}}var Contracts=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js"),CognitiveSubscriptionKeyAuthentication=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js"),CognitiveTokenAuthentication=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js"),AudioConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js"),Recognizer_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class Recognizer{constructor(audioConfig,properties,connectionFactory){this.audioConfig=void 0!==audioConfig?audioConfig:AudioConfig.rU.fromDefaultMicrophoneInput(),this.privDisposed=!1,this.privProperties=properties.clone(),this.privConnectionFactory=connectionFactory,this.implCommonRecognizerSetup()}close(cb,errorCb){Contracts.a.throwIfDisposed(this.privDisposed),(0,common_Promise.Kb)(this.dispose(!0),cb,errorCb)}get internalData(){return this.privReco}dispose(disposing){return Recognizer_awaiter(this,void 0,void 0,(function*(){this.privDisposed||(this.privDisposed=!0,disposing&&this.privReco&&(yield this.privReco.audioSource.turnOff(),yield this.privReco.dispose()))}))}static get telemetryEnabled(){return ServiceRecognizerBase.telemetryDataEnabled}static enableTelemetry(enabled){ServiceRecognizerBase.telemetryDataEnabled=enabled}implCommonRecognizerSetup(){let osPlatform="undefined"!=typeof window?"Browser":"Node",osName="unknown",osVersion="unknown";"undefined"!=typeof navigator&&(osPlatform=osPlatform+"/"+navigator.platform,osName=navigator.userAgent,osVersion=navigator.appVersion);const recognizerConfig=this.createRecognizerConfig(new RecognizerConfig.pu(new RecognizerConfig._y(new RecognizerConfig.OS(osPlatform,osName,osVersion))));this.privReco=this.createServiceRecognizer(Recognizer.getAuthFromProperties(this.privProperties),this.privConnectionFactory,this.audioConfig,recognizerConfig)}recognizeOnceAsyncImpl(recognitionMode){return Recognizer_awaiter(this,void 0,void 0,(function*(){Contracts.a.throwIfDisposed(this.privDisposed);const ret=new common_Promise.BH;yield this.implRecognizerStop(),yield this.privReco.recognize(recognitionMode,ret.resolve,ret.reject);const result=yield ret.promise;return yield this.implRecognizerStop(),result}))}startContinuousRecognitionAsyncImpl(recognitionMode){return Recognizer_awaiter(this,void 0,void 0,(function*(){Contracts.a.throwIfDisposed(this.privDisposed),yield this.implRecognizerStop(),yield this.privReco.recognize(recognitionMode,void 0,void 0)}))}stopContinuousRecognitionAsyncImpl(){return Recognizer_awaiter(this,void 0,void 0,(function*(){Contracts.a.throwIfDisposed(this.privDisposed),yield this.implRecognizerStop()}))}implRecognizerStop(){return Recognizer_awaiter(this,void 0,void 0,(function*(){this.privReco&&(yield this.privReco.stopRecognizing())}))}static getAuthFromProperties(properties){const subscriptionKey=properties.getProperty(PropertyId.o.SpeechServiceConnection_Key,void 0);return subscriptionKey&&""!==subscriptionKey?new CognitiveSubscriptionKeyAuthentication.U(subscriptionKey):new CognitiveTokenAuthentication.w((authFetchEventId=>{const authorizationToken=properties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token,void 0);return Promise.resolve(authorizationToken)}),(authFetchEventId=>{const authorizationToken=properties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token,void 0);return Promise.resolve(authorizationToken)}))}}var SpeechRecognizer_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class SpeechRecognizer extends Recognizer{constructor(speechConfig,audioConfig){const speechConfigImpl=speechConfig;Contracts.a.throwIfNull(speechConfigImpl,"speechConfig"),Contracts.a.throwIfNullOrWhitespace(speechConfigImpl.properties.getProperty(PropertyId.o.SpeechServiceConnection_RecoLanguage),PropertyId.o[PropertyId.o.SpeechServiceConnection_RecoLanguage]),super(audioConfig,speechConfigImpl.properties,new SpeechConnectionFactory),this.privDisposedRecognizer=!1}static FromConfig(speechConfig,autoDetectSourceLanguageConfig,audioConfig){const speechConfigImpl=speechConfig;autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);return new SpeechRecognizer(speechConfig,audioConfig)}get endpointId(){return Contracts.a.throwIfDisposed(this.privDisposedRecognizer),this.properties.getProperty(PropertyId.o.SpeechServiceConnection_EndpointId,"00000000-0000-0000-0000-000000000000")}get authorizationToken(){return this.properties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token)}set authorizationToken(token){Contracts.a.throwIfNullOrWhitespace(token,"token"),this.properties.setProperty(PropertyId.o.SpeechServiceAuthorization_Token,token)}get speechRecognitionLanguage(){return Contracts.a.throwIfDisposed(this.privDisposedRecognizer),this.properties.getProperty(PropertyId.o.SpeechServiceConnection_RecoLanguage)}get outputFormat(){return Contracts.a.throwIfDisposed(this.privDisposedRecognizer),this.properties.getProperty(Exports.OutputFormatPropertyName,OutputFormat.W[OutputFormat.W.Simple])===OutputFormat.W[OutputFormat.W.Simple]?OutputFormat.W.Simple:OutputFormat.W.Detailed}get properties(){return this.privProperties}recognizeOnceAsync(cb,err){(0,common_Promise.Kb)(this.recognizeOnceAsyncImpl(RecognizerConfig.jf.Interactive),cb,err)}startContinuousRecognitionAsync(cb,err){(0,common_Promise.Kb)(this.startContinuousRecognitionAsyncImpl(RecognizerConfig.jf.Conversation),cb,err)}stopContinuousRecognitionAsync(cb,err){(0,common_Promise.Kb)(this.stopContinuousRecognitionAsyncImpl(),cb,err)}startKeywordRecognitionAsync(model,cb,err){Contracts.a.throwIfNull(model,"model"),err&&err("Not yet implemented.")}stopKeywordRecognitionAsync(cb,err){cb&&cb()}close(cb,errorCb){Contracts.a.throwIfDisposed(this.privDisposedRecognizer),(0,common_Promise.Kb)(this.dispose(!0),cb,errorCb)}dispose(disposing){const _super=Object.create(null,{dispose:{get:()=>super.dispose}});return SpeechRecognizer_awaiter(this,void 0,void 0,(function*(){this.privDisposedRecognizer||(disposing&&(this.privDisposedRecognizer=!0,yield this.implRecognizerStop()),yield _super.dispose.call(this,disposing))}))}createRecognizerConfig(speechConfig){return new RecognizerConfig.Xj(speechConfig,this.properties)}createServiceRecognizer(authentication,connectionFactory,audioConfig,recognizerConfig){return new SpeechServiceRecognizer(authentication,connectionFactory,audioConfig,recognizerConfig,this)}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";var SpeechSynthesisOutputFormat;__webpack_require__.d(__webpack_exports__,{Y:()=>SpeechSynthesisOutputFormat}),function(SpeechSynthesisOutputFormat){SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw=0]="Raw8Khz8BitMonoMULaw",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren=1]="Riff16Khz16KbpsMonoSiren",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren=2]="Audio16Khz16KbpsMonoSiren",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3=3]="Audio16Khz32KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3=4]="Audio16Khz128KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3=5]="Audio16Khz64KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3=6]="Audio24Khz48KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3=7]="Audio24Khz96KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3=8]="Audio24Khz160KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk=9]="Raw16Khz16BitMonoTrueSilk",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm=10]="Riff16Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm=11]="Riff8Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm=12]="Riff24Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw=13]="Riff8Khz8BitMonoMULaw",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm=14]="Raw16Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm=15]="Raw24Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm=16]="Raw8Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus=17]="Ogg16Khz16BitMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus=18]="Ogg24Khz16BitMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm=19]="Raw48Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm=20]="Riff48Khz16BitMonoPcm",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3=21]="Audio48Khz96KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3=22]="Audio48Khz192KBitRateMonoMp3",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus=23]="Ogg48Khz16BitMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus=24]="Webm16Khz16BitMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus=25]="Webm24Khz16BitMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk=26]="Raw24Khz16BitMonoTrueSilk",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw=27]="Raw8Khz8BitMonoALaw",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw=28]="Riff8Khz8BitMonoALaw",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus=29]="Webm24Khz16Bit24KbpsMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus=30]="Audio16Khz16Bit32KbpsMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus=31]="Audio24Khz16Bit48KbpsMonoOpus",SpeechSynthesisOutputFormat[SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus=32]="Audio24Khz16Bit24KbpsMonoOpus"}(SpeechSynthesisOutputFormat||(SpeechSynthesisOutputFormat={}))},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesizer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{a:()=>SpeechSynthesizer});var WebsocketConnection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/WebsocketConnection.js"),ProxyInfo=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.browser/ProxyInfo.js"),PropertyId=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyId.js"),ConnectionFactoryBase=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/ConnectionFactoryBase.js"),WebsocketMessageFormatter=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/WebsocketMessageFormatter.js"),HeaderNames=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/HeaderNames.js"),QueryParameterNames=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/QueryParameterNames.js");class SpeechSynthesisConnectionFactory{constructor(){this.synthesisUri="/cognitiveservices/websocket/v1",this.create=(config,authInfo,connectionId)=>{let endpoint=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint,void 0);const region=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Region,void 0),hostSuffix=ConnectionFactoryBase._.getHostSuffix(region),endpointId=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_EndpointId,void 0),hostPrefix=void 0===endpointId?"tts":"voice",host=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Host,"wss://"+region+"."+hostPrefix+".speech"+hostSuffix);endpoint||(endpoint=host+this.synthesisUri);const headers={};void 0!==authInfo.token&&""!==authInfo.token&&(headers[authInfo.headerName]=authInfo.token),headers[HeaderNames.S.ConnectionId]=connectionId,void 0!==endpointId&&(headers[QueryParameterNames.o.CustomVoiceDeploymentId]=endpointId),config.parameters.setProperty(PropertyId.o.SpeechServiceConnection_Url,endpoint);const enableCompression="true"===config.parameters.getProperty("SPEECH-EnableWebsocketCompression","false");return new WebsocketConnection.i(endpoint,{},headers,new WebsocketMessageFormatter.D,ProxyInfo.i.fromParameters(config.parameters),enableCompression,connectionId)}}}var SynthesisServiceType,Exports=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/Exports.js"),RecognizerConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/RecognizerConfig.js");!function(SynthesisServiceType){SynthesisServiceType[SynthesisServiceType.Standard=0]="Standard",SynthesisServiceType[SynthesisServiceType.Custom=1]="Custom"}(SynthesisServiceType||(SynthesisServiceType={}));class SynthesizerConfig{constructor(speechServiceConfig,parameters){this.privSynthesisServiceType=SynthesisServiceType.Standard,this.privSpeechServiceConfig=speechServiceConfig||new RecognizerConfig.pu(new RecognizerConfig._y(null)),this.privParameters=parameters}get parameters(){return this.privParameters}get synthesisServiceType(){return this.privSynthesisServiceType}set synthesisServiceType(value){this.privSynthesisServiceType=value}get SpeechServiceConfig(){return this.privSpeechServiceConfig}}var SynthesisAdapterBase=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/SynthesisAdapterBase.js"),CognitiveSubscriptionKeyAuthentication=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveSubscriptionKeyAuthentication.js"),CognitiveTokenAuthentication=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common.speech/CognitiveTokenAuthentication.js");class RestConfigBase{static get requestOptions(){return RestConfigBase.privDefaultRequestOptions}static get configParams(){return RestConfigBase.privDefaultParams}static get restErrors(){return RestConfigBase.privRestErrors}}RestConfigBase.privDefaultRequestOptions={headers:{Accept:"application/json"},ignoreCache:!1,timeout:1e4},RestConfigBase.privRestErrors={authInvalidSubscriptionKey:"You must specify either an authentication token to use, or a Cognitive Speech subscription key.",authInvalidSubscriptionRegion:"You must specify the Cognitive Speech region to use.",invalidArgs:"Required input not found: {arg}.",invalidCreateJoinConversationResponse:"Creating/Joining conversation failed with HTTP {status}.",invalidParticipantRequest:"The requested participant was not found.",permissionDeniedConnect:"Required credentials not found.",permissionDeniedConversation:"Invalid operation: only the host can {command} the conversation.",permissionDeniedParticipant:"Invalid operation: only the host can {command} a participant.",permissionDeniedSend:"Invalid operation: the conversation is not in a connected state.",permissionDeniedStart:"Invalid operation: there is already an active conversation."},RestConfigBase.privDefaultParams={apiVersion:"api-version",authorization:"Authorization",clientAppId:"X-ClientAppId",contentTypeKey:"Content-Type",correlationId:"X-CorrelationId",languageCode:"language",nickname:"nickname",profanity:"profanity",requestId:"X-RequestId",roomId:"roomid",sessionToken:"token",subscriptionKey:"Ocp-Apim-Subscription-Key",subscriptionRegion:"Ocp-Apim-Subscription-Region",token:"X-CapitoToken"};var RestRequestType,common_Error=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Error.js"),common_Promise=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Promise.js"),browser=__webpack_require__("./node_modules/bent/src/browser.js"),browser_default=__webpack_require__.n(browser),__awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};!function(RestRequestType){RestRequestType.Get="GET",RestRequestType.Post="POST",RestRequestType.Delete="DELETE",RestRequestType.File="file"}(RestRequestType||(RestRequestType={}));class RestMessageAdapter{constructor(configParams){if(!configParams)throw new common_Error.Do("configParams");this.privHeaders=configParams.headers,this.privIgnoreCache=configParams.ignoreCache}static extractHeaderValue(headerKey,headers){let headerValue="";try{const arr=headers.trim().split(/[\r\n]+/),headerMap={};arr.forEach((line=>{const parts=line.split(": "),header=parts.shift().toLowerCase(),value=parts.join(": ");headerMap[header]=value})),headerValue=headerMap[headerKey.toLowerCase()]}catch(e){}return headerValue}set options(configParams){this.privHeaders=configParams.headers,this.privIgnoreCache=configParams.ignoreCache}setHeaders(key,value){this.privHeaders[key]=value}request(method,uri,queryParams={},body=null,binaryBody=null){const responseReceivedDeferral=new common_Promise.BH,requestCommand=method===RestRequestType.File?"POST":method,handleRestResponse=(data,j={})=>{const d=data;return{data:JSON.stringify(j),headers:JSON.stringify(data.headers),json:j,ok:data.statusCode>=200&&data.statusCode<300,status:data.statusCode,statusText:j.error?j.error.message:d.statusText?d.statusText:d.statusMessage}},send=postData=>{browser_default()(uri,requestCommand,this.privHeaders,200,201,202,204,400,401,402,403,404)(""===this.queryParams(queryParams)?"":"?"+this.queryParams(queryParams),postData).then((data=>__awaiter(this,void 0,void 0,(function*(){if(method===RestRequestType.Delete||204===data.statusCode)responseReceivedDeferral.resolve(handleRestResponse(data));else try{const j=yield data.json();responseReceivedDeferral.resolve(handleRestResponse(data,j))}catch(_a){responseReceivedDeferral.resolve(handleRestResponse(data))}})))).catch((error=>{responseReceivedDeferral.reject(error)}))};if(this.privIgnoreCache&&(this.privHeaders["Cache-Control"]="no-cache"),method===RestRequestType.File&&binaryBody){const contentType="multipart/form-data";this.privHeaders["content-type"]=contentType,this.privHeaders["Content-Type"]=contentType,"undefined"!=typeof Blob&&binaryBody instanceof Blob?(blob=>{const reader=new FileReader;return reader.readAsArrayBuffer(blob),new Promise((resolve=>{reader.onloadend=()=>{resolve(reader.result)}}))})(binaryBody).then((res=>{send(res)})).catch((error=>{responseReceivedDeferral.reject(error)})):send(binaryBody)}else method===RestRequestType.Post&&body&&(this.privHeaders["content-type"]="application/json",this.privHeaders["Content-Type"]="application/json"),send(body);return responseReceivedDeferral.promise}withQuery(url,params={}){const queryString=this.queryParams(params);return queryString?url+(-1===url.indexOf("?")?"?":"&")+queryString:url}queryParams(params={}){return Object.keys(params).map((k=>encodeURIComponent(k)+"="+encodeURIComponent(params[k]))).join("&")}}class SynthesisRestAdapter{constructor(config){let endpoint=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Endpoint,void 0);if(!endpoint){const region=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Region,"westus"),hostSuffix=ConnectionFactoryBase._.getHostSuffix(region);endpoint=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Host,`https://${region}.tts.speech${hostSuffix}`)}this.privUri=`${endpoint}/cognitiveservices/voices/list`;const options=RestConfigBase.requestOptions;options.headers[RestConfigBase.configParams.subscriptionKey]=config.parameters.getProperty(PropertyId.o.SpeechServiceConnection_Key,void 0),this.privRestAdapter=new RestMessageAdapter(options)}getVoicesList(connectionId){return this.privRestAdapter.setHeaders(HeaderNames.S.ConnectionId,connectionId),this.privRestAdapter.request(RestRequestType.Get,this.privUri)}}var SynthesisVoiceGender,SynthesisVoiceType,Queue=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Queue.js"),Guid=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/common/Guid.js"),AudioFileWriter=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioFileWriter.js"),AudioOutputFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputFormat.js"),AudioOutputStream=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioOutputStream.js"),Contracts=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Contracts.js"),AudioConfig=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/AudioConfig.js"),SpeechSynthesisOutputFormat=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SpeechSynthesisOutputFormat.js"),PushAudioOutputStreamCallback=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/Audio/PushAudioOutputStreamCallback.js"),SynthesisResult=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js"),ResultReason=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/ResultReason.js"),PropertyCollection=__webpack_require__("./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/PropertyCollection.js");!function(SynthesisVoiceGender){SynthesisVoiceGender[SynthesisVoiceGender.Unknown=0]="Unknown",SynthesisVoiceGender[SynthesisVoiceGender.Female=1]="Female",SynthesisVoiceGender[SynthesisVoiceGender.Male=2]="Male"}(SynthesisVoiceGender||(SynthesisVoiceGender={})),function(SynthesisVoiceType){SynthesisVoiceType[SynthesisVoiceType.OnlineNeural=1]="OnlineNeural",SynthesisVoiceType[SynthesisVoiceType.OnlineStandard=2]="OnlineStandard",SynthesisVoiceType[SynthesisVoiceType.OfflineNeural=3]="OfflineNeural",SynthesisVoiceType[SynthesisVoiceType.OfflineStandard=4]="OfflineStandard"}(SynthesisVoiceType||(SynthesisVoiceType={}));class VoiceInfo{constructor(json){if(this.privStyleList=[],this.privVoicePath="",json&&(this.privName=json.Name,this.privLocale=json.Locale,this.privShortName=json.ShortName,this.privLocalName=json.LocalName,this.privVoiceType=json.VoiceType.endsWith("Standard")?SynthesisVoiceType.OnlineStandard:SynthesisVoiceType.OnlineNeural,this.privGender="Male"===json.Gender?SynthesisVoiceGender.Male:"Female"===json.Gender?SynthesisVoiceGender.Female:SynthesisVoiceGender.Unknown,json.StyleList&&Array.isArray(json.StyleList)))for(const style of json.StyleList)this.privStyleList.push(style)}get name(){return this.privName}get locale(){return this.privLocale}get shortName(){return this.privShortName}get localName(){return this.privLocalName}get gender(){return this.privGender}get voiceType(){return this.privVoiceType}get styleList(){return this.privStyleList}get voicePath(){return this.privVoicePath}}class SynthesisVoicesResult extends SynthesisResult.A{constructor(requestId,json){if(Array.isArray(json)){super(requestId,ResultReason.s.VoicesListRetrieved,void 0,new PropertyCollection.O),this.privVoices=[];for(const item of json)this.privVoices.push(new VoiceInfo(item))}else super(requestId,ResultReason.s.Canceled,json.errorDetails?json.errorDetails:"Error information unavailable",new PropertyCollection.O)}get voices(){return this.privVoices}}var SpeechSynthesizer_awaiter=function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))};class SpeechSynthesizer{constructor(speechConfig,audioConfig){const speechConfigImpl=speechConfig;Contracts.a.throwIfNull(speechConfigImpl,"speechConfig"),null!==audioConfig&&(this.audioConfig=void 0===audioConfig?"undefined"==typeof window?void 0:AudioConfig.rU.fromDefaultSpeakerOutput():audioConfig),this.privProperties=speechConfigImpl.properties.clone(),this.privDisposed=!1,this.privSynthesizing=!1,this.privConnectionFactory=new SpeechSynthesisConnectionFactory,this.synthesisRequestQueue=new Queue.c,this.implCommonSynthesizeSetup()}get authorizationToken(){return this.properties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token)}set authorizationToken(token){Contracts.a.throwIfNullOrWhitespace(token,"token"),this.properties.setProperty(PropertyId.o.SpeechServiceAuthorization_Token,token)}get properties(){return this.privProperties}get autoDetectSourceLanguage(){return this.properties.getProperty(PropertyId.o.SpeechServiceConnection_AutoDetectSourceLanguages)===Exports.AutoDetectSourceLanguagesOpenRangeOptionName}static FromConfig(speechConfig,autoDetectSourceLanguageConfig,audioConfig){const speechConfigImpl=speechConfig;return autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties),new SpeechSynthesizer(speechConfig,audioConfig)}buildSsml(text){const languageToDefaultVoice={"af-ZA":"af-ZA-AdriNeural","am-ET":"am-ET-AmehaNeural","ar-AE":"ar-AE-FatimaNeural","ar-BH":"ar-BH-AliNeural","ar-DZ":"ar-DZ-AminaNeural","ar-EG":"ar-EG-SalmaNeural","ar-IQ":"ar-IQ-BasselNeural","ar-JO":"ar-JO-SanaNeural","ar-KW":"ar-KW-FahedNeural","ar-LY":"ar-LY-ImanNeural","ar-MA":"ar-MA-JamalNeural","ar-QA":"ar-QA-AmalNeural","ar-SA":"ar-SA-HamedNeural","ar-SY":"ar-SY-AmanyNeural","ar-TN":"ar-TN-HediNeural","ar-YE":"ar-YE-MaryamNeural","bg-BG":"bg-BG-BorislavNeural","bn-BD":"bn-BD-NabanitaNeural","ca-ES":"ca-ES-JoanaNeural","cs-CZ":"cs-CZ-AntoninNeural","cy-GB":"cy-GB-AledNeural","da-DK":"da-DK-ChristelNeural","de-AT":"de-AT-IngridNeural","de-CH":"de-CH-JanNeural","de-DE":"de-DE-KatjaNeural","el-GR":"el-GR-AthinaNeural","en-AU":"en-AU-NatashaNeural","en-CA":"en-CA-ClaraNeural","en-GB":"en-GB-LibbyNeural","en-HK":"en-HK-SamNeural","en-IE":"en-IE-ConnorNeural","en-IN":"en-IN-NeerjaNeural","en-KE":"en-KE-AsiliaNeural","en-NG":"en-NG-AbeoNeural","en-NZ":"en-NZ-MitchellNeural","en-PH":"en-PH-JamesNeural","en-SG":"en-SG-LunaNeural","en-TZ":"en-TZ-ElimuNeural","en-US":"en-US-JennyNeural","en-ZA":"en-ZA-LeahNeural","es-AR":"es-AR-ElenaNeural","es-BO":"es-BO-MarceloNeural","es-CL":"es-CL-CatalinaNeural","es-CO":"es-CO-GonzaloNeural","es-CR":"es-CR-JuanNeural","es-CU":"es-CU-BelkysNeural","es-DO":"es-DO-EmilioNeural","es-EC":"es-EC-AndreaNeural","es-ES":"es-ES-AlvaroNeural","es-GQ":"es-GQ-JavierNeural","es-GT":"es-GT-AndresNeural","es-HN":"es-HN-CarlosNeural","es-MX":"es-MX-DaliaNeural","es-NI":"es-NI-FedericoNeural","es-PA":"es-PA-MargaritaNeural","es-PE":"es-PE-AlexNeural","es-PR":"es-PR-KarinaNeural","es-PY":"es-PY-MarioNeural","es-SV":"es-SV-LorenaNeural","es-US":"es-US-AlonsoNeural","es-UY":"es-UY-MateoNeural","es-VE":"es-VE-PaolaNeural","et-EE":"et-EE-AnuNeural","fa-IR":"fa-IR-DilaraNeural","fi-FI":"fi-FI-SelmaNeural","fil-PH":"fil-PH-AngeloNeural","fr-BE":"fr-BE-CharlineNeural","fr-CA":"fr-CA-SylvieNeural","fr-CH":"fr-CH-ArianeNeural","fr-FR":"fr-FR-DeniseNeural","ga-IE":"ga-IE-ColmNeural","gl-ES":"gl-ES-RoiNeural","gu-IN":"gu-IN-DhwaniNeural","he-IL":"he-IL-AvriNeural","hi-IN":"hi-IN-MadhurNeural","hr-HR":"hr-HR-GabrijelaNeural","hu-HU":"hu-HU-NoemiNeural","id-ID":"id-ID-ArdiNeural","it-IT":"it-IT-IsabellaNeural","ja-JP":"ja-JP-NanamiNeural","jv-ID":"jv-ID-DimasNeural","km-KH":"km-KH-PisethNeural","ko-KR":"ko-KR-SunHiNeural","lt-LT":"lt-LT-LeonasNeural","lv-LV":"lv-LV-EveritaNeural","mr-IN":"mr-IN-AarohiNeural","ms-MY":"ms-MY-OsmanNeural","mt-MT":"mt-MT-GraceNeural","my-MM":"my-MM-NilarNeural","nb-NO":"nb-NO-PernilleNeural","nl-BE":"nl-BE-ArnaudNeural","nl-NL":"nl-NL-ColetteNeural","pl-PL":"pl-PL-AgnieszkaNeural","pt-BR":"pt-BR-FranciscaNeural","pt-PT":"pt-PT-DuarteNeural","ro-RO":"ro-RO-AlinaNeural","ru-RU":"ru-RU-SvetlanaNeural","sk-SK":"sk-SK-LukasNeural","sl-SI":"sl-SI-PetraNeural","so-SO":"so-SO-MuuseNeural","su-ID":"su-ID-JajangNeural","sv-SE":"sv-SE-SofieNeural","sw-KE":"sw-KE-RafikiNeural","sw-TZ":"sw-TZ-DaudiNeural","ta-IN":"ta-IN-PallaviNeural","ta-LK":"ta-LK-KumarNeural","ta-SG":"ta-SG-AnbuNeural","te-IN":"te-IN-MohanNeural","th-TH":"th-TH-PremwadeeNeural","tr-TR":"tr-TR-AhmetNeural","uk-UA":"uk-UA-OstapNeural","ur-IN":"ur-IN-GulNeural","ur-PK":"ur-PK-AsadNeural","uz-UZ":"uz-UZ-MadinaNeural","vi-VN":"vi-VN-HoaiMyNeural","zh-CN":"zh-CN-XiaoxiaoNeural","zh-HK":"zh-HK-HiuMaanNeural","zh-TW":"zh-TW-HsiaoChenNeural","zu-ZA":"zu-ZA-ThandoNeural"};let language=this.properties.getProperty(PropertyId.o.SpeechServiceConnection_SynthLanguage,"en-US"),voice=this.properties.getProperty(PropertyId.o.SpeechServiceConnection_SynthVoice,""),ssml=SpeechSynthesizer.XMLEncode(text);return this.autoDetectSourceLanguage?language="en-US":voice=voice||languageToDefaultVoice[language],voice&&(ssml=`<voice name='${voice}'>${ssml}</voice>`),ssml=`<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`,ssml}speakTextAsync(text,cb,err,stream){this.speakImpl(text,!1,cb,err,stream)}speakSsmlAsync(ssml,cb,err,stream){this.speakImpl(ssml,!0,cb,err,stream)}getVoicesAsync(locale=""){return SpeechSynthesizer_awaiter(this,void 0,void 0,(function*(){return this.getVoices(locale)}))}close(cb,err){Contracts.a.throwIfDisposed(this.privDisposed),(0,common_Promise.Kb)(this.dispose(!0),cb,err)}get internalData(){return this.privAdapter}dispose(disposing){return SpeechSynthesizer_awaiter(this,void 0,void 0,(function*(){this.privDisposed||(disposing&&this.privAdapter&&(yield this.privAdapter.dispose()),this.privDisposed=!0)}))}createSynthesizerConfig(speechConfig){return new SynthesizerConfig(speechConfig,this.privProperties)}createSynthesisAdapter(authentication,connectionFactory,audioConfig,synthesizerConfig){return new SynthesisAdapterBase.E(authentication,connectionFactory,synthesizerConfig,this,this.audioConfig)}implCommonSynthesizeSetup(){let osPlatform="undefined"!=typeof window?"Browser":"Node",osName="unknown",osVersion="unknown";"undefined"!=typeof navigator&&(osPlatform=osPlatform+"/"+navigator.platform,osName=navigator.userAgent,osVersion=navigator.appVersion);const synthesizerConfig=this.createSynthesizerConfig(new RecognizerConfig.pu(new RecognizerConfig._y(new RecognizerConfig.OS(osPlatform,osName,osVersion)))),subscriptionKey=this.privProperties.getProperty(PropertyId.o.SpeechServiceConnection_Key,void 0),authentication=subscriptionKey&&""!==subscriptionKey?new CognitiveSubscriptionKeyAuthentication.U(subscriptionKey):new CognitiveTokenAuthentication.w((authFetchEventId=>{const authorizationToken=this.privProperties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token,void 0);return Promise.resolve(authorizationToken)}),(authFetchEventId=>{const authorizationToken=this.privProperties.getProperty(PropertyId.o.SpeechServiceAuthorization_Token,void 0);return Promise.resolve(authorizationToken)}));this.privAdapter=this.createSynthesisAdapter(authentication,this.privConnectionFactory,this.audioConfig,synthesizerConfig),this.privAdapter.audioOutputFormat=AudioOutputFormat.d.fromSpeechSynthesisOutputFormat(SpeechSynthesisOutputFormat.Y[this.properties.getProperty(PropertyId.o.SpeechServiceConnection_SynthOutputFormat,void 0)]),this.privRestAdapter=new SynthesisRestAdapter(synthesizerConfig)}speakImpl(text,IsSsml,cb,err,dataStream){try{Contracts.a.throwIfDisposed(this.privDisposed);const requestId=(0,Guid.Q)();let audioDestination;audioDestination=dataStream instanceof PushAudioOutputStreamCallback.y?new AudioOutputStream.KS(dataStream):dataStream instanceof AudioOutputStream.Ao?dataStream:void 0!==dataStream?new AudioFileWriter.O(dataStream):void 0,this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId,text,IsSsml,(e=>{if(this.privSynthesizing=!1,cb)try{cb(e)}catch(e){err&&err(e)}cb=void 0,this.adapterSpeak().catch((()=>{}))}),(e=>{err&&err(e)}),audioDestination)),this.adapterSpeak().catch((()=>{}))}catch(error){if(err)if(error instanceof Error){const typedError=error;err(typedError.name+": "+typedError.message)}else err(error);this.dispose(!0).catch((()=>{}))}}getVoices(locale){return SpeechSynthesizer_awaiter(this,void 0,void 0,(function*(){const requestId=(0,Guid.Q)(),response=yield this.privRestAdapter.getVoicesList(requestId);if(response.ok&&Array.isArray(response.json)){let json=response.json;return locale&&locale.length>0&&(json=json.filter((item=>!!item.Locale&&item.Locale.toLowerCase()===locale.toLowerCase()))),new SynthesisVoicesResult(requestId,json)}return new SynthesisVoicesResult(requestId,{errorDetails:`Error: ${response.status}: ${response.statusText}`})}))}adapterSpeak(){return SpeechSynthesizer_awaiter(this,void 0,void 0,(function*(){if(!this.privDisposed&&!this.privSynthesizing){this.privSynthesizing=!0;const request=yield this.synthesisRequestQueue.dequeue();return this.privAdapter.Speak(request.text,request.isSSML,request.requestId,request.cb,request.err,request.dataStream)}}))}static XMLEncode(text){return text.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}}class SynthesisRequest{constructor(requestId,text,isSSML,cb,err,dataStream){this.requestId=requestId,this.text=text,this.isSSML=isSSML,this.cb=cb,this.err=err,this.dataStream=dataStream}}},"./node_modules/microsoft-cognitiveservices-speech-sdk/distrib/es2015/src/sdk/SynthesisResult.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>SynthesisResult});class SynthesisResult{constructor(resultId,reason,errorDetails,properties){this.privResultId=resultId,this.privReason=reason,this.privErrorDetails=errorDetails,this.privProperties=properties}get resultId(){return this.privResultId}get reason(){return this.privReason}get errorDetails(){return this.privErrorDetails}get properties(){return this.privProperties}}},"./node_modules/querystringify/index.js":(__unused_webpack_module,exports)=>{"use strict";var has=Object.prototype.hasOwnProperty;function decode(input){try{return decodeURIComponent(input.replace(/\+/g," "))}catch(e){return null}}function encode(input){try{return encodeURIComponent(input)}catch(e){return null}}exports.stringify=function querystringify(obj,prefix){prefix=prefix||"";var value,key,pairs=[];for(key in"string"!=typeof prefix&&(prefix="?"),obj)if(has.call(obj,key)){if((value=obj[key])||null!=value&&!isNaN(value)||(value=""),key=encode(key),value=encode(value),null===key||null===value)continue;pairs.push(key+"="+value)}return pairs.length?prefix+pairs.join("&"):""},exports.parse=function querystring(query){for(var part,parser=/([^=?#&]+)=?([^&]*)/g,result={};part=parser.exec(query);){var key=decode(part[1]),value=decode(part[2]);null===key||null===value||key in result||(result[key]=value)}return result}},"./node_modules/react-i18next/dist/es/withTranslation.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>withTranslation});var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/index.js"),_useTranslation__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-i18next/dist/es/useTranslation.js"),_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react-i18next/dist/es/utils.js"),_excluded=["forwardedRef"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__.Z)(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}function withTranslation(ns){var options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function Extend(WrappedComponent){function I18nextWithTranslation(_ref){var forwardedRef=_ref.forwardedRef,rest=(0,_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__.Z)(_ref,_excluded),_useTranslation=(0,_useTranslation__WEBPACK_IMPORTED_MODULE_3__.$)(ns,_objectSpread(_objectSpread({},rest),{},{keyPrefix:options.keyPrefix})),_useTranslation2=(0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__.Z)(_useTranslation,3),t=_useTranslation2[0],i18n=_useTranslation2[1],ready=_useTranslation2[2],passDownProps=_objectSpread(_objectSpread({},rest),{},{t,i18n,tReady:ready});return options.withRef&&forwardedRef?passDownProps.ref=forwardedRef:!options.withRef&&forwardedRef&&(passDownProps.forwardedRef=forwardedRef),(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(WrappedComponent,passDownProps)}I18nextWithTranslation.displayName="withI18nextTranslation(".concat((0,_utils__WEBPACK_IMPORTED_MODULE_5__.Gf)(WrappedComponent),")"),I18nextWithTranslation.WrappedComponent=WrappedComponent;return options.withRef?(0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((function forwardRef(props,ref){return(0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(I18nextWithTranslation,Object.assign({},props,{forwardedRef:ref}))})):I18nextWithTranslation}}},"./node_modules/requires-port/index.js":module=>{"use strict";module.exports=function required(port,protocol){if(protocol=protocol.split(":")[0],!(port=+port))return!1;switch(protocol){case"http":case"ws":return 80!==port;case"https":case"wss":return 443!==port;case"ftp":return 21!==port;case"gopher":return 70!==port;case"file":return!1}return 0!==port}},"./node_modules/standardized-audio-context/build/es2019/module.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Hm:()=>audioContextConstructor});var bundle=__webpack_require__("./node_modules/automation-events/build/es5/bundle.js");const ACTIVE_AUDIO_NODE_STORE=new WeakSet,AUDIO_NODE_CONNECTIONS_STORE=new WeakMap,AUDIO_NODE_STORE=new WeakMap,AUDIO_PARAM_CONNECTIONS_STORE=new WeakMap,AUDIO_PARAM_STORE=new WeakMap,CONTEXT_STORE=new WeakMap,EVENT_LISTENERS=new WeakMap,CYCLE_COUNTERS=new WeakMap,NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS=new WeakMap,NODE_TO_PROCESSOR_MAPS=new WeakMap,handler={construct:()=>handler},IMPORT_STATEMENT_REGEX=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,splitImportStatements=(source,url)=>{const importStatements=[];let sourceWithoutImportStatements=source.replace(/^[\s]+/,""),result=sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);for(;null!==result;){const unresolvedUrl=result[1].slice(1,-1),importStatementWithResolvedUrl=result[0].replace(/([\s]+)?;?$/,"").replace(unresolvedUrl,new URL(unresolvedUrl,url).toString());importStatements.push(importStatementWithResolvedUrl),sourceWithoutImportStatements=sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/,""),result=sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX)}return[importStatements.join(";"),sourceWithoutImportStatements]},verifyParameterDescriptors=parameterDescriptors=>{if(void 0!==parameterDescriptors&&!Array.isArray(parameterDescriptors))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},verifyProcessorCtor=processorCtor=>{if(!(constructible=>{try{new new Proxy(constructible,handler)}catch{return!1}return!0})(processorCtor))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===processorCtor.prototype||"object"!=typeof processorCtor.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},getValueForKey=(map,key)=>{const value=map.get(key);if(void 0===value)throw new Error("A value with the given key could not be found.");return value},pickElementFromSet=(set,predicate)=>{const matchingElements=Array.from(set).filter(predicate);if(matchingElements.length>1)throw Error("More than one element was found.");if(0===matchingElements.length)throw Error("No element was found.");const[matchingElement]=matchingElements;return set.delete(matchingElement),matchingElement},deletePassiveInputConnectionToAudioNode=(passiveInputs,source,output,input)=>{const passiveInputConnections=getValueForKey(passiveInputs,source),matchingConnection=pickElementFromSet(passiveInputConnections,(passiveInputConnection=>passiveInputConnection[0]===output&&passiveInputConnection[1]===input));return 0===passiveInputConnections.size&&passiveInputs.delete(source),matchingConnection},getEventListenersOfAudioNode=audioNode=>getValueForKey(EVENT_LISTENERS,audioNode),setInternalStateToActive=audioNode=>{if(ACTIVE_AUDIO_NODE_STORE.has(audioNode))throw new Error("The AudioNode is already stored.");ACTIVE_AUDIO_NODE_STORE.add(audioNode),getEventListenersOfAudioNode(audioNode).forEach((eventListener=>eventListener(!0)))},isAudioWorkletNode=audioNode=>"port"in audioNode,setInternalStateToPassive=audioNode=>{if(!ACTIVE_AUDIO_NODE_STORE.has(audioNode))throw new Error("The AudioNode is not stored.");ACTIVE_AUDIO_NODE_STORE.delete(audioNode),getEventListenersOfAudioNode(audioNode).forEach((eventListener=>eventListener(!1)))},setInternalStateToPassiveWhenNecessary=(audioNode,activeInputs)=>{!isAudioWorkletNode(audioNode)&&activeInputs.every((connections=>0===connections.size))&&setInternalStateToPassive(audioNode)},DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},isOwnedByContext=(nativeAudioNode,nativeContext)=>nativeAudioNode.context===nativeContext,testAudioBufferCopyChannelMethodsOutOfBoundsSupport=nativeAudioBuffer=>{try{nativeAudioBuffer.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},createIndexSizeError=()=>new DOMException("","IndexSizeError"),wrapAudioBufferGetChannelDataMethod=audioBuffer=>{var getChannelData;audioBuffer.getChannelData=(getChannelData=audioBuffer.getChannelData,channel=>{try{return getChannelData.call(audioBuffer,channel)}catch(err){if(12===err.code)throw createIndexSizeError();throw err}})},audio_buffer_constructor_DEFAULT_OPTIONS={numberOfChannels:1},MOST_NEGATIVE_SINGLE_FLOAT=-34028234663852886e22,MOST_POSITIVE_SINGLE_FLOAT=-MOST_NEGATIVE_SINGLE_FLOAT,isActiveAudioNode=audioNode=>ACTIVE_AUDIO_NODE_STORE.has(audioNode),audio_buffer_source_node_constructor_DEFAULT_OPTIONS={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},getAudioNodeConnections=audioNode=>getValueForKey(AUDIO_NODE_CONNECTIONS_STORE,audioNode),getAudioParamConnections=audioParam=>getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE,audioParam),deactivateActiveAudioNodeInputConnections=(audioNode,trace)=>{const{activeInputs}=getAudioNodeConnections(audioNode);activeInputs.forEach((connections=>connections.forEach((([source])=>{trace.includes(audioNode)||deactivateActiveAudioNodeInputConnections(source,[...trace,audioNode])}))));const audioParams=(audioNode=>"playbackRate"in audioNode)(audioNode)?[audioNode.playbackRate]:isAudioWorkletNode(audioNode)?Array.from(audioNode.parameters.values()):(audioNode=>"frequency"in audioNode&&"gain"in audioNode)(audioNode)?[audioNode.Q,audioNode.detune,audioNode.frequency,audioNode.gain]:(audioNode=>"offset"in audioNode)(audioNode)?[audioNode.offset]:(audioNode=>!("frequency"in audioNode)&&"gain"in audioNode)(audioNode)?[audioNode.gain]:(audioNode=>"detune"in audioNode&&"frequency"in audioNode)(audioNode)?[audioNode.detune,audioNode.frequency]:(audioNode=>"pan"in audioNode)(audioNode)?[audioNode.pan]:[];for(const audioParam of audioParams){const audioParamConnections=getAudioParamConnections(audioParam);void 0!==audioParamConnections&&audioParamConnections.activeInputs.forEach((([source])=>deactivateActiveAudioNodeInputConnections(source,trace)))}isActiveAudioNode(audioNode)&&setInternalStateToPassive(audioNode)},deactivateAudioGraph=context=>{deactivateActiveAudioNodeInputConnections(context.destination,[])},isValidLatencyHint=latencyHint=>void 0===latencyHint||"number"==typeof latencyHint||"string"==typeof latencyHint&&("balanced"===latencyHint||"interactive"===latencyHint||"playback"===latencyHint),isAudioNode=audioNodeOrAudioParam=>"context"in audioNodeOrAudioParam,isAudioNodeOutputConnection=outputConnection=>isAudioNode(outputConnection[0]),insertElementInSet=(set,element,predicate,ignoreDuplicates)=>{for(const lmnt of set)if(predicate(lmnt)){if(ignoreDuplicates)return!1;throw Error("The set contains at least one similar element.")}return set.add(element),!0},addActiveInputConnectionToAudioParam=(activeInputs,source,[output,eventListener],ignoreDuplicates)=>{insertElementInSet(activeInputs,[source,output,eventListener],(activeInputConnection=>activeInputConnection[0]===source&&activeInputConnection[1]===output),ignoreDuplicates)},addPassiveInputConnectionToAudioParam=(passiveInputs,[source,output,eventListener],ignoreDuplicates)=>{const passiveInputConnections=passiveInputs.get(source);void 0===passiveInputConnections?passiveInputs.set(source,new Set([[output,eventListener]])):insertElementInSet(passiveInputConnections,[output,eventListener],(passiveInputConnection=>passiveInputConnection[0]===output),ignoreDuplicates)},isNativeAudioNodeFaker=nativeAudioNodeOrNativeAudioNodeFaker=>"inputs"in nativeAudioNodeOrNativeAudioNodeFaker,connectNativeAudioNodeToNativeAudioNode=(nativeSourceAudioNode,nativeDestinationAudioNode,output,input)=>{if(isNativeAudioNodeFaker(nativeDestinationAudioNode)){const fakeNativeDestinationAudioNode=nativeDestinationAudioNode.inputs[input];return nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode,output,0),[fakeNativeDestinationAudioNode,output,0]}return nativeSourceAudioNode.connect(nativeDestinationAudioNode,output,input),[nativeDestinationAudioNode,output,input]},deleteActiveInputConnection=(activeInputConnections,source,output)=>{for(const activeInputConnection of activeInputConnections)if(activeInputConnection[0]===source&&activeInputConnection[1]===output)return activeInputConnections.delete(activeInputConnection),activeInputConnection;return null},deleteEventListenerOfAudioNode=(audioNode,eventListener)=>{if(!getEventListenersOfAudioNode(audioNode).delete(eventListener))throw new Error("Missing the expected event listener.")},deletePassiveInputConnectionToAudioParam=(passiveInputs,source,output)=>{const passiveInputConnections=getValueForKey(passiveInputs,source),matchingConnection=pickElementFromSet(passiveInputConnections,(passiveInputConnection=>passiveInputConnection[0]===output));return 0===passiveInputConnections.size&&passiveInputs.delete(source),matchingConnection},disconnectNativeAudioNodeFromNativeAudioNode=(nativeSourceAudioNode,nativeDestinationAudioNode,output,input)=>{isNativeAudioNodeFaker(nativeDestinationAudioNode)?nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input],output,0):nativeSourceAudioNode.disconnect(nativeDestinationAudioNode,output,input)},getNativeAudioNode=audioNode=>getValueForKey(AUDIO_NODE_STORE,audioNode),getNativeAudioParam=audioParam=>getValueForKey(AUDIO_PARAM_STORE,audioParam),isPartOfACycle=audioNode=>CYCLE_COUNTERS.has(audioNode),isPassiveAudioNode=audioNode=>!ACTIVE_AUDIO_NODE_STORE.has(audioNode),testAudioNodeDisconnectMethodSupport=(nativeAudioContext,nativeAudioWorkletNodeConstructor)=>new Promise((resolve=>{if(null!==nativeAudioWorkletNodeConstructor)resolve(!0);else{const analyzer=nativeAudioContext.createScriptProcessor(256,1,1),dummy=nativeAudioContext.createGain(),ones=nativeAudioContext.createBuffer(1,2,44100),channelData=ones.getChannelData(0);channelData[0]=1,channelData[1]=1;const source=nativeAudioContext.createBufferSource();source.buffer=ones,source.loop=!0,source.connect(analyzer).connect(nativeAudioContext.destination),source.connect(dummy),source.disconnect(dummy),analyzer.onaudioprocess=event=>{const chnnlDt=event.inputBuffer.getChannelData(0);Array.prototype.some.call(chnnlDt,(sample=>1===sample))?resolve(!0):resolve(!1),source.stop(),analyzer.onaudioprocess=null,source.disconnect(analyzer),analyzer.disconnect(nativeAudioContext.destination)},source.start()}})),visitEachAudioNodeOnce=(cycles,visitor)=>{const counts=new Map;for(const cycle of cycles)for(const audioNode of cycle){const count=counts.get(audioNode);counts.set(audioNode,void 0===count?1:count+1)}counts.forEach(((count,audioNode)=>visitor(audioNode,count)))},isNativeAudioNode=nativeAudioNodeOrAudioParam=>"context"in nativeAudioNodeOrAudioParam,wrapAudioNodeDisconnectMethod=nativeAudioNode=>{const connections=new Map;var connect,disconnect;nativeAudioNode.connect=(connect=nativeAudioNode.connect.bind(nativeAudioNode),(destination,output=0,input=0)=>{const returnValue=isNativeAudioNode(destination)?connect(destination,output,input):connect(destination,output),connectionsToDestination=connections.get(destination);return void 0===connectionsToDestination?connections.set(destination,[{input,output}]):connectionsToDestination.every((connection=>connection.input!==input||connection.output!==output))&&connectionsToDestination.push({input,output}),returnValue}),nativeAudioNode.disconnect=(disconnect=nativeAudioNode.disconnect,(destinationOrOutput,output,input)=>{if(disconnect.apply(nativeAudioNode),void 0===destinationOrOutput)connections.clear();else if("number"==typeof destinationOrOutput)for(const[destination,connectionsToDestination]of connections){const filteredConnections=connectionsToDestination.filter((connection=>connection.output!==destinationOrOutput));0===filteredConnections.length?connections.delete(destination):connections.set(destination,filteredConnections)}else if(connections.has(destinationOrOutput))if(void 0===output)connections.delete(destinationOrOutput);else{const connectionsToDestination=connections.get(destinationOrOutput);if(void 0!==connectionsToDestination){const filteredConnections=connectionsToDestination.filter((connection=>connection.output!==output&&(connection.input!==input||void 0===input)));0===filteredConnections.length?connections.delete(destinationOrOutput):connections.set(destinationOrOutput,filteredConnections)}}for(const[destination,connectionsToDestination]of connections)connectionsToDestination.forEach((connection=>{isNativeAudioNode(destination)?nativeAudioNode.connect(destination,connection.output,connection.input):nativeAudioNode.connect(destination,connection.output)}))})},addConnectionToAudioParamOfAudioContext=(source,destination,output,isOffline)=>{const{activeInputs,passiveInputs}=getAudioParamConnections(destination),{outputs}=getAudioNodeConnections(source),eventListeners=getEventListenersOfAudioNode(source),eventListener=isActive=>{const nativeAudioNode=getNativeAudioNode(source),nativeAudioParam=getNativeAudioParam(destination);if(isActive){const partialConnection=deletePassiveInputConnectionToAudioParam(passiveInputs,source,output);addActiveInputConnectionToAudioParam(activeInputs,source,partialConnection,!1),isOffline||isPartOfACycle(source)||nativeAudioNode.connect(nativeAudioParam,output)}else{const partialConnection=((activeInputs,source,output)=>pickElementFromSet(activeInputs,(activeInputConnection=>activeInputConnection[0]===source&&activeInputConnection[1]===output)))(activeInputs,source,output);addPassiveInputConnectionToAudioParam(passiveInputs,partialConnection,!1),isOffline||isPartOfACycle(source)||nativeAudioNode.disconnect(nativeAudioParam,output)}};return!!insertElementInSet(outputs,[destination,output],(outputConnection=>outputConnection[0]===destination&&outputConnection[1]===output),!0)&&(eventListeners.add(eventListener),isActiveAudioNode(source)?addActiveInputConnectionToAudioParam(activeInputs,source,[output,eventListener],!0):addPassiveInputConnectionToAudioParam(passiveInputs,[source,output,eventListener],!0),!0)},deleteInputsOfAudioNode=(source,isOffline,destination,output,input)=>{const[listener,isActive]=((source,destination,output,input)=>{const{activeInputs,passiveInputs}=getAudioNodeConnections(destination),activeInputConnection=deleteActiveInputConnection(activeInputs[input],source,output);if(null===activeInputConnection)return[deletePassiveInputConnectionToAudioNode(passiveInputs,source,output,input)[2],!1];return[activeInputConnection[2],!0]})(source,destination,output,input);if(null!==listener&&(deleteEventListenerOfAudioNode(source,listener),!isActive||isOffline||isPartOfACycle(source)||disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source),getNativeAudioNode(destination),output,input)),isActiveAudioNode(destination)){const{activeInputs}=getAudioNodeConnections(destination);setInternalStateToPassiveWhenNecessary(destination,activeInputs)}},deleteInputsOfAudioParam=(source,isOffline,destination,output)=>{const[listener,isActive]=((source,destination,output)=>{const{activeInputs,passiveInputs}=getAudioParamConnections(destination),activeInputConnection=deleteActiveInputConnection(activeInputs,source,output);if(null===activeInputConnection)return[deletePassiveInputConnectionToAudioParam(passiveInputs,source,output)[1],!1];return[activeInputConnection[2],!0]})(source,destination,output);null!==listener&&(deleteEventListenerOfAudioNode(source,listener),!isActive||isOffline||isPartOfACycle(source)||getNativeAudioNode(source).disconnect(getNativeAudioParam(destination),output))};class ReadOnlyMap{constructor(parameters){this._map=new Map(parameters)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(callback,thisArg=null){return this._map.forEach(((value,key)=>callback.call(thisArg,value,key,this)))}get(name){return this._map.get(name)}has(name){return this._map.has(name)}keys(){return this._map.keys()}values(){return this._map.values()}}const audio_worklet_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}};function copyFromChannel(audioBuffer,parent,key,channelNumber,bufferOffset){if("function"==typeof audioBuffer.copyFromChannel)0===parent[key].byteLength&&(parent[key]=new Float32Array(128)),audioBuffer.copyFromChannel(parent[key],channelNumber,bufferOffset);else{const channelData=audioBuffer.getChannelData(channelNumber);if(0===parent[key].byteLength)parent[key]=channelData.slice(bufferOffset,bufferOffset+128);else{const slicedInput=new Float32Array(channelData.buffer,bufferOffset*Float32Array.BYTES_PER_ELEMENT,128);parent[key].set(slicedInput)}}}const copyToChannel=(audioBuffer,parent,key,channelNumber,bufferOffset)=>{"function"==typeof audioBuffer.copyToChannel?0!==parent[key].byteLength&&audioBuffer.copyToChannel(parent[key],channelNumber,bufferOffset):0!==parent[key].byteLength&&audioBuffer.getChannelData(channelNumber).set(parent[key],bufferOffset)},createNestedArrays=(x,y)=>{const arrays=[];for(let i=0;i<x;i+=1){const array=[],length="number"==typeof y?y:y[i];for(let j=0;j<length;j+=1)array.push(new Float32Array(128));arrays.push(array)}return arrays},processBuffer=async(proxy,renderedBuffer,nativeOfflineAudioContext,options,outputChannelCount,processorConstructor,exposeCurrentFrameAndCurrentTime)=>{const length=null===renderedBuffer?128*Math.ceil(proxy.context.length/128):renderedBuffer.length,numberOfInputChannels=options.channelCount*options.numberOfInputs,numberOfOutputChannels=outputChannelCount.reduce(((sum,value)=>sum+value),0),processedBuffer=0===numberOfOutputChannels?null:nativeOfflineAudioContext.createBuffer(numberOfOutputChannels,length,nativeOfflineAudioContext.sampleRate);if(void 0===processorConstructor)throw new Error("Missing the processor constructor.");const audioNodeConnections=getAudioNodeConnections(proxy),audioWorkletProcessor=await((nativeOfflineAudioContext,proxy)=>{const nodeToProcessorMap=getValueForKey(NODE_TO_PROCESSOR_MAPS,nativeOfflineAudioContext),nativeAudioWorkletNode=getNativeAudioNode(proxy);return getValueForKey(nodeToProcessorMap,nativeAudioWorkletNode)})(nativeOfflineAudioContext,proxy),inputs=createNestedArrays(options.numberOfInputs,options.channelCount),outputs=createNestedArrays(options.numberOfOutputs,outputChannelCount),parameters=Array.from(proxy.parameters.keys()).reduce(((prmtrs,name)=>({...prmtrs,[name]:new Float32Array(128)})),{});for(let i=0;i<length;i+=128){if(options.numberOfInputs>0&&null!==renderedBuffer)for(let j=0;j<options.numberOfInputs;j+=1)for(let k=0;k<options.channelCount;k+=1)copyFromChannel(renderedBuffer,inputs[j],k,k,i);void 0!==processorConstructor.parameterDescriptors&&null!==renderedBuffer&&processorConstructor.parameterDescriptors.forEach((({name},index)=>{copyFromChannel(renderedBuffer,parameters,name,numberOfInputChannels+index,i)}));for(let j=0;j<options.numberOfInputs;j+=1)for(let k=0;k<outputChannelCount[j];k+=1)0===outputs[j][k].byteLength&&(outputs[j][k]=new Float32Array(128));try{const potentiallyEmptyInputs=inputs.map(((input,index)=>0===audioNodeConnections.activeInputs[index].size?[]:input)),activeSourceFlag=exposeCurrentFrameAndCurrentTime(i/nativeOfflineAudioContext.sampleRate,nativeOfflineAudioContext.sampleRate,(()=>audioWorkletProcessor.process(potentiallyEmptyInputs,outputs,parameters)));if(null!==processedBuffer)for(let j=0,outputChannelSplitterNodeOutput=0;j<options.numberOfOutputs;j+=1){for(let k=0;k<outputChannelCount[j];k+=1)copyToChannel(processedBuffer,outputs[j],k,outputChannelSplitterNodeOutput+k,i);outputChannelSplitterNodeOutput+=outputChannelCount[j]}if(!activeSourceFlag)break}catch(error){proxy.dispatchEvent(new ErrorEvent("processorerror",{colno:error.colno,filename:error.filename,lineno:error.lineno,message:error.message}));break}}return processedBuffer},biquad_filter_node_constructor_DEFAULT_OPTIONS={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},channel_merger_node_constructor_DEFAULT_OPTIONS={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},channel_splitter_node_constructor_DEFAULT_OPTIONS={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},constant_source_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},convolver_node_constructor_DEFAULT_OPTIONS={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},detachArrayBuffer=arrayBuffer=>{const{port1,port2}=new MessageChannel;return new Promise((resolve=>{const closeAndResolve=()=>{port2.onmessage=null,port1.close(),port2.close(),resolve()};port2.onmessage=()=>closeAndResolve();try{port1.postMessage(arrayBuffer,[arrayBuffer])}finally{closeAndResolve()}}))},delay_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},getOutputAudioNodeAtIndex=(createIndexSizeError,outputAudioNodes,output)=>{const outputAudioNode=outputAudioNodes[output];if(void 0===outputAudioNode)throw createIndexSizeError();return outputAudioNode},dynamics_compressor_node_constructor_DEFAULT_OPTIONS={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},gain_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},createInvalidStateError=()=>new DOMException("","InvalidStateError"),createInvalidAccessError=()=>new DOMException("","InvalidAccessError"),iir_filter_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},filterBuffer=(feedback,feedbackLength,feedforward,feedforwardLength,minLength,xBuffer,yBuffer,bufferIndex,bufferLength,input,output)=>{const inputLength=input.length;let i=bufferIndex;for(let j=0;j<inputLength;j+=1){let y=feedforward[0]*input[j];for(let k=1;k<minLength;k+=1){const x=i-k&bufferLength-1;y+=feedforward[k]*xBuffer[x],y-=feedback[k]*yBuffer[x]}for(let k=minLength;k<feedforwardLength;k+=1)y+=feedforward[k]*xBuffer[i-k&bufferLength-1];for(let k=minLength;k<feedbackLength;k+=1)y-=feedback[k]*yBuffer[i-k&bufferLength-1];xBuffer[i]=input[j],yBuffer[i]=y,i=i+1&bufferLength-1,output[j]=y}return i},media_stream_audio_destination_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},testPromiseSupport=nativeContext=>{const uint32Array=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const promise=nativeContext.decodeAudioData(uint32Array.buffer,(()=>{}));return void 0!==promise&&(promise.catch((()=>{})),!0)}catch{}return!1},minimal_offline_audio_context_constructor_DEFAULT_OPTIONS={numberOfChannels:1},assignNativeAudioNodeOption=(nativeAudioNode,options,option)=>{const value=options[option];void 0!==value&&value!==nativeAudioNode[option]&&(nativeAudioNode[option]=value)},assignNativeAudioNodeOptions=(nativeAudioNode,options)=>{assignNativeAudioNodeOption(nativeAudioNode,options,"channelCount"),assignNativeAudioNodeOption(nativeAudioNode,options,"channelCountMode"),assignNativeAudioNodeOption(nativeAudioNode,options,"channelInterpretation")},testAnalyserNodeGetFloatTimeDomainDataMethodSupport=nativeAnalyserNode=>"function"==typeof nativeAnalyserNode.getFloatTimeDomainData,assignNativeAudioNodeAudioParamValue=(nativeAudioNode,options,audioParam)=>{const value=options[audioParam];void 0!==value&&value!==nativeAudioNode[audioParam].value&&(nativeAudioNode[audioParam].value=value)},wrapAudioScheduledSourceNodeStartMethodNegativeParameters=nativeAudioScheduledSourceNode=>{var start;nativeAudioScheduledSourceNode.start=(start=nativeAudioScheduledSourceNode.start,(when=0,offset=0,duration)=>{if("number"==typeof duration&&duration<0||offset<0||when<0)throw new RangeError("The parameters can't be negative.");start.call(nativeAudioScheduledSourceNode,when,offset,duration)})},wrapAudioScheduledSourceNodeStopMethodNegativeParameters=nativeAudioScheduledSourceNode=>{var stop;nativeAudioScheduledSourceNode.stop=(stop=nativeAudioScheduledSourceNode.stop,(when=0)=>{if(when<0)throw new RangeError("The parameter can't be negative.");stop.call(nativeAudioScheduledSourceNode,when)})},computeBufferSize=(baseLatency,sampleRate)=>null===baseLatency?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(baseLatency*sampleRate))))),createAudioWorkletProcessorPromise=async(processorConstructor,audioWorkletNodeOptions)=>{const clonedAudioWorkletNodeOptions=await(audioWorkletNodeOptions=>new Promise(((resolve,reject)=>{const{port1,port2}=new MessageChannel;port1.onmessage=({data})=>{port1.close(),port2.close(),resolve(data)},port1.onmessageerror=({data})=>{port1.close(),port2.close(),reject(data)},port2.postMessage(audioWorkletNodeOptions)})))(audioWorkletNodeOptions);return new processorConstructor(clonedAudioWorkletNodeOptions)},createNativeBiquadFilterNode=(nativeContext,options)=>{const nativeBiquadFilterNode=nativeContext.createBiquadFilter();return assignNativeAudioNodeOptions(nativeBiquadFilterNode,options),assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode,options,"Q"),assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode,options,"detune"),assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode,options,"frequency"),assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode,options,"gain"),assignNativeAudioNodeOption(nativeBiquadFilterNode,options,"type"),nativeBiquadFilterNode},createNativeChannelSplitterNode=(nativeContext,options)=>{const nativeChannelSplitterNode=nativeContext.createChannelSplitter(options.numberOfOutputs);return assignNativeAudioNodeOptions(nativeChannelSplitterNode,options),(channelSplitterNode=>{const channelCount=channelSplitterNode.numberOfOutputs;Object.defineProperty(channelSplitterNode,"channelCount",{get:()=>channelCount,set:value=>{if(value!==channelCount)throw createInvalidStateError()}}),Object.defineProperty(channelSplitterNode,"channelCountMode",{get:()=>"explicit",set:value=>{if("explicit"!==value)throw createInvalidStateError()}}),Object.defineProperty(channelSplitterNode,"channelInterpretation",{get:()=>"discrete",set:value=>{if("discrete"!==value)throw createInvalidStateError()}})})(nativeChannelSplitterNode),nativeChannelSplitterNode},interceptConnections=(original,interceptor)=>(original.connect=interceptor.connect.bind(interceptor),original.disconnect=interceptor.disconnect.bind(interceptor),original),createNativeDelayNode=(nativeContext,options)=>{const nativeDelayNode=nativeContext.createDelay(options.maxDelayTime);return assignNativeAudioNodeOptions(nativeDelayNode,options),assignNativeAudioNodeAudioParamValue(nativeDelayNode,options,"delayTime"),nativeDelayNode},createNativeGainNode=(nativeContext,options)=>{const nativeGainNode=nativeContext.createGain();return assignNativeAudioNodeOptions(nativeGainNode,options),assignNativeAudioNodeAudioParamValue(nativeGainNode,options,"gain"),nativeGainNode};function divide(a,b){const denominator=b[0]*b[0]+b[1]*b[1];return[(a[0]*b[0]+a[1]*b[1])/denominator,(a[1]*b[0]-a[0]*b[1])/denominator]}function evaluatePolynomial(coefficient,z){let result=[0,0];for(let i=coefficient.length-1;i>=0;i-=1)b=z,result=[(a=result)[0]*b[0]-a[1]*b[1],a[0]*b[1]+a[1]*b[0]],result[0]+=coefficient[i];var a,b;return result}const createNativeScriptProcessorNode=(nativeContext,bufferSize,numberOfInputChannels,numberOfOutputChannels)=>nativeContext.createScriptProcessor(bufferSize,numberOfInputChannels,numberOfOutputChannels),createNotSupportedError=()=>new DOMException("","NotSupportedError"),offline_audio_context_constructor_DEFAULT_OPTIONS={numberOfChannels:1},oscillator_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},panner_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},periodic_wave_constructor_DEFAULT_OPTIONS={disableNormalization:!1},stereo_panner_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},createUnknownError=()=>new DOMException("","UnknownError"),wave_shaper_node_constructor_DEFAULT_OPTIONS={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},getFirstSample=(audioBuffer,buffer,channelNumber)=>void 0===audioBuffer.copyFromChannel?audioBuffer.getChannelData(channelNumber)[0]:(audioBuffer.copyFromChannel(buffer,channelNumber),buffer[0]),isDCCurve=curve=>{if(null===curve)return!1;const length=curve.length;return length%2!=0?0!==curve[Math.floor(length/2)]:curve[length/2-1]+curve[length/2]!==0},overwriteAccessors=(object,property,createGetter,createSetter)=>{let prototype=object;for(;!prototype.hasOwnProperty(property);)prototype=Object.getPrototypeOf(prototype);const{get,set}=Object.getOwnPropertyDescriptor(prototype,property);Object.defineProperty(object,property,{get:createGetter(get),set:createSetter(set)})},setValueAtTimeUntilPossible=(audioParam,value,startTime)=>{try{audioParam.setValueAtTime(value,startTime)}catch(err){if(9!==err.code)throw err;setValueAtTimeUntilPossible(audioParam,value,startTime+1e-7)}},testAudioScheduledSourceNodeStartMethodNegativeParametersSupport=nativeContext=>{const nativeAudioBufferSourceNode=nativeContext.createOscillator();try{nativeAudioBufferSourceNode.start(-1)}catch(err){return err instanceof RangeError}return!1},testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport=nativeContext=>{const nativeAudioBuffer=nativeContext.createBuffer(1,1,44100),nativeAudioBufferSourceNode=nativeContext.createBufferSource();nativeAudioBufferSourceNode.buffer=nativeAudioBuffer,nativeAudioBufferSourceNode.start(),nativeAudioBufferSourceNode.stop();try{return nativeAudioBufferSourceNode.stop(),!0}catch{return!1}},testAudioScheduledSourceNodeStopMethodNegativeParametersSupport=nativeContext=>{const nativeAudioBufferSourceNode=nativeContext.createOscillator();try{nativeAudioBufferSourceNode.stop(-1)}catch(err){return err instanceof RangeError}return!1},wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls=(nativeAudioScheduledSourceNode,nativeContext)=>{const nativeGainNode=nativeContext.createGain();nativeAudioScheduledSourceNode.connect(nativeGainNode);const disconnectGainNode=(disconnect=nativeAudioScheduledSourceNode.disconnect,()=>{disconnect.call(nativeAudioScheduledSourceNode,nativeGainNode),nativeAudioScheduledSourceNode.removeEventListener("ended",disconnectGainNode)});var disconnect;nativeAudioScheduledSourceNode.addEventListener("ended",disconnectGainNode),interceptConnections(nativeAudioScheduledSourceNode,nativeGainNode),nativeAudioScheduledSourceNode.stop=(stop=>{let isStopped=!1;return(when=0)=>{if(isStopped)try{stop.call(nativeAudioScheduledSourceNode,when)}catch{nativeGainNode.gain.setValueAtTime(0,when)}else stop.call(nativeAudioScheduledSourceNode,when),isStopped=!0}})(nativeAudioScheduledSourceNode.stop)},wrapEventListener=(target,eventListener)=>event=>{const descriptor={value:target};return Object.defineProperties(event,{currentTarget:descriptor,target:descriptor}),"function"==typeof eventListener?eventListener.call(target,event):eventListener.handleEvent.call(target,event)},addActiveInputConnectionToAudioNode=(insertElementInSet=>(activeInputs,source,[output,input,eventListener],ignoreDuplicates)=>{insertElementInSet(activeInputs[input],[source,output,eventListener],(activeInputConnection=>activeInputConnection[0]===source&&activeInputConnection[1]===output),ignoreDuplicates)})(insertElementInSet),addPassiveInputConnectionToAudioNode=(insertElementInSet=>(passiveInputs,input,[source,output,eventListener],ignoreDuplicates)=>{const passiveInputConnections=passiveInputs.get(source);void 0===passiveInputConnections?passiveInputs.set(source,new Set([[output,input,eventListener]])):insertElementInSet(passiveInputConnections,[output,input,eventListener],(passiveInputConnection=>passiveInputConnection[0]===output&&passiveInputConnection[1]===input),ignoreDuplicates)})(insertElementInSet),deleteActiveInputConnectionToAudioNode=(pickElementFromSet=>(activeInputs,source,output,input)=>pickElementFromSet(activeInputs[input],(activeInputConnection=>activeInputConnection[0]===source&&activeInputConnection[1]===output)))(pickElementFromSet),audioNodeTailTimeStore=new WeakMap,getAudioNodeTailTime=(audioNodeTailTimeStore=>audioNode=>{var _a;return null!==(_a=audioNodeTailTimeStore.get(audioNode))&&void 0!==_a?_a:0})(audioNodeTailTimeStore),cacheTestResult=(ongoingTests=new Map,testResults=new WeakMap,(tester,test)=>{const cachedTestResult=testResults.get(tester);if(void 0!==cachedTestResult)return cachedTestResult;const ongoingTest=ongoingTests.get(tester);if(void 0!==ongoingTest)return ongoingTest;try{const synchronousTestResult=test();return synchronousTestResult instanceof Promise?(ongoingTests.set(tester,synchronousTestResult),synchronousTestResult.catch((()=>!1)).then((finalTestResult=>(ongoingTests.delete(tester),testResults.set(tester,finalTestResult),finalTestResult)))):(testResults.set(tester,synchronousTestResult),synchronousTestResult)}catch{return testResults.set(tester,!1),!1}});var ongoingTests,testResults;const module_window="undefined"==typeof window?null:window,createNativeAnalyserNode=((cacheTestResult,createIndexSizeError)=>(nativeContext,options)=>{const nativeAnalyserNode=nativeContext.createAnalyser();if(assignNativeAudioNodeOptions(nativeAnalyserNode,options),!(options.maxDecibels>options.minDecibels))throw createIndexSizeError();return assignNativeAudioNodeOption(nativeAnalyserNode,options,"fftSize"),assignNativeAudioNodeOption(nativeAnalyserNode,options,"maxDecibels"),assignNativeAudioNodeOption(nativeAnalyserNode,options,"minDecibels"),assignNativeAudioNodeOption(nativeAnalyserNode,options,"smoothingTimeConstant"),cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport,(()=>testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode)))||(nativeAnalyserNode=>{nativeAnalyserNode.getFloatTimeDomainData=array=>{const byteTimeDomainData=new Uint8Array(array.length);nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);const length=Math.max(byteTimeDomainData.length,nativeAnalyserNode.fftSize);for(let i=0;i<length;i+=1)array[i]=.0078125*(byteTimeDomainData[i]-128);return array}})(nativeAnalyserNode),nativeAnalyserNode})(cacheTestResult,createIndexSizeError),getAudioNodeRenderer=(getAudioNodeConnections=>audioNode=>{const audioNodeConnections=getAudioNodeConnections(audioNode);if(null===audioNodeConnections.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return audioNodeConnections.renderer})(getAudioNodeConnections),renderInputsOfAudioNode=((getAudioNodeConnections,getAudioNodeRenderer,isPartOfACycle)=>async(audioNode,nativeOfflineAudioContext,nativeAudioNode)=>{const audioNodeConnections=getAudioNodeConnections(audioNode);await Promise.all(audioNodeConnections.activeInputs.map(((connections,input)=>Array.from(connections).map((async([source,output])=>{const audioNodeRenderer=getAudioNodeRenderer(source),renderedNativeAudioNode=await audioNodeRenderer.render(source,nativeOfflineAudioContext),destination=audioNode.context.destination;isPartOfACycle(source)||audioNode===destination&&isPartOfACycle(audioNode)||renderedNativeAudioNode.connect(nativeAudioNode,output,input)})))).reduce(((allRenderingPromises,renderingPromises)=>[...allRenderingPromises,...renderingPromises]),[]))})(getAudioNodeConnections,getAudioNodeRenderer,isPartOfACycle),createAnalyserNodeRenderer=((createNativeAnalyserNode,getNativeAudioNode,renderInputsOfAudioNode)=>()=>{const renderedNativeAnalyserNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeAnalyserNode=renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAnalyserNode?Promise.resolve(renderedNativeAnalyserNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeAnalyserNode=getNativeAudioNode(proxy);if(!isOwnedByContext(nativeAnalyserNode,nativeOfflineAudioContext)){const options={channelCount:nativeAnalyserNode.channelCount,channelCountMode:nativeAnalyserNode.channelCountMode,channelInterpretation:nativeAnalyserNode.channelInterpretation,fftSize:nativeAnalyserNode.fftSize,maxDecibels:nativeAnalyserNode.maxDecibels,minDecibels:nativeAnalyserNode.minDecibels,smoothingTimeConstant:nativeAnalyserNode.smoothingTimeConstant};nativeAnalyserNode=createNativeAnalyserNode(nativeOfflineAudioContext,options)}return renderedNativeAnalyserNodes.set(nativeOfflineAudioContext,nativeAnalyserNode),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAnalyserNode),nativeAnalyserNode})(proxy,nativeOfflineAudioContext)}}})(createNativeAnalyserNode,getNativeAudioNode,renderInputsOfAudioNode),getNativeContext=(contextStore=CONTEXT_STORE,context=>{const nativeContext=contextStore.get(context);if(void 0===nativeContext)throw createInvalidStateError();return nativeContext});var contextStore;const nativeOfflineAudioContextConstructor=(window=>null===window?null:window.hasOwnProperty("OfflineAudioContext")?window.OfflineAudioContext:window.hasOwnProperty("webkitOfflineAudioContext")?window.webkitOfflineAudioContext:null)(module_window),isNativeOfflineAudioContext=(nativeOfflineAudioContextConstructor=>anything=>null!==nativeOfflineAudioContextConstructor&&anything instanceof nativeOfflineAudioContextConstructor)(nativeOfflineAudioContextConstructor),audioParamAudioNodeStore=new WeakMap,eventTargetConstructor=(wrapEventListener=>class EventTarget{constructor(_nativeEventTarget){this._nativeEventTarget=_nativeEventTarget,this._listeners=new WeakMap}addEventListener(type,listener,options){if(null!==listener){let wrappedEventListener=this._listeners.get(listener);void 0===wrappedEventListener&&(wrappedEventListener=wrapEventListener(this,listener),"function"==typeof listener&&this._listeners.set(listener,wrappedEventListener)),this._nativeEventTarget.addEventListener(type,wrappedEventListener,options)}}dispatchEvent(event){return this._nativeEventTarget.dispatchEvent(event)}removeEventListener(type,listener,options){const wrappedEventListener=null===listener?void 0:this._listeners.get(listener);this._nativeEventTarget.removeEventListener(type,void 0===wrappedEventListener?null:wrappedEventListener,options)}})(wrapEventListener),nativeAudioContextConstructor=(window=>null===window?null:window.hasOwnProperty("AudioContext")?window.AudioContext:window.hasOwnProperty("webkitAudioContext")?window.webkitAudioContext:null)(module_window),isNativeAudioContext=(nativeAudioContextConstructor=>anything=>null!==nativeAudioContextConstructor&&anything instanceof nativeAudioContextConstructor)(nativeAudioContextConstructor),module_isNativeAudioNode=(window=>anything=>null!==window&&"function"==typeof window.AudioNode&&anything instanceof window.AudioNode)(module_window),isNativeAudioParam=(window=>anything=>null!==window&&"function"==typeof window.AudioParam&&anything instanceof window.AudioParam)(module_window),nativeAudioWorkletNodeConstructor=(window=>null===window?null:window.hasOwnProperty("AudioWorkletNode")?window.AudioWorkletNode:null)(module_window),audioNodeConstructor=((addAudioNodeConnections,addConnectionToAudioNode,cacheTestResult,createIncrementCycleCounter,createIndexSizeError,createInvalidAccessError,createNotSupportedError,decrementCycleCounter,detectCycles,eventTargetConstructor,getNativeContext,isNativeAudioContext,isNativeAudioNode,isNativeAudioParam,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor)=>class AudioNode extends eventTargetConstructor{constructor(context,isActive,nativeAudioNode,audioNodeRenderer){super(nativeAudioNode),this._context=context,this._nativeAudioNode=nativeAudioNode;const nativeContext=getNativeContext(context);isNativeAudioContext(nativeContext)&&!0!==cacheTestResult(testAudioNodeDisconnectMethodSupport,(()=>testAudioNodeDisconnectMethodSupport(nativeContext,nativeAudioWorkletNodeConstructor)))&&wrapAudioNodeDisconnectMethod(nativeAudioNode),AUDIO_NODE_STORE.set(this,nativeAudioNode),EVENT_LISTENERS.set(this,new Set),"closed"!==context.state&&isActive&&setInternalStateToActive(this),addAudioNodeConnections(this,audioNodeRenderer,nativeAudioNode)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(value){this._nativeAudioNode.channelCount=value}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(value){this._nativeAudioNode.channelCountMode=value}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(value){this._nativeAudioNode.channelInterpretation=value}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(destination,output=0,input=0){if(output<0||output>=this._nativeAudioNode.numberOfOutputs)throw createIndexSizeError();const nativeContext=getNativeContext(this._context),isOffline=isNativeOfflineAudioContext(nativeContext);if(isNativeAudioNode(destination)||isNativeAudioParam(destination))throw createInvalidAccessError();if(isAudioNode(destination)){const nativeDestinationAudioNode=getNativeAudioNode(destination);try{const connection=connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode,nativeDestinationAudioNode,output,input),isPassive=isPassiveAudioNode(this);(isOffline||isPassive)&&this._nativeAudioNode.disconnect(...connection),"closed"!==this.context.state&&!isPassive&&isPassiveAudioNode(destination)&&setInternalStateToActive(destination)}catch(err){if(12===err.code)throw createInvalidAccessError();throw err}if(addConnectionToAudioNode(this,destination,output,input,isOffline)){const cycles=detectCycles([this],destination);visitEachAudioNodeOnce(cycles,createIncrementCycleCounter(isOffline))}return destination}const nativeAudioParam=getNativeAudioParam(destination);if("playbackRate"===nativeAudioParam.name&&1024===nativeAudioParam.maxValue)throw createNotSupportedError();try{this._nativeAudioNode.connect(nativeAudioParam,output),(isOffline||isPassiveAudioNode(this))&&this._nativeAudioNode.disconnect(nativeAudioParam,output)}catch(err){if(12===err.code)throw createInvalidAccessError();throw err}if(addConnectionToAudioParamOfAudioContext(this,destination,output,isOffline)){const cycles=detectCycles([this],destination);visitEachAudioNodeOnce(cycles,createIncrementCycleCounter(isOffline))}}disconnect(destinationOrOutput,output,input){let destinations;const nativeContext=getNativeContext(this._context),isOffline=isNativeOfflineAudioContext(nativeContext);if(void 0===destinationOrOutput)destinations=((source,isOffline)=>{const audioNodeConnectionsOfSource=getAudioNodeConnections(source),destinations=[];for(const outputConnection of audioNodeConnectionsOfSource.outputs)isAudioNodeOutputConnection(outputConnection)?deleteInputsOfAudioNode(source,isOffline,...outputConnection):deleteInputsOfAudioParam(source,isOffline,...outputConnection),destinations.push(outputConnection[0]);return audioNodeConnectionsOfSource.outputs.clear(),destinations})(this,isOffline);else if("number"==typeof destinationOrOutput){if(destinationOrOutput<0||destinationOrOutput>=this.numberOfOutputs)throw createIndexSizeError();destinations=((source,isOffline,output)=>{const audioNodeConnectionsOfSource=getAudioNodeConnections(source),destinations=[];for(const outputConnection of audioNodeConnectionsOfSource.outputs)outputConnection[1]===output&&(isAudioNodeOutputConnection(outputConnection)?deleteInputsOfAudioNode(source,isOffline,...outputConnection):deleteInputsOfAudioParam(source,isOffline,...outputConnection),destinations.push(outputConnection[0]),audioNodeConnectionsOfSource.outputs.delete(outputConnection));return destinations})(this,isOffline,destinationOrOutput)}else{if(void 0!==output&&(output<0||output>=this.numberOfOutputs))throw createIndexSizeError();if(isAudioNode(destinationOrOutput)&&void 0!==input&&(input<0||input>=destinationOrOutput.numberOfInputs))throw createIndexSizeError();if(destinations=((source,isOffline,destination,output,input)=>{const audioNodeConnectionsOfSource=getAudioNodeConnections(source);return Array.from(audioNodeConnectionsOfSource.outputs).filter((outputConnection=>!(outputConnection[0]!==destination||void 0!==output&&outputConnection[1]!==output||void 0!==input&&outputConnection[2]!==input))).map((outputConnection=>(isAudioNodeOutputConnection(outputConnection)?deleteInputsOfAudioNode(source,isOffline,...outputConnection):deleteInputsOfAudioParam(source,isOffline,...outputConnection),audioNodeConnectionsOfSource.outputs.delete(outputConnection),outputConnection[0])))})(this,isOffline,destinationOrOutput,output,input),0===destinations.length)throw createInvalidAccessError()}for(const destination of destinations){const cycles=detectCycles([this],destination);visitEachAudioNodeOnce(cycles,decrementCycleCounter)}}})((audioNodeConnectionsStore=AUDIO_NODE_CONNECTIONS_STORE,(audioNode,audioNodeRenderer,nativeAudioNode)=>{const activeInputs=[];for(let i=0;i<nativeAudioNode.numberOfInputs;i+=1)activeInputs.push(new Set);audioNodeConnectionsStore.set(audioNode,{activeInputs,outputs:new Set,passiveInputs:new WeakMap,renderer:audioNodeRenderer})}),((addActiveInputConnectionToAudioNode,addPassiveInputConnectionToAudioNode,connectNativeAudioNodeToNativeAudioNode,deleteActiveInputConnectionToAudioNode,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,getAudioNodeTailTime,getEventListenersOfAudioNode,getNativeAudioNode,insertElementInSet,isActiveAudioNode,isPartOfACycle,isPassiveAudioNode)=>{const tailTimeTimeoutIds=new WeakMap;return(source,destination,output,input,isOffline)=>{const{activeInputs,passiveInputs}=getAudioNodeConnections(destination),{outputs}=getAudioNodeConnections(source),eventListeners=getEventListenersOfAudioNode(source),eventListener=isActive=>{const nativeDestinationAudioNode=getNativeAudioNode(destination),nativeSourceAudioNode=getNativeAudioNode(source);if(isActive){const partialConnection=deletePassiveInputConnectionToAudioNode(passiveInputs,source,output,input);addActiveInputConnectionToAudioNode(activeInputs,source,partialConnection,!1),isOffline||isPartOfACycle(source)||connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode,nativeDestinationAudioNode,output,input),isPassiveAudioNode(destination)&&setInternalStateToActive(destination)}else{const partialConnection=deleteActiveInputConnectionToAudioNode(activeInputs,source,output,input);addPassiveInputConnectionToAudioNode(passiveInputs,input,partialConnection,!1),isOffline||isPartOfACycle(source)||disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode,nativeDestinationAudioNode,output,input);const tailTime=getAudioNodeTailTime(destination);if(0===tailTime)isActiveAudioNode(destination)&&setInternalStateToPassiveWhenNecessary(destination,activeInputs);else{const tailTimeTimeoutId=tailTimeTimeoutIds.get(destination);void 0!==tailTimeTimeoutId&&clearTimeout(tailTimeTimeoutId),tailTimeTimeoutIds.set(destination,setTimeout((()=>{isActiveAudioNode(destination)&&setInternalStateToPassiveWhenNecessary(destination,activeInputs)}),1e3*tailTime))}}};return!!insertElementInSet(outputs,[destination,output,input],(outputConnection=>outputConnection[0]===destination&&outputConnection[1]===output&&outputConnection[2]===input),!0)&&(eventListeners.add(eventListener),isActiveAudioNode(source)?addActiveInputConnectionToAudioNode(activeInputs,source,[output,input,eventListener],!0):addPassiveInputConnectionToAudioNode(passiveInputs,input,[source,output,eventListener],!0),!0)}})(addActiveInputConnectionToAudioNode,addPassiveInputConnectionToAudioNode,connectNativeAudioNodeToNativeAudioNode,deleteActiveInputConnectionToAudioNode,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,getAudioNodeTailTime,getEventListenersOfAudioNode,getNativeAudioNode,insertElementInSet,isActiveAudioNode,isPartOfACycle,isPassiveAudioNode),cacheTestResult,((cycleCounters,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,isActiveAudioNode)=>isOffline=>(audioNode,count)=>{const cycleCounter=cycleCounters.get(audioNode);if(void 0===cycleCounter){if(!isOffline&&isActiveAudioNode(audioNode)){const nativeSourceAudioNode=getNativeAudioNode(audioNode),{outputs}=getAudioNodeConnections(audioNode);for(const output of outputs)if(isAudioNodeOutputConnection(output)){const nativeDestinationAudioNode=getNativeAudioNode(output[0]);disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode,nativeDestinationAudioNode,output[1],output[2])}else{const nativeDestinationAudioParam=getNativeAudioParam(output[0]);nativeSourceAudioNode.disconnect(nativeDestinationAudioParam,output[1])}}cycleCounters.set(audioNode,count)}else cycleCounters.set(audioNode,cycleCounter+count)})(CYCLE_COUNTERS,disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,isActiveAudioNode),createIndexSizeError,createInvalidAccessError,createNotSupportedError,((connectNativeAudioNodeToNativeAudioNode,cycleCounters,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,getNativeContext,isActiveAudioNode,isNativeOfflineAudioContext)=>(audioNode,count)=>{const cycleCounter=cycleCounters.get(audioNode);if(void 0===cycleCounter)throw new Error("Missing the expected cycle count.");const nativeContext=getNativeContext(audioNode.context),isOffline=isNativeOfflineAudioContext(nativeContext);if(cycleCounter===count){if(cycleCounters.delete(audioNode),!isOffline&&isActiveAudioNode(audioNode)){const nativeSourceAudioNode=getNativeAudioNode(audioNode),{outputs}=getAudioNodeConnections(audioNode);for(const output of outputs)if(isAudioNodeOutputConnection(output)){const nativeDestinationAudioNode=getNativeAudioNode(output[0]);connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode,nativeDestinationAudioNode,output[1],output[2])}else{const nativeDestinationAudioParam=getNativeAudioParam(output[0]);nativeSourceAudioNode.connect(nativeDestinationAudioParam,output[1])}}}else cycleCounters.set(audioNode,cycleCounter-count)})(connectNativeAudioNodeToNativeAudioNode,CYCLE_COUNTERS,getAudioNodeConnections,getNativeAudioNode,getNativeAudioParam,getNativeContext,isActiveAudioNode,isNativeOfflineAudioContext),((audioParamAudioNodeStore,getAudioNodeConnections,getValueForKey)=>function detectCycles(chain,nextLink){const audioNode=isAudioNode(nextLink)?nextLink:getValueForKey(audioParamAudioNodeStore,nextLink);if((audioNode=>"delayTime"in audioNode)(audioNode))return[];if(chain[0]===audioNode)return[chain];if(chain.includes(audioNode))return[];const{outputs}=getAudioNodeConnections(audioNode);return Array.from(outputs).map((outputConnection=>detectCycles([...chain,audioNode],outputConnection[0]))).reduce(((mergedCycles,nestedCycles)=>mergedCycles.concat(nestedCycles)),[])})(audioParamAudioNodeStore,getAudioNodeConnections,getValueForKey),eventTargetConstructor,getNativeContext,isNativeAudioContext,module_isNativeAudioNode,isNativeAudioParam,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor);var audioNodeConnectionsStore;const analyserNodeConstructor=((audionNodeConstructor,createAnalyserNodeRenderer,createIndexSizeError,createNativeAnalyserNode,getNativeContext,isNativeOfflineAudioContext)=>class AnalyserNode extends audionNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...DEFAULT_OPTIONS,...options},nativeAnalyserNode=createNativeAnalyserNode(nativeContext,mergedOptions);super(context,!1,nativeAnalyserNode,isNativeOfflineAudioContext(nativeContext)?createAnalyserNodeRenderer():null),this._nativeAnalyserNode=nativeAnalyserNode}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(value){this._nativeAnalyserNode.fftSize=value}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(value){const maxDecibels=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=value,!(value>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=maxDecibels,createIndexSizeError()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(value){const minDecibels=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=value,!(this._nativeAnalyserNode.maxDecibels>value))throw this._nativeAnalyserNode.minDecibels=minDecibels,createIndexSizeError()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(value){this._nativeAnalyserNode.smoothingTimeConstant=value}getByteFrequencyData(array){this._nativeAnalyserNode.getByteFrequencyData(array)}getByteTimeDomainData(array){this._nativeAnalyserNode.getByteTimeDomainData(array)}getFloatFrequencyData(array){this._nativeAnalyserNode.getFloatFrequencyData(array)}getFloatTimeDomainData(array){this._nativeAnalyserNode.getFloatTimeDomainData(array)}})(audioNodeConstructor,createAnalyserNodeRenderer,createIndexSizeError,createNativeAnalyserNode,getNativeContext,isNativeOfflineAudioContext),audioBufferStore=new WeakSet,nativeAudioBufferConstructor=(window=>null===window?null:window.hasOwnProperty("AudioBuffer")?window.AudioBuffer:null)(module_window),convertNumberToUnsignedLong=(unit32Array=new Uint32Array(1),value=>(unit32Array[0]=value,unit32Array[0]));var unit32Array;const wrapAudioBufferCopyChannelMethods=((convertNumberToUnsignedLong,createIndexSizeError)=>audioBuffer=>{audioBuffer.copyFromChannel=(destination,channelNumberAsNumber,bufferOffsetAsNumber=0)=>{const bufferOffset=convertNumberToUnsignedLong(bufferOffsetAsNumber),channelNumber=convertNumberToUnsignedLong(channelNumberAsNumber);if(channelNumber>=audioBuffer.numberOfChannels)throw createIndexSizeError();const audioBufferLength=audioBuffer.length,channelData=audioBuffer.getChannelData(channelNumber),destinationLength=destination.length;for(let i=bufferOffset<0?-bufferOffset:0;i+bufferOffset<audioBufferLength&&i<destinationLength;i+=1)destination[i]=channelData[i+bufferOffset]},audioBuffer.copyToChannel=(source,channelNumberAsNumber,bufferOffsetAsNumber=0)=>{const bufferOffset=convertNumberToUnsignedLong(bufferOffsetAsNumber),channelNumber=convertNumberToUnsignedLong(channelNumberAsNumber);if(channelNumber>=audioBuffer.numberOfChannels)throw createIndexSizeError();const audioBufferLength=audioBuffer.length,channelData=audioBuffer.getChannelData(channelNumber),sourceLength=source.length;for(let i=bufferOffset<0?-bufferOffset:0;i+bufferOffset<audioBufferLength&&i<sourceLength;i+=1)channelData[i+bufferOffset]=source[i]}})(convertNumberToUnsignedLong,createIndexSizeError),wrapAudioBufferCopyChannelMethodsOutOfBounds=(convertNumberToUnsignedLong=>audioBuffer=>{audioBuffer.copyFromChannel=(copyFromChannel=>(destination,channelNumberAsNumber,bufferOffsetAsNumber=0)=>{const bufferOffset=convertNumberToUnsignedLong(bufferOffsetAsNumber),channelNumber=convertNumberToUnsignedLong(channelNumberAsNumber);if(bufferOffset<audioBuffer.length)return copyFromChannel.call(audioBuffer,destination,channelNumber,bufferOffset)})(audioBuffer.copyFromChannel),audioBuffer.copyToChannel=(copyToChannel=>(source,channelNumberAsNumber,bufferOffsetAsNumber=0)=>{const bufferOffset=convertNumberToUnsignedLong(bufferOffsetAsNumber),channelNumber=convertNumberToUnsignedLong(channelNumberAsNumber);if(bufferOffset<audioBuffer.length)return copyToChannel.call(audioBuffer,source,channelNumber,bufferOffset)})(audioBuffer.copyToChannel)})(convertNumberToUnsignedLong),audioBufferConstructor=((audioBufferStore,cacheTestResult,createNotSupportedError,nativeAudioBufferConstructor,nativeOfflineAudioContextConstructor,testNativeAudioBufferConstructorSupport,wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds)=>{let nativeOfflineAudioContext=null;return class AudioBuffer{constructor(options){if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");const{length,numberOfChannels,sampleRate}={...audio_buffer_constructor_DEFAULT_OPTIONS,...options};null===nativeOfflineAudioContext&&(nativeOfflineAudioContext=new nativeOfflineAudioContextConstructor(1,1,44100));const audioBuffer=null!==nativeAudioBufferConstructor&&cacheTestResult(testNativeAudioBufferConstructorSupport,testNativeAudioBufferConstructorSupport)?new nativeAudioBufferConstructor({length,numberOfChannels,sampleRate}):nativeOfflineAudioContext.createBuffer(numberOfChannels,length,sampleRate);if(0===audioBuffer.numberOfChannels)throw createNotSupportedError();return"function"!=typeof audioBuffer.copyFromChannel?(wrapAudioBufferCopyChannelMethods(audioBuffer),wrapAudioBufferGetChannelDataMethod(audioBuffer)):cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,(()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)))||wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer),audioBufferStore.add(audioBuffer),audioBuffer}static[Symbol.hasInstance](instance){return null!==instance&&"object"==typeof instance&&Object.getPrototypeOf(instance)===AudioBuffer.prototype||audioBufferStore.has(instance)}}})(audioBufferStore,cacheTestResult,createNotSupportedError,nativeAudioBufferConstructor,nativeOfflineAudioContextConstructor,(nativeAudioBufferConstructor=>()=>{if(null===nativeAudioBufferConstructor)return!1;try{new nativeAudioBufferConstructor({length:1,sampleRate:44100})}catch{return!1}return!0})(nativeAudioBufferConstructor),wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds),addSilentConnection=(createNativeGainNode=>(nativeContext,nativeAudioScheduledSourceNode)=>{const nativeGainNode=createNativeGainNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);const disconnect=()=>{nativeAudioScheduledSourceNode.removeEventListener("ended",disconnect),nativeAudioScheduledSourceNode.disconnect(nativeGainNode),nativeGainNode.disconnect()};nativeAudioScheduledSourceNode.addEventListener("ended",disconnect)})(createNativeGainNode),renderInputsOfAudioParam=((getAudioNodeRenderer,getAudioParamConnections,isPartOfACycle)=>async(audioParam,nativeOfflineAudioContext,nativeAudioParam)=>{const audioParamConnections=getAudioParamConnections(audioParam);await Promise.all(Array.from(audioParamConnections.activeInputs).map((async([source,output])=>{const audioNodeRenderer=getAudioNodeRenderer(source),renderedNativeAudioNode=await audioNodeRenderer.render(source,nativeOfflineAudioContext);isPartOfACycle(source)||renderedNativeAudioNode.connect(nativeAudioParam,output)})))})(getAudioNodeRenderer,getAudioParamConnections,isPartOfACycle),connectAudioParam=(renderInputsOfAudioParam=>(nativeOfflineAudioContext,audioParam,nativeAudioParam)=>renderInputsOfAudioParam(audioParam,nativeOfflineAudioContext,nativeAudioParam))(renderInputsOfAudioParam),createNativeAudioBufferSourceNode=((addSilentConnection,cacheTestResult,testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,testAudioBufferSourceNodeStartMethodOffsetClampingSupport,testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,wrapAudioBufferSourceNodeStartMethodOffsetClampling,wrapAudioBufferSourceNodeStopMethodNullifiedBuffer,wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)=>(nativeContext,options)=>{const nativeAudioBufferSourceNode=nativeContext.createBufferSource();return assignNativeAudioNodeOptions(nativeAudioBufferSourceNode,options),assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode,options,"playbackRate"),assignNativeAudioNodeOption(nativeAudioBufferSourceNode,options,"buffer"),assignNativeAudioNodeOption(nativeAudioBufferSourceNode,options,"loop"),assignNativeAudioNodeOption(nativeAudioBufferSourceNode,options,"loopEnd"),assignNativeAudioNodeOption(nativeAudioBufferSourceNode,options,"loopStart"),cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport,(()=>testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext)))||(nativeAudioBufferSourceNode=>{nativeAudioBufferSourceNode.start=(start=>{let isScheduled=!1;return(when=0,offset=0,duration)=>{if(isScheduled)throw createInvalidStateError();start.call(nativeAudioBufferSourceNode,when,offset,duration),isScheduled=!0}})(nativeAudioBufferSourceNode.start)})(nativeAudioBufferSourceNode),cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport,(()=>testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext)))||wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode),cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport,(()=>testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext)))||wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode,nativeContext),cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode),cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,(()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)))||wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode,nativeContext),cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode),addSilentConnection(nativeContext,nativeAudioBufferSourceNode),nativeAudioBufferSourceNode})(addSilentConnection,cacheTestResult,(nativeContext=>{const nativeAudioBufferSourceNode=nativeContext.createBufferSource();nativeAudioBufferSourceNode.start();try{nativeAudioBufferSourceNode.start()}catch{return!0}return!1}),(nativeContext=>{const nativeAudioBufferSourceNode=nativeContext.createBufferSource(),nativeAudioBuffer=nativeContext.createBuffer(1,1,44100);nativeAudioBufferSourceNode.buffer=nativeAudioBuffer;try{nativeAudioBufferSourceNode.start(0,1)}catch{return!1}return!0}),(nativeContext=>{const nativeAudioBufferSourceNode=nativeContext.createBufferSource();nativeAudioBufferSourceNode.start();try{nativeAudioBufferSourceNode.stop()}catch{return!1}return!0}),testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,(nativeAudioBufferSourceNode=>{var start;nativeAudioBufferSourceNode.start=(start=nativeAudioBufferSourceNode.start,(when=0,offset=0,duration)=>{const buffer=nativeAudioBufferSourceNode.buffer,clampedOffset=null===buffer?offset:Math.min(buffer.duration,offset);null!==buffer&&clampedOffset>buffer.duration-.5/nativeAudioBufferSourceNode.context.sampleRate?start.call(nativeAudioBufferSourceNode,when,0,0):start.call(nativeAudioBufferSourceNode,when,clampedOffset,duration)})}),(overwriteAccessors=>(nativeAudioBufferSourceNode,nativeContext)=>{const nullifiedBuffer=nativeContext.createBuffer(1,1,44100);null===nativeAudioBufferSourceNode.buffer&&(nativeAudioBufferSourceNode.buffer=nullifiedBuffer),overwriteAccessors(nativeAudioBufferSourceNode,"buffer",(get=>()=>{const value=get.call(nativeAudioBufferSourceNode);return value===nullifiedBuffer?null:value}),(set=>value=>set.call(nativeAudioBufferSourceNode,null===value?nullifiedBuffer:value)))})(overwriteAccessors),wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls),renderAutomation=((getAudioParamRenderer,renderInputsOfAudioParam)=>(nativeOfflineAudioContext,audioParam,nativeAudioParam)=>(getAudioParamRenderer(audioParam).replay(nativeAudioParam),renderInputsOfAudioParam(audioParam,nativeOfflineAudioContext,nativeAudioParam)))((getAudioParamConnections=>audioParam=>{const audioParamConnections=getAudioParamConnections(audioParam);if(null===audioParamConnections.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return audioParamConnections.renderer})(getAudioParamConnections),renderInputsOfAudioParam),createAudioBufferSourceNodeRenderer=((connectAudioParam,createNativeAudioBufferSourceNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeAudioBufferSourceNodes=new WeakMap;let start=null,stop=null;return{set start(value){start=value},set stop(value){stop=value},render(proxy,nativeOfflineAudioContext){const renderedNativeAudioBufferSourceNode=renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioBufferSourceNode?Promise.resolve(renderedNativeAudioBufferSourceNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeAudioBufferSourceNode=getNativeAudioNode(proxy);const nativeAudioBufferSourceNodeIsOwnedByContext=isOwnedByContext(nativeAudioBufferSourceNode,nativeOfflineAudioContext);if(!nativeAudioBufferSourceNodeIsOwnedByContext){const options={buffer:nativeAudioBufferSourceNode.buffer,channelCount:nativeAudioBufferSourceNode.channelCount,channelCountMode:nativeAudioBufferSourceNode.channelCountMode,channelInterpretation:nativeAudioBufferSourceNode.channelInterpretation,loop:nativeAudioBufferSourceNode.loop,loopEnd:nativeAudioBufferSourceNode.loopEnd,loopStart:nativeAudioBufferSourceNode.loopStart,playbackRate:nativeAudioBufferSourceNode.playbackRate.value};nativeAudioBufferSourceNode=createNativeAudioBufferSourceNode(nativeOfflineAudioContext,options),null!==start&&nativeAudioBufferSourceNode.start(...start),null!==stop&&nativeAudioBufferSourceNode.stop(stop)}return renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext,nativeAudioBufferSourceNode),nativeAudioBufferSourceNodeIsOwnedByContext?await connectAudioParam(nativeOfflineAudioContext,proxy.playbackRate,nativeAudioBufferSourceNode.playbackRate):await renderAutomation(nativeOfflineAudioContext,proxy.playbackRate,nativeAudioBufferSourceNode.playbackRate),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAudioBufferSourceNode),nativeAudioBufferSourceNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeAudioBufferSourceNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),createAudioParam=((addAudioParamConnections,audioParamAudioNodeStore,audioParamStore,createAudioParamRenderer,createCancelAndHoldAutomationEvent,createCancelScheduledValuesAutomationEvent,createExponentialRampToValueAutomationEvent,createLinearRampToValueAutomationEvent,createSetTargetAutomationEvent,createSetValueAutomationEvent,createSetValueCurveAutomationEvent,nativeAudioContextConstructor,setValueAtTimeUntilPossible)=>(audioNode,isAudioParamOfOfflineAudioContext,nativeAudioParam,maxValue=null,minValue=null)=>{const automationEventList=new bundle.AutomationEventList(nativeAudioParam.defaultValue),audioParamRenderer=isAudioParamOfOfflineAudioContext?createAudioParamRenderer(automationEventList):null,audioParam={get defaultValue(){return nativeAudioParam.defaultValue},get maxValue(){return null===maxValue?nativeAudioParam.maxValue:maxValue},get minValue(){return null===minValue?nativeAudioParam.minValue:minValue},get value(){return nativeAudioParam.value},set value(value){nativeAudioParam.value=value,audioParam.setValueAtTime(value,audioNode.context.currentTime)},cancelAndHoldAtTime(cancelTime){if("function"==typeof nativeAudioParam.cancelAndHoldAtTime)null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime)),nativeAudioParam.cancelAndHoldAtTime(cancelTime);else{const previousLastEvent=Array.from(automationEventList).pop();null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));const currentLastEvent=Array.from(automationEventList).pop();nativeAudioParam.cancelScheduledValues(cancelTime),previousLastEvent!==currentLastEvent&&void 0!==currentLastEvent&&("exponentialRampToValue"===currentLastEvent.type?nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value,currentLastEvent.endTime):"linearRampToValue"===currentLastEvent.type?nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value,currentLastEvent.endTime):"setValue"===currentLastEvent.type?nativeAudioParam.setValueAtTime(currentLastEvent.value,currentLastEvent.startTime):"setValueCurve"===currentLastEvent.type&&nativeAudioParam.setValueCurveAtTime(currentLastEvent.values,currentLastEvent.startTime,currentLastEvent.duration))}return audioParam},cancelScheduledValues:cancelTime=>(null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime)),nativeAudioParam.cancelScheduledValues(cancelTime),audioParam),exponentialRampToValueAtTime(value,endTime){if(0===value)throw new RangeError;if(!Number.isFinite(endTime)||endTime<0)throw new RangeError;return null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createExponentialRampToValueAutomationEvent(value,endTime)),nativeAudioParam.exponentialRampToValueAtTime(value,endTime),audioParam},linearRampToValueAtTime:(value,endTime)=>(null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createLinearRampToValueAutomationEvent(value,endTime)),nativeAudioParam.linearRampToValueAtTime(value,endTime),audioParam),setTargetAtTime:(target,startTime,timeConstant)=>(null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createSetTargetAutomationEvent(target,startTime,timeConstant)),nativeAudioParam.setTargetAtTime(target,startTime,timeConstant),audioParam),setValueAtTime:(value,startTime)=>(null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createSetValueAutomationEvent(value,startTime)),nativeAudioParam.setValueAtTime(value,startTime),audioParam),setValueCurveAtTime(values,startTime,duration){const convertedValues=values instanceof Float32Array?values:new Float32Array(values);if(null!==nativeAudioContextConstructor&&"webkitAudioContext"===nativeAudioContextConstructor.name){const endTime=startTime+duration,sampleRate=audioNode.context.sampleRate,firstSample=Math.ceil(startTime*sampleRate),lastSample=Math.floor(endTime*sampleRate),numberOfInterpolatedValues=lastSample-firstSample,interpolatedValues=new Float32Array(numberOfInterpolatedValues);for(let i=0;i<numberOfInterpolatedValues;i+=1){const theoreticIndex=(convertedValues.length-1)/duration*((firstSample+i)/sampleRate-startTime),lowerIndex=Math.floor(theoreticIndex),upperIndex=Math.ceil(theoreticIndex);interpolatedValues[i]=lowerIndex===upperIndex?convertedValues[lowerIndex]:(1-(theoreticIndex-lowerIndex))*convertedValues[lowerIndex]+(1-(upperIndex-theoreticIndex))*convertedValues[upperIndex]}null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues,startTime,duration)),nativeAudioParam.setValueCurveAtTime(interpolatedValues,startTime,duration);const timeOfLastSample=lastSample/sampleRate;timeOfLastSample<endTime&&setValueAtTimeUntilPossible(audioParam,interpolatedValues[interpolatedValues.length-1],timeOfLastSample),setValueAtTimeUntilPossible(audioParam,convertedValues[convertedValues.length-1],endTime)}else null===audioParamRenderer&&automationEventList.flush(audioNode.context.currentTime),automationEventList.add(createSetValueCurveAutomationEvent(convertedValues,startTime,duration)),nativeAudioParam.setValueCurveAtTime(convertedValues,startTime,duration);return audioParam}};return audioParamStore.set(audioParam,nativeAudioParam),audioParamAudioNodeStore.set(audioParam,audioNode),addAudioParamConnections(audioParam,audioParamRenderer),audioParam})((audioParamConnectionsStore=AUDIO_PARAM_CONNECTIONS_STORE,(audioParam,audioParamRenderer)=>{audioParamConnectionsStore.set(audioParam,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:audioParamRenderer})}),audioParamAudioNodeStore,AUDIO_PARAM_STORE,(automationEventList=>({replay(audioParam){for(const automationEvent of automationEventList)if("exponentialRampToValue"===automationEvent.type){const{endTime,value}=automationEvent;audioParam.exponentialRampToValueAtTime(value,endTime)}else if("linearRampToValue"===automationEvent.type){const{endTime,value}=automationEvent;audioParam.linearRampToValueAtTime(value,endTime)}else if("setTarget"===automationEvent.type){const{startTime,target,timeConstant}=automationEvent;audioParam.setTargetAtTime(target,startTime,timeConstant)}else if("setValue"===automationEvent.type){const{startTime,value}=automationEvent;audioParam.setValueAtTime(value,startTime)}else{if("setValueCurve"!==automationEvent.type)throw new Error("Can't apply an unknown automation.");{const{duration,startTime,values}=automationEvent;audioParam.setValueCurveAtTime(values,startTime,duration)}}}})),bundle.createCancelAndHoldAutomationEvent,bundle.createCancelScheduledValuesAutomationEvent,bundle.createExponentialRampToValueAutomationEvent,bundle.createLinearRampToValueAutomationEvent,bundle.createSetTargetAutomationEvent,bundle.createSetValueAutomationEvent,bundle.createSetValueCurveAutomationEvent,nativeAudioContextConstructor,setValueAtTimeUntilPossible);var audioParamConnectionsStore;const audioBufferSourceNodeConstructor=((audioNodeConstructor,createAudioBufferSourceNodeRenderer,createAudioParam,createInvalidStateError,createNativeAudioBufferSourceNode,getNativeContext,isNativeOfflineAudioContext,wrapEventListener)=>class AudioBufferSourceNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...audio_buffer_source_node_constructor_DEFAULT_OPTIONS,...options},nativeAudioBufferSourceNode=createNativeAudioBufferSourceNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext),audioBufferSourceNodeRenderer=isOffline?createAudioBufferSourceNodeRenderer():null;super(context,!1,nativeAudioBufferSourceNode,audioBufferSourceNodeRenderer),this._audioBufferSourceNodeRenderer=audioBufferSourceNodeRenderer,this._isBufferNullified=!1,this._isBufferSet=null!==mergedOptions.buffer,this._nativeAudioBufferSourceNode=nativeAudioBufferSourceNode,this._onended=null,this._playbackRate=createAudioParam(this,isOffline,nativeAudioBufferSourceNode.playbackRate,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(value){if(this._nativeAudioBufferSourceNode.buffer=value,null!==value){if(this._isBufferSet)throw createInvalidStateError();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(value){this._nativeAudioBufferSourceNode.loop=value}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(value){this._nativeAudioBufferSourceNode.loopEnd=value}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(value){this._nativeAudioBufferSourceNode.loopStart=value}get onended(){return this._onended}set onended(value){const wrappedListener="function"==typeof value?wrapEventListener(this,value):null;this._nativeAudioBufferSourceNode.onended=wrappedListener;const nativeOnEnded=this._nativeAudioBufferSourceNode.onended;this._onended=null!==nativeOnEnded&&nativeOnEnded===wrappedListener?value:nativeOnEnded}get playbackRate(){return this._playbackRate}start(when=0,offset=0,duration){if(this._nativeAudioBufferSourceNode.start(when,offset,duration),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.start=void 0===duration?[when,offset]:[when,offset,duration]),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(when=0){this._nativeAudioBufferSourceNode.stop(when),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=when)}})(audioNodeConstructor,createAudioBufferSourceNodeRenderer,createAudioParam,createInvalidStateError,createNativeAudioBufferSourceNode,getNativeContext,isNativeOfflineAudioContext,wrapEventListener),audioDestinationNodeConstructor=((audioNodeConstructor,createAudioDestinationNodeRenderer,createIndexSizeError,createInvalidStateError,createNativeAudioDestinationNode,getNativeContext,isNativeOfflineAudioContext,renderInputsOfAudioNode)=>class AudioDestinationNode extends audioNodeConstructor{constructor(context,channelCount){const nativeContext=getNativeContext(context),isOffline=isNativeOfflineAudioContext(nativeContext),nativeAudioDestinationNode=createNativeAudioDestinationNode(nativeContext,channelCount,isOffline);super(context,!1,nativeAudioDestinationNode,isOffline?createAudioDestinationNodeRenderer(renderInputsOfAudioNode):null),this._isNodeOfNativeOfflineAudioContext=isOffline,this._nativeAudioDestinationNode=nativeAudioDestinationNode}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(value){if(this._isNodeOfNativeOfflineAudioContext)throw createInvalidStateError();if(value>this._nativeAudioDestinationNode.maxChannelCount)throw createIndexSizeError();this._nativeAudioDestinationNode.channelCount=value}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(value){if(this._isNodeOfNativeOfflineAudioContext)throw createInvalidStateError();this._nativeAudioDestinationNode.channelCountMode=value}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}})(audioNodeConstructor,(renderInputsOfAudioNode=>{const renderedNativeAudioDestinationNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeAudioDestinationNode=renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioDestinationNode?Promise.resolve(renderedNativeAudioDestinationNode):(async(proxy,nativeOfflineAudioContext)=>{const nativeAudioDestinationNode=nativeOfflineAudioContext.destination;return renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext,nativeAudioDestinationNode),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAudioDestinationNode),nativeAudioDestinationNode})(proxy,nativeOfflineAudioContext)}}}),createIndexSizeError,createInvalidStateError,((createNativeGainNode,overwriteAccessors)=>(nativeContext,channelCount,isNodeOfNativeOfflineAudioContext)=>{const nativeAudioDestinationNode=nativeContext.destination;if(nativeAudioDestinationNode.channelCount!==channelCount)try{nativeAudioDestinationNode.channelCount=channelCount}catch{}isNodeOfNativeOfflineAudioContext&&"explicit"!==nativeAudioDestinationNode.channelCountMode&&(nativeAudioDestinationNode.channelCountMode="explicit"),0===nativeAudioDestinationNode.maxChannelCount&&Object.defineProperty(nativeAudioDestinationNode,"maxChannelCount",{value:channelCount});const gainNode=createNativeGainNode(nativeContext,{channelCount,channelCountMode:nativeAudioDestinationNode.channelCountMode,channelInterpretation:nativeAudioDestinationNode.channelInterpretation,gain:1});return overwriteAccessors(gainNode,"channelCount",(get=>()=>get.call(gainNode)),(set=>value=>{set.call(gainNode,value);try{nativeAudioDestinationNode.channelCount=value}catch(err){if(value>nativeAudioDestinationNode.maxChannelCount)throw err}})),overwriteAccessors(gainNode,"channelCountMode",(get=>()=>get.call(gainNode)),(set=>value=>{set.call(gainNode,value),nativeAudioDestinationNode.channelCountMode=value})),overwriteAccessors(gainNode,"channelInterpretation",(get=>()=>get.call(gainNode)),(set=>value=>{set.call(gainNode,value),nativeAudioDestinationNode.channelInterpretation=value})),Object.defineProperty(gainNode,"maxChannelCount",{get:()=>nativeAudioDestinationNode.maxChannelCount}),gainNode.connect(nativeAudioDestinationNode),gainNode})(createNativeGainNode,overwriteAccessors),getNativeContext,isNativeOfflineAudioContext,renderInputsOfAudioNode),createBiquadFilterNodeRenderer=((connectAudioParam,createNativeBiquadFilterNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeBiquadFilterNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeBiquadFilterNode=renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeBiquadFilterNode?Promise.resolve(renderedNativeBiquadFilterNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeBiquadFilterNode=getNativeAudioNode(proxy);const nativeBiquadFilterNodeIsOwnedByContext=isOwnedByContext(nativeBiquadFilterNode,nativeOfflineAudioContext);if(!nativeBiquadFilterNodeIsOwnedByContext){const options={Q:nativeBiquadFilterNode.Q.value,channelCount:nativeBiquadFilterNode.channelCount,channelCountMode:nativeBiquadFilterNode.channelCountMode,channelInterpretation:nativeBiquadFilterNode.channelInterpretation,detune:nativeBiquadFilterNode.detune.value,frequency:nativeBiquadFilterNode.frequency.value,gain:nativeBiquadFilterNode.gain.value,type:nativeBiquadFilterNode.type};nativeBiquadFilterNode=createNativeBiquadFilterNode(nativeOfflineAudioContext,options)}return renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext,nativeBiquadFilterNode),nativeBiquadFilterNodeIsOwnedByContext?(await connectAudioParam(nativeOfflineAudioContext,proxy.Q,nativeBiquadFilterNode.Q),await connectAudioParam(nativeOfflineAudioContext,proxy.detune,nativeBiquadFilterNode.detune),await connectAudioParam(nativeOfflineAudioContext,proxy.frequency,nativeBiquadFilterNode.frequency),await connectAudioParam(nativeOfflineAudioContext,proxy.gain,nativeBiquadFilterNode.gain)):(await renderAutomation(nativeOfflineAudioContext,proxy.Q,nativeBiquadFilterNode.Q),await renderAutomation(nativeOfflineAudioContext,proxy.detune,nativeBiquadFilterNode.detune),await renderAutomation(nativeOfflineAudioContext,proxy.frequency,nativeBiquadFilterNode.frequency),await renderAutomation(nativeOfflineAudioContext,proxy.gain,nativeBiquadFilterNode.gain)),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeBiquadFilterNode),nativeBiquadFilterNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeBiquadFilterNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),setAudioNodeTailTime=(audioNodeTailTimeStore=>(audioNode,tailTime)=>audioNodeTailTimeStore.set(audioNode,tailTime))(audioNodeTailTimeStore),biquadFilterNodeConstructor=((audioNodeConstructor,createAudioParam,createBiquadFilterNodeRenderer,createInvalidAccessError,createNativeBiquadFilterNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class BiquadFilterNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...biquad_filter_node_constructor_DEFAULT_OPTIONS,...options},nativeBiquadFilterNode=createNativeBiquadFilterNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativeBiquadFilterNode,isOffline?createBiquadFilterNodeRenderer():null),this._Q=createAudioParam(this,isOffline,nativeBiquadFilterNode.Q,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._detune=createAudioParam(this,isOffline,nativeBiquadFilterNode.detune,1200*Math.log2(MOST_POSITIVE_SINGLE_FLOAT),-1200*Math.log2(MOST_POSITIVE_SINGLE_FLOAT)),this._frequency=createAudioParam(this,isOffline,nativeBiquadFilterNode.frequency,context.sampleRate/2,0),this._gain=createAudioParam(this,isOffline,nativeBiquadFilterNode.gain,40*Math.log10(MOST_POSITIVE_SINGLE_FLOAT),MOST_NEGATIVE_SINGLE_FLOAT),this._nativeBiquadFilterNode=nativeBiquadFilterNode,setAudioNodeTailTime(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(value){this._nativeBiquadFilterNode.type=value}getFrequencyResponse(frequencyHz,magResponse,phaseResponse){try{this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz,magResponse,phaseResponse)}catch(err){if(11===err.code)throw createInvalidAccessError();throw err}if(frequencyHz.length!==magResponse.length||magResponse.length!==phaseResponse.length)throw createInvalidAccessError()}})(audioNodeConstructor,createAudioParam,createBiquadFilterNodeRenderer,createInvalidAccessError,createNativeBiquadFilterNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),monitorConnections=((insertElementInSet,isNativeAudioNode)=>(nativeAudioNode,whenConnected,whenDisconnected)=>{const connections=new Set;var connect,disconnect;return nativeAudioNode.connect=(connect=nativeAudioNode.connect,(destination,output=0,input=0)=>{const wasDisconnected=0===connections.size;if(isNativeAudioNode(destination))return connect.call(nativeAudioNode,destination,output,input),insertElementInSet(connections,[destination,output,input],(connection=>connection[0]===destination&&connection[1]===output&&connection[2]===input),!0),wasDisconnected&&whenConnected(),destination;connect.call(nativeAudioNode,destination,output),insertElementInSet(connections,[destination,output],(connection=>connection[0]===destination&&connection[1]===output),!0),wasDisconnected&&whenConnected()}),nativeAudioNode.disconnect=(disconnect=nativeAudioNode.disconnect,(destinationOrOutput,output,input)=>{const wasConnected=connections.size>0;if(void 0===destinationOrOutput)disconnect.apply(nativeAudioNode),connections.clear();else if("number"==typeof destinationOrOutput){disconnect.call(nativeAudioNode,destinationOrOutput);for(const connection of connections)connection[1]===destinationOrOutput&&connections.delete(connection)}else{isNativeAudioNode(destinationOrOutput)?disconnect.call(nativeAudioNode,destinationOrOutput,output,input):disconnect.call(nativeAudioNode,destinationOrOutput,output);for(const connection of connections)connection[0]!==destinationOrOutput||void 0!==output&&connection[1]!==output||void 0!==input&&connection[2]!==input||connections.delete(connection)}const isDisconnected=0===connections.size;wasConnected&&isDisconnected&&whenDisconnected()}),nativeAudioNode})(insertElementInSet,module_isNativeAudioNode),wrapChannelMergerNode=((createInvalidStateError,monitorConnections)=>(nativeContext,channelMergerNode)=>{channelMergerNode.channelCount=1,channelMergerNode.channelCountMode="explicit",Object.defineProperty(channelMergerNode,"channelCount",{get:()=>1,set:()=>{throw createInvalidStateError()}}),Object.defineProperty(channelMergerNode,"channelCountMode",{get:()=>"explicit",set:()=>{throw createInvalidStateError()}});const audioBufferSourceNode=nativeContext.createBufferSource();monitorConnections(channelMergerNode,(()=>{const length=channelMergerNode.numberOfInputs;for(let i=0;i<length;i+=1)audioBufferSourceNode.connect(channelMergerNode,0,i)}),(()=>audioBufferSourceNode.disconnect(channelMergerNode)))})(createInvalidStateError,monitorConnections),createNativeChannelMergerNode=((nativeAudioContextConstructor,wrapChannelMergerNode)=>(nativeContext,options)=>{const nativeChannelMergerNode=nativeContext.createChannelMerger(options.numberOfInputs);return null!==nativeAudioContextConstructor&&"webkitAudioContext"===nativeAudioContextConstructor.name&&wrapChannelMergerNode(nativeContext,nativeChannelMergerNode),assignNativeAudioNodeOptions(nativeChannelMergerNode,options),nativeChannelMergerNode})(nativeAudioContextConstructor,wrapChannelMergerNode),createChannelMergerNodeRenderer=((createNativeChannelMergerNode,getNativeAudioNode,renderInputsOfAudioNode)=>()=>{const renderedNativeAudioNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeAudioNode=renderedNativeAudioNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioNode?Promise.resolve(renderedNativeAudioNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeAudioNode=getNativeAudioNode(proxy);if(!isOwnedByContext(nativeAudioNode,nativeOfflineAudioContext)){const options={channelCount:nativeAudioNode.channelCount,channelCountMode:nativeAudioNode.channelCountMode,channelInterpretation:nativeAudioNode.channelInterpretation,numberOfInputs:nativeAudioNode.numberOfInputs};nativeAudioNode=createNativeChannelMergerNode(nativeOfflineAudioContext,options)}return renderedNativeAudioNodes.set(nativeOfflineAudioContext,nativeAudioNode),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAudioNode),nativeAudioNode})(proxy,nativeOfflineAudioContext)}}})(createNativeChannelMergerNode,getNativeAudioNode,renderInputsOfAudioNode),channelMergerNodeConstructor=((audioNodeConstructor,createChannelMergerNodeRenderer,createNativeChannelMergerNode,getNativeContext,isNativeOfflineAudioContext)=>class ChannelMergerNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...channel_merger_node_constructor_DEFAULT_OPTIONS,...options};super(context,!1,createNativeChannelMergerNode(nativeContext,mergedOptions),isNativeOfflineAudioContext(nativeContext)?createChannelMergerNodeRenderer():null)}})(audioNodeConstructor,createChannelMergerNodeRenderer,createNativeChannelMergerNode,getNativeContext,isNativeOfflineAudioContext),createChannelSplitterNodeRenderer=((createNativeChannelSplitterNode,getNativeAudioNode,renderInputsOfAudioNode)=>()=>{const renderedNativeAudioNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeAudioNode=renderedNativeAudioNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioNode?Promise.resolve(renderedNativeAudioNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeAudioNode=getNativeAudioNode(proxy);if(!isOwnedByContext(nativeAudioNode,nativeOfflineAudioContext)){const options={channelCount:nativeAudioNode.channelCount,channelCountMode:nativeAudioNode.channelCountMode,channelInterpretation:nativeAudioNode.channelInterpretation,numberOfOutputs:nativeAudioNode.numberOfOutputs};nativeAudioNode=createNativeChannelSplitterNode(nativeOfflineAudioContext,options)}return renderedNativeAudioNodes.set(nativeOfflineAudioContext,nativeAudioNode),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAudioNode),nativeAudioNode})(proxy,nativeOfflineAudioContext)}}})(createNativeChannelSplitterNode,getNativeAudioNode,renderInputsOfAudioNode),channelSplitterNodeConstructor=((audioNodeConstructor,createChannelSplitterNodeRenderer,createNativeChannelSplitterNode,getNativeContext,isNativeOfflineAudioContext,sanitizeChannelSplitterOptions)=>class ChannelSplitterNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions=sanitizeChannelSplitterOptions({...channel_splitter_node_constructor_DEFAULT_OPTIONS,...options});super(context,!1,createNativeChannelSplitterNode(nativeContext,mergedOptions),isNativeOfflineAudioContext(nativeContext)?createChannelSplitterNodeRenderer():null)}})(audioNodeConstructor,createChannelSplitterNodeRenderer,createNativeChannelSplitterNode,getNativeContext,isNativeOfflineAudioContext,(options=>({...options,channelCount:options.numberOfOutputs}))),createNativeConstantSourceNodeFaker=((addSilentConnection,createNativeAudioBufferSourceNode,createNativeGainNode,monitorConnections)=>(nativeContext,{offset,...audioNodeOptions})=>{const audioBuffer=nativeContext.createBuffer(1,2,44100),audioBufferSourceNode=createNativeAudioBufferSourceNode(nativeContext,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),gainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:offset}),channelData=audioBuffer.getChannelData(0);channelData[0]=1,channelData[1]=1,audioBufferSourceNode.buffer=audioBuffer,audioBufferSourceNode.loop=!0;const nativeConstantSourceNodeFaker={get bufferSize(){},get channelCount(){return gainNode.channelCount},set channelCount(value){gainNode.channelCount=value},get channelCountMode(){return gainNode.channelCountMode},set channelCountMode(value){gainNode.channelCountMode=value},get channelInterpretation(){return gainNode.channelInterpretation},set channelInterpretation(value){gainNode.channelInterpretation=value},get context(){return gainNode.context},get inputs(){return[]},get numberOfInputs(){return audioBufferSourceNode.numberOfInputs},get numberOfOutputs(){return gainNode.numberOfOutputs},get offset(){return gainNode.gain},get onended(){return audioBufferSourceNode.onended},set onended(value){audioBufferSourceNode.onended=value},addEventListener:(...args)=>audioBufferSourceNode.addEventListener(args[0],args[1],args[2]),dispatchEvent:(...args)=>audioBufferSourceNode.dispatchEvent(args[0]),removeEventListener:(...args)=>audioBufferSourceNode.removeEventListener(args[0],args[1],args[2]),start(when=0){audioBufferSourceNode.start.call(audioBufferSourceNode,when)},stop(when=0){audioBufferSourceNode.stop.call(audioBufferSourceNode,when)}};return addSilentConnection(nativeContext,audioBufferSourceNode),monitorConnections(interceptConnections(nativeConstantSourceNodeFaker,gainNode),(()=>audioBufferSourceNode.connect(gainNode)),(()=>audioBufferSourceNode.disconnect(gainNode)))})(addSilentConnection,createNativeAudioBufferSourceNode,createNativeGainNode,monitorConnections),createNativeConstantSourceNode=((addSilentConnection,cacheTestResult,createNativeConstantSourceNodeFaker,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport)=>(nativeContext,options)=>{if(void 0===nativeContext.createConstantSource)return createNativeConstantSourceNodeFaker(nativeContext,options);const nativeConstantSourceNode=nativeContext.createConstantSource();return assignNativeAudioNodeOptions(nativeConstantSourceNode,options),assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode,options,"offset"),cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode),cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode),addSilentConnection(nativeContext,nativeConstantSourceNode),nativeConstantSourceNode})(addSilentConnection,cacheTestResult,createNativeConstantSourceNodeFaker,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport),createConstantSourceNodeRenderer=((connectAudioParam,createNativeConstantSourceNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeConstantSourceNodes=new WeakMap;let start=null,stop=null;return{set start(value){start=value},set stop(value){stop=value},render(proxy,nativeOfflineAudioContext){const renderedNativeConstantSourceNode=renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeConstantSourceNode?Promise.resolve(renderedNativeConstantSourceNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeConstantSourceNode=getNativeAudioNode(proxy);const nativeConstantSourceNodeIsOwnedByContext=isOwnedByContext(nativeConstantSourceNode,nativeOfflineAudioContext);if(!nativeConstantSourceNodeIsOwnedByContext){const options={channelCount:nativeConstantSourceNode.channelCount,channelCountMode:nativeConstantSourceNode.channelCountMode,channelInterpretation:nativeConstantSourceNode.channelInterpretation,offset:nativeConstantSourceNode.offset.value};nativeConstantSourceNode=createNativeConstantSourceNode(nativeOfflineAudioContext,options),null!==start&&nativeConstantSourceNode.start(start),null!==stop&&nativeConstantSourceNode.stop(stop)}return renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext,nativeConstantSourceNode),nativeConstantSourceNodeIsOwnedByContext?await connectAudioParam(nativeOfflineAudioContext,proxy.offset,nativeConstantSourceNode.offset):await renderAutomation(nativeOfflineAudioContext,proxy.offset,nativeConstantSourceNode.offset),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeConstantSourceNode),nativeConstantSourceNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeConstantSourceNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),constantSourceNodeConstructor=((audioNodeConstructor,createAudioParam,createConstantSourceNodeRendererFactory,createNativeConstantSourceNode,getNativeContext,isNativeOfflineAudioContext,wrapEventListener)=>class ConstantSourceNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...constant_source_node_constructor_DEFAULT_OPTIONS,...options},nativeConstantSourceNode=createNativeConstantSourceNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext),constantSourceNodeRenderer=isOffline?createConstantSourceNodeRendererFactory():null;super(context,!1,nativeConstantSourceNode,constantSourceNodeRenderer),this._constantSourceNodeRenderer=constantSourceNodeRenderer,this._nativeConstantSourceNode=nativeConstantSourceNode,this._offset=createAudioParam(this,isOffline,nativeConstantSourceNode.offset,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(value){const wrappedListener="function"==typeof value?wrapEventListener(this,value):null;this._nativeConstantSourceNode.onended=wrappedListener;const nativeOnEnded=this._nativeConstantSourceNode.onended;this._onended=null!==nativeOnEnded&&nativeOnEnded===wrappedListener?value:nativeOnEnded}start(when=0){if(this._nativeConstantSourceNode.start(when),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.start=when),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeConstantSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeConstantSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(when=0){this._nativeConstantSourceNode.stop(when),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=when)}})(audioNodeConstructor,createAudioParam,createConstantSourceNodeRenderer,createNativeConstantSourceNode,getNativeContext,isNativeOfflineAudioContext,wrapEventListener),createNativeConvolverNode=((createNotSupportedError,overwriteAccessors)=>(nativeContext,options)=>{const nativeConvolverNode=nativeContext.createConvolver();if(assignNativeAudioNodeOptions(nativeConvolverNode,options),options.disableNormalization===nativeConvolverNode.normalize&&(nativeConvolverNode.normalize=!options.disableNormalization),assignNativeAudioNodeOption(nativeConvolverNode,options,"buffer"),options.channelCount>2)throw createNotSupportedError();if(overwriteAccessors(nativeConvolverNode,"channelCount",(get=>()=>get.call(nativeConvolverNode)),(set=>value=>{if(value>2)throw createNotSupportedError();return set.call(nativeConvolverNode,value)})),"max"===options.channelCountMode)throw createNotSupportedError();return overwriteAccessors(nativeConvolverNode,"channelCountMode",(get=>()=>get.call(nativeConvolverNode)),(set=>value=>{if("max"===value)throw createNotSupportedError();return set.call(nativeConvolverNode,value)})),nativeConvolverNode})(createNotSupportedError,overwriteAccessors),createConvolverNodeRenderer=((createNativeConvolverNode,getNativeAudioNode,renderInputsOfAudioNode)=>()=>{const renderedNativeConvolverNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeConvolverNode=renderedNativeConvolverNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeConvolverNode?Promise.resolve(renderedNativeConvolverNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeConvolverNode=getNativeAudioNode(proxy);if(!isOwnedByContext(nativeConvolverNode,nativeOfflineAudioContext)){const options={buffer:nativeConvolverNode.buffer,channelCount:nativeConvolverNode.channelCount,channelCountMode:nativeConvolverNode.channelCountMode,channelInterpretation:nativeConvolverNode.channelInterpretation,disableNormalization:!nativeConvolverNode.normalize};nativeConvolverNode=createNativeConvolverNode(nativeOfflineAudioContext,options)}return renderedNativeConvolverNodes.set(nativeOfflineAudioContext,nativeConvolverNode),isNativeAudioNodeFaker(nativeConvolverNode)?await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeConvolverNode.inputs[0]):await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeConvolverNode),nativeConvolverNode})(proxy,nativeOfflineAudioContext)}}})(createNativeConvolverNode,getNativeAudioNode,renderInputsOfAudioNode),convolverNodeConstructor=((audioNodeConstructor,createConvolverNodeRenderer,createNativeConvolverNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class ConvolverNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...convolver_node_constructor_DEFAULT_OPTIONS,...options},nativeConvolverNode=createNativeConvolverNode(nativeContext,mergedOptions);super(context,!1,nativeConvolverNode,isNativeOfflineAudioContext(nativeContext)?createConvolverNodeRenderer():null),this._isBufferNullified=!1,this._nativeConvolverNode=nativeConvolverNode,null!==mergedOptions.buffer&&setAudioNodeTailTime(this,mergedOptions.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(value){if(this._nativeConvolverNode.buffer=value,null===value&&null!==this._nativeConvolverNode.buffer){const nativeContext=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=nativeContext.createBuffer(1,1,nativeContext.sampleRate),this._isBufferNullified=!0,setAudioNodeTailTime(this,0)}else this._isBufferNullified=!1,setAudioNodeTailTime(this,null===this._nativeConvolverNode.buffer?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(value){this._nativeConvolverNode.normalize=value}})(audioNodeConstructor,createConvolverNodeRenderer,createNativeConvolverNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),createDelayNodeRenderer=((connectAudioParam,createNativeDelayNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>maxDelayTime=>{const renderedNativeDelayNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeDelayNode=renderedNativeDelayNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeDelayNode?Promise.resolve(renderedNativeDelayNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeDelayNode=getNativeAudioNode(proxy);const nativeDelayNodeIsOwnedByContext=isOwnedByContext(nativeDelayNode,nativeOfflineAudioContext);if(!nativeDelayNodeIsOwnedByContext){const options={channelCount:nativeDelayNode.channelCount,channelCountMode:nativeDelayNode.channelCountMode,channelInterpretation:nativeDelayNode.channelInterpretation,delayTime:nativeDelayNode.delayTime.value,maxDelayTime};nativeDelayNode=createNativeDelayNode(nativeOfflineAudioContext,options)}return renderedNativeDelayNodes.set(nativeOfflineAudioContext,nativeDelayNode),nativeDelayNodeIsOwnedByContext?await connectAudioParam(nativeOfflineAudioContext,proxy.delayTime,nativeDelayNode.delayTime):await renderAutomation(nativeOfflineAudioContext,proxy.delayTime,nativeDelayNode.delayTime),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeDelayNode),nativeDelayNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeDelayNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),delayNodeConstructor=((audioNodeConstructor,createAudioParam,createDelayNodeRenderer,createNativeDelayNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class DelayNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...delay_node_constructor_DEFAULT_OPTIONS,...options},nativeDelayNode=createNativeDelayNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativeDelayNode,isOffline?createDelayNodeRenderer(mergedOptions.maxDelayTime):null),this._delayTime=createAudioParam(this,isOffline,nativeDelayNode.delayTime),setAudioNodeTailTime(this,mergedOptions.maxDelayTime)}get delayTime(){return this._delayTime}})(audioNodeConstructor,createAudioParam,createDelayNodeRenderer,createNativeDelayNode,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),createNativeDynamicsCompressorNode=(createNotSupportedError=>(nativeContext,options)=>{const nativeDynamicsCompressorNode=nativeContext.createDynamicsCompressor();if(assignNativeAudioNodeOptions(nativeDynamicsCompressorNode,options),options.channelCount>2)throw createNotSupportedError();if("max"===options.channelCountMode)throw createNotSupportedError();return assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode,options,"attack"),assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode,options,"knee"),assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode,options,"ratio"),assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode,options,"release"),assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode,options,"threshold"),nativeDynamicsCompressorNode})(createNotSupportedError),createDynamicsCompressorNodeRenderer=((connectAudioParam,createNativeDynamicsCompressorNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeDynamicsCompressorNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeDynamicsCompressorNode=renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeDynamicsCompressorNode?Promise.resolve(renderedNativeDynamicsCompressorNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeDynamicsCompressorNode=getNativeAudioNode(proxy);const nativeDynamicsCompressorNodeIsOwnedByContext=isOwnedByContext(nativeDynamicsCompressorNode,nativeOfflineAudioContext);if(!nativeDynamicsCompressorNodeIsOwnedByContext){const options={attack:nativeDynamicsCompressorNode.attack.value,channelCount:nativeDynamicsCompressorNode.channelCount,channelCountMode:nativeDynamicsCompressorNode.channelCountMode,channelInterpretation:nativeDynamicsCompressorNode.channelInterpretation,knee:nativeDynamicsCompressorNode.knee.value,ratio:nativeDynamicsCompressorNode.ratio.value,release:nativeDynamicsCompressorNode.release.value,threshold:nativeDynamicsCompressorNode.threshold.value};nativeDynamicsCompressorNode=createNativeDynamicsCompressorNode(nativeOfflineAudioContext,options)}return renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext,nativeDynamicsCompressorNode),nativeDynamicsCompressorNodeIsOwnedByContext?(await connectAudioParam(nativeOfflineAudioContext,proxy.attack,nativeDynamicsCompressorNode.attack),await connectAudioParam(nativeOfflineAudioContext,proxy.knee,nativeDynamicsCompressorNode.knee),await connectAudioParam(nativeOfflineAudioContext,proxy.ratio,nativeDynamicsCompressorNode.ratio),await connectAudioParam(nativeOfflineAudioContext,proxy.release,nativeDynamicsCompressorNode.release),await connectAudioParam(nativeOfflineAudioContext,proxy.threshold,nativeDynamicsCompressorNode.threshold)):(await renderAutomation(nativeOfflineAudioContext,proxy.attack,nativeDynamicsCompressorNode.attack),await renderAutomation(nativeOfflineAudioContext,proxy.knee,nativeDynamicsCompressorNode.knee),await renderAutomation(nativeOfflineAudioContext,proxy.ratio,nativeDynamicsCompressorNode.ratio),await renderAutomation(nativeOfflineAudioContext,proxy.release,nativeDynamicsCompressorNode.release),await renderAutomation(nativeOfflineAudioContext,proxy.threshold,nativeDynamicsCompressorNode.threshold)),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeDynamicsCompressorNode),nativeDynamicsCompressorNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeDynamicsCompressorNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),dynamicsCompressorNodeConstructor=((audioNodeConstructor,createAudioParam,createDynamicsCompressorNodeRenderer,createNativeDynamicsCompressorNode,createNotSupportedError,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class DynamicsCompressorNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...dynamics_compressor_node_constructor_DEFAULT_OPTIONS,...options},nativeDynamicsCompressorNode=createNativeDynamicsCompressorNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativeDynamicsCompressorNode,isOffline?createDynamicsCompressorNodeRenderer():null),this._attack=createAudioParam(this,isOffline,nativeDynamicsCompressorNode.attack),this._knee=createAudioParam(this,isOffline,nativeDynamicsCompressorNode.knee),this._nativeDynamicsCompressorNode=nativeDynamicsCompressorNode,this._ratio=createAudioParam(this,isOffline,nativeDynamicsCompressorNode.ratio),this._release=createAudioParam(this,isOffline,nativeDynamicsCompressorNode.release),this._threshold=createAudioParam(this,isOffline,nativeDynamicsCompressorNode.threshold),setAudioNodeTailTime(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(value){const previousChannelCount=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=value,value>2)throw this._nativeDynamicsCompressorNode.channelCount=previousChannelCount,createNotSupportedError()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(value){const previousChannelCount=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=value,"max"===value)throw this._nativeDynamicsCompressorNode.channelCountMode=previousChannelCount,createNotSupportedError()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}})(audioNodeConstructor,createAudioParam,createDynamicsCompressorNodeRenderer,createNativeDynamicsCompressorNode,createNotSupportedError,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),createGainNodeRenderer=((connectAudioParam,createNativeGainNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeGainNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeGainNode=renderedNativeGainNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeGainNode?Promise.resolve(renderedNativeGainNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeGainNode=getNativeAudioNode(proxy);const nativeGainNodeIsOwnedByContext=isOwnedByContext(nativeGainNode,nativeOfflineAudioContext);if(!nativeGainNodeIsOwnedByContext){const options={channelCount:nativeGainNode.channelCount,channelCountMode:nativeGainNode.channelCountMode,channelInterpretation:nativeGainNode.channelInterpretation,gain:nativeGainNode.gain.value};nativeGainNode=createNativeGainNode(nativeOfflineAudioContext,options)}return renderedNativeGainNodes.set(nativeOfflineAudioContext,nativeGainNode),nativeGainNodeIsOwnedByContext?await connectAudioParam(nativeOfflineAudioContext,proxy.gain,nativeGainNode.gain):await renderAutomation(nativeOfflineAudioContext,proxy.gain,nativeGainNode.gain),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeGainNode),nativeGainNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeGainNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),gainNodeConstructor=((audioNodeConstructor,createAudioParam,createGainNodeRenderer,createNativeGainNode,getNativeContext,isNativeOfflineAudioContext)=>class GainNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...gain_node_constructor_DEFAULT_OPTIONS,...options},nativeGainNode=createNativeGainNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativeGainNode,isOffline?createGainNodeRenderer():null),this._gain=createAudioParam(this,isOffline,nativeGainNode.gain,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT)}get gain(){return this._gain}})(audioNodeConstructor,createAudioParam,createGainNodeRenderer,createNativeGainNode,getNativeContext,isNativeOfflineAudioContext),createNativeIIRFilterNodeFaker=((createInvalidAccessError,createInvalidStateError,createNativeScriptProcessorNode,createNotSupportedError)=>(nativeContext,baseLatency,{channelCount,channelCountMode,channelInterpretation,feedback,feedforward})=>{const bufferSize=computeBufferSize(baseLatency,nativeContext.sampleRate),convertedFeedback=feedback instanceof Float64Array?feedback:new Float64Array(feedback),convertedFeedforward=feedforward instanceof Float64Array?feedforward:new Float64Array(feedforward),feedbackLength=convertedFeedback.length,feedforwardLength=convertedFeedforward.length,minLength=Math.min(feedbackLength,feedforwardLength);if(0===feedbackLength||feedbackLength>20)throw createNotSupportedError();if(0===convertedFeedback[0])throw createInvalidStateError();if(0===feedforwardLength||feedforwardLength>20)throw createNotSupportedError();if(0===convertedFeedforward[0])throw createInvalidStateError();if(1!==convertedFeedback[0]){for(let i=0;i<feedforwardLength;i+=1)convertedFeedforward[i]/=convertedFeedback[0];for(let i=1;i<feedbackLength;i+=1)convertedFeedback[i]/=convertedFeedback[0]}const scriptProcessorNode=createNativeScriptProcessorNode(nativeContext,bufferSize,channelCount,channelCount);scriptProcessorNode.channelCount=channelCount,scriptProcessorNode.channelCountMode=channelCountMode,scriptProcessorNode.channelInterpretation=channelInterpretation;const bufferIndexes=[],xBuffers=[],yBuffers=[];for(let i=0;i<channelCount;i+=1){bufferIndexes.push(0);const xBuffer=new Float32Array(32),yBuffer=new Float32Array(32);xBuffer.fill(0),yBuffer.fill(0),xBuffers.push(xBuffer),yBuffers.push(yBuffer)}scriptProcessorNode.onaudioprocess=event=>{const inputBuffer=event.inputBuffer,outputBuffer=event.outputBuffer,numberOfChannels=inputBuffer.numberOfChannels;for(let i=0;i<numberOfChannels;i+=1){const input=inputBuffer.getChannelData(i),output=outputBuffer.getChannelData(i);bufferIndexes[i]=filterBuffer(convertedFeedback,feedbackLength,convertedFeedforward,feedforwardLength,minLength,xBuffers[i],yBuffers[i],bufferIndexes[i],32,input,output)}};const nyquist=nativeContext.sampleRate/2;return interceptConnections({get bufferSize(){return bufferSize},get channelCount(){return scriptProcessorNode.channelCount},set channelCount(value){scriptProcessorNode.channelCount=value},get channelCountMode(){return scriptProcessorNode.channelCountMode},set channelCountMode(value){scriptProcessorNode.channelCountMode=value},get channelInterpretation(){return scriptProcessorNode.channelInterpretation},set channelInterpretation(value){scriptProcessorNode.channelInterpretation=value},get context(){return scriptProcessorNode.context},get inputs(){return[scriptProcessorNode]},get numberOfInputs(){return scriptProcessorNode.numberOfInputs},get numberOfOutputs(){return scriptProcessorNode.numberOfOutputs},addEventListener:(...args)=>scriptProcessorNode.addEventListener(args[0],args[1],args[2]),dispatchEvent:(...args)=>scriptProcessorNode.dispatchEvent(args[0]),getFrequencyResponse(frequencyHz,magResponse,phaseResponse){if(frequencyHz.length!==magResponse.length||magResponse.length!==phaseResponse.length)throw createInvalidAccessError();const length=frequencyHz.length;for(let i=0;i<length;i+=1){const omega=-Math.PI*(frequencyHz[i]/nyquist),z=[Math.cos(omega),Math.sin(omega)],response=divide(evaluatePolynomial(convertedFeedforward,z),evaluatePolynomial(convertedFeedback,z));magResponse[i]=Math.sqrt(response[0]*response[0]+response[1]*response[1]),phaseResponse[i]=Math.atan2(response[1],response[0])}},removeEventListener:(...args)=>scriptProcessorNode.removeEventListener(args[0],args[1],args[2])},scriptProcessorNode)})(createInvalidAccessError,createInvalidStateError,createNativeScriptProcessorNode,createNotSupportedError),renderNativeOfflineAudioContext=((cacheTestResult,createNativeGainNode,createNativeScriptProcessorNode,testOfflineAudioContextCurrentTimeSupport)=>nativeOfflineAudioContext=>cacheTestResult(testPromiseSupport,(()=>testPromiseSupport(nativeOfflineAudioContext)))?Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport,testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported=>{if(!isOfflineAudioContextCurrentTimeSupported){const scriptProcessorNode=createNativeScriptProcessorNode(nativeOfflineAudioContext,512,0,1);nativeOfflineAudioContext.oncomplete=()=>{scriptProcessorNode.onaudioprocess=null,scriptProcessorNode.disconnect()},scriptProcessorNode.onaudioprocess=()=>nativeOfflineAudioContext.currentTime,scriptProcessorNode.connect(nativeOfflineAudioContext.destination)}return nativeOfflineAudioContext.startRendering()})):new Promise((resolve=>{const gainNode=createNativeGainNode(nativeOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});nativeOfflineAudioContext.oncomplete=event=>{gainNode.disconnect(),resolve(event.renderedBuffer)},gainNode.connect(nativeOfflineAudioContext.destination),nativeOfflineAudioContext.startRendering()})))(cacheTestResult,createNativeGainNode,createNativeScriptProcessorNode,((createNativeGainNode,nativeOfflineAudioContextConstructor)=>()=>{if(null===nativeOfflineAudioContextConstructor)return Promise.resolve(!1);const nativeOfflineAudioContext=new nativeOfflineAudioContextConstructor(1,1,44100),gainNode=createNativeGainNode(nativeOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise((resolve=>{nativeOfflineAudioContext.oncomplete=()=>{gainNode.disconnect(),resolve(0!==nativeOfflineAudioContext.currentTime)},nativeOfflineAudioContext.startRendering()}))})(createNativeGainNode,nativeOfflineAudioContextConstructor)),createIIRFilterNodeRenderer=((createNativeAudioBufferSourceNode,getNativeAudioNode,nativeOfflineAudioContextConstructor,renderInputsOfAudioNode,renderNativeOfflineAudioContext)=>(feedback,feedforward)=>{const renderedNativeAudioNodes=new WeakMap;let filteredBufferPromise=null;const createAudioNode=async(proxy,nativeOfflineAudioContext)=>{let nativeAudioBufferSourceNode=null,nativeIIRFilterNode=getNativeAudioNode(proxy);const nativeIIRFilterNodeIsOwnedByContext=isOwnedByContext(nativeIIRFilterNode,nativeOfflineAudioContext);if(void 0===nativeOfflineAudioContext.createIIRFilter?nativeAudioBufferSourceNode=createNativeAudioBufferSourceNode(nativeOfflineAudioContext,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):nativeIIRFilterNodeIsOwnedByContext||(nativeIIRFilterNode=nativeOfflineAudioContext.createIIRFilter(feedforward,feedback)),renderedNativeAudioNodes.set(nativeOfflineAudioContext,null===nativeAudioBufferSourceNode?nativeIIRFilterNode:nativeAudioBufferSourceNode),null!==nativeAudioBufferSourceNode){if(null===filteredBufferPromise){if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");const partialOfflineAudioContext=new nativeOfflineAudioContextConstructor(proxy.context.destination.channelCount,proxy.context.length,nativeOfflineAudioContext.sampleRate);filteredBufferPromise=(async()=>{await renderInputsOfAudioNode(proxy,partialOfflineAudioContext,partialOfflineAudioContext.destination);return((renderedBuffer,nativeOfflineAudioContext,feedback,feedforward)=>{const convertedFeedback=feedback instanceof Float64Array?feedback:new Float64Array(feedback),convertedFeedforward=feedforward instanceof Float64Array?feedforward:new Float64Array(feedforward),feedbackLength=convertedFeedback.length,feedforwardLength=convertedFeedforward.length,minLength=Math.min(feedbackLength,feedforwardLength);if(1!==convertedFeedback[0]){for(let i=0;i<feedbackLength;i+=1)convertedFeedforward[i]/=convertedFeedback[0];for(let i=1;i<feedforwardLength;i+=1)convertedFeedback[i]/=convertedFeedback[0]}const xBuffer=new Float32Array(32),yBuffer=new Float32Array(32),filteredBuffer=nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels,renderedBuffer.length,renderedBuffer.sampleRate),numberOfChannels=renderedBuffer.numberOfChannels;for(let i=0;i<numberOfChannels;i+=1){const input=renderedBuffer.getChannelData(i),output=filteredBuffer.getChannelData(i);xBuffer.fill(0),yBuffer.fill(0),filterBuffer(convertedFeedback,feedbackLength,convertedFeedforward,feedforwardLength,minLength,xBuffer,yBuffer,0,32,input,output)}return filteredBuffer})(await renderNativeOfflineAudioContext(partialOfflineAudioContext),nativeOfflineAudioContext,feedback,feedforward)})()}const filteredBuffer=await filteredBufferPromise;return nativeAudioBufferSourceNode.buffer=filteredBuffer,nativeAudioBufferSourceNode.start(0),nativeAudioBufferSourceNode}return await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeIIRFilterNode),nativeIIRFilterNode};return{render(proxy,nativeOfflineAudioContext){const renderedNativeAudioNode=renderedNativeAudioNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioNode?Promise.resolve(renderedNativeAudioNode):createAudioNode(proxy,nativeOfflineAudioContext)}}})(createNativeAudioBufferSourceNode,getNativeAudioNode,nativeOfflineAudioContextConstructor,renderInputsOfAudioNode,renderNativeOfflineAudioContext),createNativeIIRFilterNode=(createNativeIIRFilterNodeFaker=>(nativeContext,baseLatency,options)=>{if(void 0===nativeContext.createIIRFilter)return createNativeIIRFilterNodeFaker(nativeContext,baseLatency,options);const nativeIIRFilterNode=nativeContext.createIIRFilter(options.feedforward,options.feedback);return assignNativeAudioNodeOptions(nativeIIRFilterNode,options),nativeIIRFilterNode})(createNativeIIRFilterNodeFaker),iIRFilterNodeConstructor=((audioNodeConstructor,createNativeIIRFilterNode,createIIRFilterNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class IIRFilterNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),isOffline=isNativeOfflineAudioContext(nativeContext),mergedOptions={...iir_filter_node_constructor_DEFAULT_OPTIONS,...options},nativeIIRFilterNode=createNativeIIRFilterNode(nativeContext,isOffline?null:context.baseLatency,mergedOptions);super(context,!1,nativeIIRFilterNode,isOffline?createIIRFilterNodeRenderer(mergedOptions.feedback,mergedOptions.feedforward):null),(nativeIIRFilterNode=>{var getFrequencyResponse;nativeIIRFilterNode.getFrequencyResponse=(getFrequencyResponse=nativeIIRFilterNode.getFrequencyResponse,(frequencyHz,magResponse,phaseResponse)=>{if(frequencyHz.length!==magResponse.length||magResponse.length!==phaseResponse.length)throw createInvalidAccessError();return getFrequencyResponse.call(nativeIIRFilterNode,frequencyHz,magResponse,phaseResponse)})})(nativeIIRFilterNode),this._nativeIIRFilterNode=nativeIIRFilterNode,setAudioNodeTailTime(this,1)}getFrequencyResponse(frequencyHz,magResponse,phaseResponse){return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz,magResponse,phaseResponse)}})(audioNodeConstructor,createNativeIIRFilterNode,createIIRFilterNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),createAudioListener=((createAudioParam,createNativeChannelMergerNode,createNativeConstantSourceNode,createNativeScriptProcessorNode,createNotSupportedError,getFirstSample,isNativeOfflineAudioContext,overwriteAccessors)=>(context,nativeContext)=>{const nativeListener=nativeContext.listener,{forwardX,forwardY,forwardZ,positionX,positionY,positionZ,upX,upY,upZ}=void 0===nativeListener.forwardX?(()=>{const buffer=new Float32Array(1),channelMergerNode=createNativeChannelMergerNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),isOffline=isNativeOfflineAudioContext(nativeContext);let isScriptProcessorNodeCreated=!1,lastOrientation=[0,0,-1,0,1,0],lastPosition=[0,0,0];const createScriptProcessorNode=()=>{if(isScriptProcessorNodeCreated)return;isScriptProcessorNodeCreated=!0;const scriptProcessorNode=createNativeScriptProcessorNode(nativeContext,256,9,0);scriptProcessorNode.onaudioprocess=({inputBuffer})=>{const orientation=[getFirstSample(inputBuffer,buffer,0),getFirstSample(inputBuffer,buffer,1),getFirstSample(inputBuffer,buffer,2),getFirstSample(inputBuffer,buffer,3),getFirstSample(inputBuffer,buffer,4),getFirstSample(inputBuffer,buffer,5)];orientation.some(((value,index)=>value!==lastOrientation[index]))&&(nativeListener.setOrientation(...orientation),lastOrientation=orientation);const positon=[getFirstSample(inputBuffer,buffer,6),getFirstSample(inputBuffer,buffer,7),getFirstSample(inputBuffer,buffer,8)];positon.some(((value,index)=>value!==lastPosition[index]))&&(nativeListener.setPosition(...positon),lastPosition=positon)},channelMergerNode.connect(scriptProcessorNode)},createSetOrientation=index=>value=>{value!==lastOrientation[index]&&(lastOrientation[index]=value,nativeListener.setOrientation(...lastOrientation))},createSetPosition=index=>value=>{value!==lastPosition[index]&&(lastPosition[index]=value,nativeListener.setPosition(...lastPosition))},createFakeAudioParam=(input,initialValue,setValue)=>{const constantSourceNode=createNativeConstantSourceNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:initialValue});constantSourceNode.connect(channelMergerNode,0,input),constantSourceNode.start(),Object.defineProperty(constantSourceNode.offset,"defaultValue",{get:()=>initialValue});const audioParam=createAudioParam({context},isOffline,constantSourceNode.offset,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT);var cancelAndHoldAtTime,cancelScheduledValues,exponentialRampToValueAtTime,linearRampToValueAtTime,setTargetAtTime,setValueAtTime,setValueCurveAtTime;return overwriteAccessors(audioParam,"value",(get=>()=>get.call(audioParam)),(set=>value=>{try{set.call(audioParam,value)}catch(err){if(9!==err.code)throw err}createScriptProcessorNode(),isOffline&&setValue(value)})),audioParam.cancelAndHoldAtTime=(cancelAndHoldAtTime=audioParam.cancelAndHoldAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=cancelAndHoldAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.cancelScheduledValues=(cancelScheduledValues=audioParam.cancelScheduledValues,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=cancelScheduledValues.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.exponentialRampToValueAtTime=(exponentialRampToValueAtTime=audioParam.exponentialRampToValueAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=exponentialRampToValueAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.linearRampToValueAtTime=(linearRampToValueAtTime=audioParam.linearRampToValueAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=linearRampToValueAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.setTargetAtTime=(setTargetAtTime=audioParam.setTargetAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=setTargetAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.setValueAtTime=(setValueAtTime=audioParam.setValueAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=setValueAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam.setValueCurveAtTime=(setValueCurveAtTime=audioParam.setValueCurveAtTime,isOffline?()=>{throw createNotSupportedError()}:(...args)=>{const value=setValueCurveAtTime.apply(audioParam,args);return createScriptProcessorNode(),value}),audioParam};return{forwardX:createFakeAudioParam(0,0,createSetOrientation(0)),forwardY:createFakeAudioParam(1,0,createSetOrientation(1)),forwardZ:createFakeAudioParam(2,-1,createSetOrientation(2)),positionX:createFakeAudioParam(6,0,createSetPosition(0)),positionY:createFakeAudioParam(7,0,createSetPosition(1)),positionZ:createFakeAudioParam(8,0,createSetPosition(2)),upX:createFakeAudioParam(3,0,createSetOrientation(3)),upY:createFakeAudioParam(4,1,createSetOrientation(4)),upZ:createFakeAudioParam(5,0,createSetOrientation(5))}})():nativeListener;return{get forwardX(){return forwardX},get forwardY(){return forwardY},get forwardZ(){return forwardZ},get positionX(){return positionX},get positionY(){return positionY},get positionZ(){return positionZ},get upX(){return upX},get upY(){return upY},get upZ(){return upZ}}})(createAudioParam,createNativeChannelMergerNode,createNativeConstantSourceNode,createNativeScriptProcessorNode,createNotSupportedError,getFirstSample,isNativeOfflineAudioContext,overwriteAccessors),unrenderedAudioWorkletNodeStore=new WeakMap,minimalBaseAudioContextConstructor=((audioDestinationNodeConstructor,createAudioListener,eventTargetConstructor,isNativeOfflineAudioContext,unrenderedAudioWorkletNodeStore,wrapEventListener)=>class MinimalBaseAudioContext extends eventTargetConstructor{constructor(_nativeContext,numberOfChannels){super(_nativeContext),this._nativeContext=_nativeContext,CONTEXT_STORE.set(this,_nativeContext),isNativeOfflineAudioContext(_nativeContext)&&unrenderedAudioWorkletNodeStore.set(_nativeContext,new Set),this._destination=new audioDestinationNodeConstructor(this,numberOfChannels),this._listener=createAudioListener(this,_nativeContext),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(value){const wrappedListener="function"==typeof value?wrapEventListener(this,value):null;this._nativeContext.onstatechange=wrappedListener;const nativeOnStateChange=this._nativeContext.onstatechange;this._onstatechange=null!==nativeOnStateChange&&nativeOnStateChange===wrappedListener?value:nativeOnStateChange}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}})(audioDestinationNodeConstructor,createAudioListener,eventTargetConstructor,isNativeOfflineAudioContext,unrenderedAudioWorkletNodeStore,wrapEventListener),createNativeOscillatorNode=((addSilentConnection,cacheTestResult,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)=>(nativeContext,options)=>{const nativeOscillatorNode=nativeContext.createOscillator();return assignNativeAudioNodeOptions(nativeOscillatorNode,options),assignNativeAudioNodeAudioParamValue(nativeOscillatorNode,options,"detune"),assignNativeAudioNodeAudioParamValue(nativeOscillatorNode,options,"frequency"),void 0!==options.periodicWave?nativeOscillatorNode.setPeriodicWave(options.periodicWave):assignNativeAudioNodeOption(nativeOscillatorNode,options,"type"),cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode),cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,(()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext)))||wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode,nativeContext),cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,(()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext)))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode),addSilentConnection(nativeContext,nativeOscillatorNode),nativeOscillatorNode})(addSilentConnection,cacheTestResult,testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls),createOscillatorNodeRenderer=((connectAudioParam,createNativeOscillatorNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeOscillatorNodes=new WeakMap;let periodicWave=null,start=null,stop=null;return{set periodicWave(value){periodicWave=value},set start(value){start=value},set stop(value){stop=value},render(proxy,nativeOfflineAudioContext){const renderedNativeOscillatorNode=renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeOscillatorNode?Promise.resolve(renderedNativeOscillatorNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeOscillatorNode=getNativeAudioNode(proxy);const nativeOscillatorNodeIsOwnedByContext=isOwnedByContext(nativeOscillatorNode,nativeOfflineAudioContext);if(!nativeOscillatorNodeIsOwnedByContext){const options={channelCount:nativeOscillatorNode.channelCount,channelCountMode:nativeOscillatorNode.channelCountMode,channelInterpretation:nativeOscillatorNode.channelInterpretation,detune:nativeOscillatorNode.detune.value,frequency:nativeOscillatorNode.frequency.value,periodicWave:null===periodicWave?void 0:periodicWave,type:nativeOscillatorNode.type};nativeOscillatorNode=createNativeOscillatorNode(nativeOfflineAudioContext,options),null!==start&&nativeOscillatorNode.start(start),null!==stop&&nativeOscillatorNode.stop(stop)}return renderedNativeOscillatorNodes.set(nativeOfflineAudioContext,nativeOscillatorNode),nativeOscillatorNodeIsOwnedByContext?(await connectAudioParam(nativeOfflineAudioContext,proxy.detune,nativeOscillatorNode.detune),await connectAudioParam(nativeOfflineAudioContext,proxy.frequency,nativeOscillatorNode.frequency)):(await renderAutomation(nativeOfflineAudioContext,proxy.detune,nativeOscillatorNode.detune),await renderAutomation(nativeOfflineAudioContext,proxy.frequency,nativeOscillatorNode.frequency)),await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeOscillatorNode),nativeOscillatorNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeOscillatorNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),oscillatorNodeConstructor=((audioNodeConstructor,createAudioParam,createNativeOscillatorNode,createOscillatorNodeRenderer,getNativeContext,isNativeOfflineAudioContext,wrapEventListener)=>class OscillatorNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...oscillator_node_constructor_DEFAULT_OPTIONS,...options},nativeOscillatorNode=createNativeOscillatorNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext),oscillatorNodeRenderer=isOffline?createOscillatorNodeRenderer():null,nyquist=context.sampleRate/2;super(context,!1,nativeOscillatorNode,oscillatorNodeRenderer),this._detune=createAudioParam(this,isOffline,nativeOscillatorNode.detune,153600,-153600),this._frequency=createAudioParam(this,isOffline,nativeOscillatorNode.frequency,nyquist,-nyquist),this._nativeOscillatorNode=nativeOscillatorNode,this._onended=null,this._oscillatorNodeRenderer=oscillatorNodeRenderer,null!==this._oscillatorNodeRenderer&&void 0!==mergedOptions.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=mergedOptions.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(value){const wrappedListener="function"==typeof value?wrapEventListener(this,value):null;this._nativeOscillatorNode.onended=wrappedListener;const nativeOnEnded=this._nativeOscillatorNode.onended;this._onended=null!==nativeOnEnded&&nativeOnEnded===wrappedListener?value:nativeOnEnded}get type(){return this._nativeOscillatorNode.type}set type(value){this._nativeOscillatorNode.type=value,null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(periodicWave){this._nativeOscillatorNode.setPeriodicWave(periodicWave),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=periodicWave)}start(when=0){if(this._nativeOscillatorNode.start(when),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.start=when),"closed"!==this.context.state){setInternalStateToActive(this);const resetInternalStateToPassive=()=>{this._nativeOscillatorNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeOscillatorNode.addEventListener("ended",resetInternalStateToPassive)}}stop(when=0){this._nativeOscillatorNode.stop(when),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=when)}})(audioNodeConstructor,createAudioParam,createNativeOscillatorNode,createOscillatorNodeRenderer,getNativeContext,isNativeOfflineAudioContext,wrapEventListener),createConnectedNativeAudioBufferSourceNode=(createNativeAudioBufferSourceNode=>(nativeContext,nativeAudioNode)=>{const nativeAudioBufferSourceNode=createNativeAudioBufferSourceNode(nativeContext,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),nativeAudioBuffer=nativeContext.createBuffer(1,2,44100);return nativeAudioBufferSourceNode.buffer=nativeAudioBuffer,nativeAudioBufferSourceNode.loop=!0,nativeAudioBufferSourceNode.connect(nativeAudioNode),nativeAudioBufferSourceNode.start(),()=>{nativeAudioBufferSourceNode.stop(),nativeAudioBufferSourceNode.disconnect(nativeAudioNode)}})(createNativeAudioBufferSourceNode),createNativeWaveShaperNodeFaker=((createConnectedNativeAudioBufferSourceNode,createInvalidStateError,createNativeGainNode,isDCCurve,monitorConnections)=>(nativeContext,{curve,oversample,...audioNodeOptions})=>{const negativeWaveShaperNode=nativeContext.createWaveShaper(),positiveWaveShaperNode=nativeContext.createWaveShaper();assignNativeAudioNodeOptions(negativeWaveShaperNode,audioNodeOptions),assignNativeAudioNodeOptions(positiveWaveShaperNode,audioNodeOptions);const inputGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:1}),invertGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:-1}),outputGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:1}),revertGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:-1});let disconnectNativeAudioBufferSourceNode=null,isConnected=!1,unmodifiedCurve=null;const nativeWaveShaperNodeFaker={get bufferSize(){},get channelCount(){return negativeWaveShaperNode.channelCount},set channelCount(value){inputGainNode.channelCount=value,invertGainNode.channelCount=value,negativeWaveShaperNode.channelCount=value,outputGainNode.channelCount=value,positiveWaveShaperNode.channelCount=value,revertGainNode.channelCount=value},get channelCountMode(){return negativeWaveShaperNode.channelCountMode},set channelCountMode(value){inputGainNode.channelCountMode=value,invertGainNode.channelCountMode=value,negativeWaveShaperNode.channelCountMode=value,outputGainNode.channelCountMode=value,positiveWaveShaperNode.channelCountMode=value,revertGainNode.channelCountMode=value},get channelInterpretation(){return negativeWaveShaperNode.channelInterpretation},set channelInterpretation(value){inputGainNode.channelInterpretation=value,invertGainNode.channelInterpretation=value,negativeWaveShaperNode.channelInterpretation=value,outputGainNode.channelInterpretation=value,positiveWaveShaperNode.channelInterpretation=value,revertGainNode.channelInterpretation=value},get context(){return negativeWaveShaperNode.context},get curve(){return unmodifiedCurve},set curve(value){if(null!==value&&value.length<2)throw createInvalidStateError();if(null===value)negativeWaveShaperNode.curve=value,positiveWaveShaperNode.curve=value;else{const curveLength=value.length,negativeCurve=new Float32Array(curveLength+2-curveLength%2),positiveCurve=new Float32Array(curveLength+2-curveLength%2);negativeCurve[0]=value[0],positiveCurve[0]=-value[curveLength-1];const length=Math.ceil((curveLength+1)/2),centerIndex=(curveLength+1)/2-1;for(let i=1;i<length;i+=1){const theoreticIndex=i/length*centerIndex,lowerIndex=Math.floor(theoreticIndex),upperIndex=Math.ceil(theoreticIndex);negativeCurve[i]=lowerIndex===upperIndex?value[lowerIndex]:(1-(theoreticIndex-lowerIndex))*value[lowerIndex]+(1-(upperIndex-theoreticIndex))*value[upperIndex],positiveCurve[i]=lowerIndex===upperIndex?-value[curveLength-1-lowerIndex]:-(1-(theoreticIndex-lowerIndex))*value[curveLength-1-lowerIndex]-(1-(upperIndex-theoreticIndex))*value[curveLength-1-upperIndex]}negativeCurve[length]=curveLength%2==1?value[length-1]:(value[length-2]+value[length-1])/2,negativeWaveShaperNode.curve=negativeCurve,positiveWaveShaperNode.curve=positiveCurve}unmodifiedCurve=value,isConnected&&(isDCCurve(unmodifiedCurve)&&null===disconnectNativeAudioBufferSourceNode?disconnectNativeAudioBufferSourceNode=createConnectedNativeAudioBufferSourceNode(nativeContext,inputGainNode):null!==disconnectNativeAudioBufferSourceNode&&(disconnectNativeAudioBufferSourceNode(),disconnectNativeAudioBufferSourceNode=null))},get inputs(){return[inputGainNode]},get numberOfInputs(){return negativeWaveShaperNode.numberOfInputs},get numberOfOutputs(){return negativeWaveShaperNode.numberOfOutputs},get oversample(){return negativeWaveShaperNode.oversample},set oversample(value){negativeWaveShaperNode.oversample=value,positiveWaveShaperNode.oversample=value},addEventListener:(...args)=>inputGainNode.addEventListener(args[0],args[1],args[2]),dispatchEvent:(...args)=>inputGainNode.dispatchEvent(args[0]),removeEventListener:(...args)=>inputGainNode.removeEventListener(args[0],args[1],args[2])};null!==curve&&(nativeWaveShaperNodeFaker.curve=curve instanceof Float32Array?curve:new Float32Array(curve)),oversample!==nativeWaveShaperNodeFaker.oversample&&(nativeWaveShaperNodeFaker.oversample=oversample);return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker,outputGainNode),(()=>{inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode),inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode),isConnected=!0,isDCCurve(unmodifiedCurve)&&(disconnectNativeAudioBufferSourceNode=createConnectedNativeAudioBufferSourceNode(nativeContext,inputGainNode))}),(()=>{inputGainNode.disconnect(negativeWaveShaperNode),negativeWaveShaperNode.disconnect(outputGainNode),inputGainNode.disconnect(invertGainNode),invertGainNode.disconnect(positiveWaveShaperNode),positiveWaveShaperNode.disconnect(revertGainNode),revertGainNode.disconnect(outputGainNode),isConnected=!1,null!==disconnectNativeAudioBufferSourceNode&&(disconnectNativeAudioBufferSourceNode(),disconnectNativeAudioBufferSourceNode=null)}))})(createConnectedNativeAudioBufferSourceNode,createInvalidStateError,createNativeGainNode,isDCCurve,monitorConnections),createNativeWaveShaperNode=((createConnectedNativeAudioBufferSourceNode,createInvalidStateError,createNativeWaveShaperNodeFaker,isDCCurve,monitorConnections,nativeAudioContextConstructor,overwriteAccessors)=>(nativeContext,options)=>{const nativeWaveShaperNode=nativeContext.createWaveShaper();if(null!==nativeAudioContextConstructor&&"webkitAudioContext"===nativeAudioContextConstructor.name&&void 0===nativeContext.createGain().gain.automationRate)return createNativeWaveShaperNodeFaker(nativeContext,options);assignNativeAudioNodeOptions(nativeWaveShaperNode,options);const curve=null===options.curve||options.curve instanceof Float32Array?options.curve:new Float32Array(options.curve);if(null!==curve&&curve.length<2)throw createInvalidStateError();assignNativeAudioNodeOption(nativeWaveShaperNode,{curve},"curve"),assignNativeAudioNodeOption(nativeWaveShaperNode,options,"oversample");let disconnectNativeAudioBufferSourceNode=null,isConnected=!1;overwriteAccessors(nativeWaveShaperNode,"curve",(get=>()=>get.call(nativeWaveShaperNode)),(set=>value=>(set.call(nativeWaveShaperNode,value),isConnected&&(isDCCurve(value)&&null===disconnectNativeAudioBufferSourceNode?disconnectNativeAudioBufferSourceNode=createConnectedNativeAudioBufferSourceNode(nativeContext,nativeWaveShaperNode):isDCCurve(value)||null===disconnectNativeAudioBufferSourceNode||(disconnectNativeAudioBufferSourceNode(),disconnectNativeAudioBufferSourceNode=null)),value)));return monitorConnections(nativeWaveShaperNode,(()=>{isConnected=!0,isDCCurve(nativeWaveShaperNode.curve)&&(disconnectNativeAudioBufferSourceNode=createConnectedNativeAudioBufferSourceNode(nativeContext,nativeWaveShaperNode))}),(()=>{isConnected=!1,null!==disconnectNativeAudioBufferSourceNode&&(disconnectNativeAudioBufferSourceNode(),disconnectNativeAudioBufferSourceNode=null)}))})(createConnectedNativeAudioBufferSourceNode,createInvalidStateError,createNativeWaveShaperNodeFaker,isDCCurve,monitorConnections,nativeAudioContextConstructor,overwriteAccessors),createNativePannerNodeFaker=((connectNativeAudioNodeToNativeAudioNode,createInvalidStateError,createNativeChannelMergerNode,createNativeGainNode,createNativeScriptProcessorNode,createNativeWaveShaperNode,createNotSupportedError,disconnectNativeAudioNodeFromNativeAudioNode,getFirstSample,monitorConnections)=>(nativeContext,{coneInnerAngle,coneOuterAngle,coneOuterGain,distanceModel,maxDistance,orientationX,orientationY,orientationZ,panningModel,positionX,positionY,positionZ,refDistance,rolloffFactor,...audioNodeOptions})=>{const pannerNode=nativeContext.createPanner();if(audioNodeOptions.channelCount>2)throw createNotSupportedError();if("max"===audioNodeOptions.channelCountMode)throw createNotSupportedError();assignNativeAudioNodeOptions(pannerNode,audioNodeOptions);const SINGLE_CHANNEL_OPTIONS={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},channelMergerNode=createNativeChannelMergerNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,channelInterpretation:"speakers",numberOfInputs:6}),inputGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,gain:1}),orientationXGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:1}),orientationYGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),orientationZGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),positionXGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),positionYGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),positionZGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),scriptProcessorNode=createNativeScriptProcessorNode(nativeContext,256,6,1),waveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,curve:new Float32Array([1,1]),oversample:"none"});let lastOrientation=[orientationX,orientationY,orientationZ],lastPosition=[positionX,positionY,positionZ];const buffer=new Float32Array(1);scriptProcessorNode.onaudioprocess=({inputBuffer})=>{const orientation=[getFirstSample(inputBuffer,buffer,0),getFirstSample(inputBuffer,buffer,1),getFirstSample(inputBuffer,buffer,2)];orientation.some(((value,index)=>value!==lastOrientation[index]))&&(pannerNode.setOrientation(...orientation),lastOrientation=orientation);const positon=[getFirstSample(inputBuffer,buffer,3),getFirstSample(inputBuffer,buffer,4),getFirstSample(inputBuffer,buffer,5)];positon.some(((value,index)=>value!==lastPosition[index]))&&(pannerNode.setPosition(...positon),lastPosition=positon)},Object.defineProperty(orientationYGainNode.gain,"defaultValue",{get:()=>0}),Object.defineProperty(orientationZGainNode.gain,"defaultValue",{get:()=>0}),Object.defineProperty(positionXGainNode.gain,"defaultValue",{get:()=>0}),Object.defineProperty(positionYGainNode.gain,"defaultValue",{get:()=>0}),Object.defineProperty(positionZGainNode.gain,"defaultValue",{get:()=>0});const nativePannerNodeFaker={get bufferSize(){},get channelCount(){return pannerNode.channelCount},set channelCount(value){if(value>2)throw createNotSupportedError();inputGainNode.channelCount=value,pannerNode.channelCount=value},get channelCountMode(){return pannerNode.channelCountMode},set channelCountMode(value){if("max"===value)throw createNotSupportedError();inputGainNode.channelCountMode=value,pannerNode.channelCountMode=value},get channelInterpretation(){return pannerNode.channelInterpretation},set channelInterpretation(value){inputGainNode.channelInterpretation=value,pannerNode.channelInterpretation=value},get coneInnerAngle(){return pannerNode.coneInnerAngle},set coneInnerAngle(value){pannerNode.coneInnerAngle=value},get coneOuterAngle(){return pannerNode.coneOuterAngle},set coneOuterAngle(value){pannerNode.coneOuterAngle=value},get coneOuterGain(){return pannerNode.coneOuterGain},set coneOuterGain(value){if(value<0||value>1)throw createInvalidStateError();pannerNode.coneOuterGain=value},get context(){return pannerNode.context},get distanceModel(){return pannerNode.distanceModel},set distanceModel(value){pannerNode.distanceModel=value},get inputs(){return[inputGainNode]},get maxDistance(){return pannerNode.maxDistance},set maxDistance(value){if(value<0)throw new RangeError;pannerNode.maxDistance=value},get numberOfInputs(){return pannerNode.numberOfInputs},get numberOfOutputs(){return pannerNode.numberOfOutputs},get orientationX(){return orientationXGainNode.gain},get orientationY(){return orientationYGainNode.gain},get orientationZ(){return orientationZGainNode.gain},get panningModel(){return pannerNode.panningModel},set panningModel(value){pannerNode.panningModel=value},get positionX(){return positionXGainNode.gain},get positionY(){return positionYGainNode.gain},get positionZ(){return positionZGainNode.gain},get refDistance(){return pannerNode.refDistance},set refDistance(value){if(value<0)throw new RangeError;pannerNode.refDistance=value},get rolloffFactor(){return pannerNode.rolloffFactor},set rolloffFactor(value){if(value<0)throw new RangeError;pannerNode.rolloffFactor=value},addEventListener:(...args)=>inputGainNode.addEventListener(args[0],args[1],args[2]),dispatchEvent:(...args)=>inputGainNode.dispatchEvent(args[0]),removeEventListener:(...args)=>inputGainNode.removeEventListener(args[0],args[1],args[2])};coneInnerAngle!==nativePannerNodeFaker.coneInnerAngle&&(nativePannerNodeFaker.coneInnerAngle=coneInnerAngle),coneOuterAngle!==nativePannerNodeFaker.coneOuterAngle&&(nativePannerNodeFaker.coneOuterAngle=coneOuterAngle),coneOuterGain!==nativePannerNodeFaker.coneOuterGain&&(nativePannerNodeFaker.coneOuterGain=coneOuterGain),distanceModel!==nativePannerNodeFaker.distanceModel&&(nativePannerNodeFaker.distanceModel=distanceModel),maxDistance!==nativePannerNodeFaker.maxDistance&&(nativePannerNodeFaker.maxDistance=maxDistance),orientationX!==nativePannerNodeFaker.orientationX.value&&(nativePannerNodeFaker.orientationX.value=orientationX),orientationY!==nativePannerNodeFaker.orientationY.value&&(nativePannerNodeFaker.orientationY.value=orientationY),orientationZ!==nativePannerNodeFaker.orientationZ.value&&(nativePannerNodeFaker.orientationZ.value=orientationZ),panningModel!==nativePannerNodeFaker.panningModel&&(nativePannerNodeFaker.panningModel=panningModel),positionX!==nativePannerNodeFaker.positionX.value&&(nativePannerNodeFaker.positionX.value=positionX),positionY!==nativePannerNodeFaker.positionY.value&&(nativePannerNodeFaker.positionY.value=positionY),positionZ!==nativePannerNodeFaker.positionZ.value&&(nativePannerNodeFaker.positionZ.value=positionZ),refDistance!==nativePannerNodeFaker.refDistance&&(nativePannerNodeFaker.refDistance=refDistance),rolloffFactor!==nativePannerNodeFaker.rolloffFactor&&(nativePannerNodeFaker.rolloffFactor=rolloffFactor),1===lastOrientation[0]&&0===lastOrientation[1]&&0===lastOrientation[2]||pannerNode.setOrientation(...lastOrientation),0===lastPosition[0]&&0===lastPosition[1]&&0===lastPosition[2]||pannerNode.setPosition(...lastPosition);return monitorConnections(interceptConnections(nativePannerNodeFaker,pannerNode),(()=>{inputGainNode.connect(pannerNode),connectNativeAudioNodeToNativeAudioNode(inputGainNode,waveShaperNode,0,0),waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode,0,0),waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode,0,1),waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode,0,2),waveShaperNode.connect(positionXGainNode).connect(channelMergerNode,0,3),waveShaperNode.connect(positionYGainNode).connect(channelMergerNode,0,4),waveShaperNode.connect(positionZGainNode).connect(channelMergerNode,0,5),channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination)}),(()=>{inputGainNode.disconnect(pannerNode),disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode,waveShaperNode,0,0),waveShaperNode.disconnect(orientationXGainNode),orientationXGainNode.disconnect(channelMergerNode),waveShaperNode.disconnect(orientationYGainNode),orientationYGainNode.disconnect(channelMergerNode),waveShaperNode.disconnect(orientationZGainNode),orientationZGainNode.disconnect(channelMergerNode),waveShaperNode.disconnect(positionXGainNode),positionXGainNode.disconnect(channelMergerNode),waveShaperNode.disconnect(positionYGainNode),positionYGainNode.disconnect(channelMergerNode),waveShaperNode.disconnect(positionZGainNode),positionZGainNode.disconnect(channelMergerNode),channelMergerNode.disconnect(scriptProcessorNode),scriptProcessorNode.disconnect(nativeContext.destination)}))})(connectNativeAudioNodeToNativeAudioNode,createInvalidStateError,createNativeChannelMergerNode,createNativeGainNode,createNativeScriptProcessorNode,createNativeWaveShaperNode,createNotSupportedError,disconnectNativeAudioNodeFromNativeAudioNode,getFirstSample,monitorConnections),createNativePannerNode=(createNativePannerNodeFaker=>(nativeContext,options)=>{const nativePannerNode=nativeContext.createPanner();return void 0===nativePannerNode.orientationX?createNativePannerNodeFaker(nativeContext,options):(assignNativeAudioNodeOptions(nativePannerNode,options),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"orientationX"),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"orientationY"),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"orientationZ"),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"positionX"),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"positionY"),assignNativeAudioNodeAudioParamValue(nativePannerNode,options,"positionZ"),assignNativeAudioNodeOption(nativePannerNode,options,"coneInnerAngle"),assignNativeAudioNodeOption(nativePannerNode,options,"coneOuterAngle"),assignNativeAudioNodeOption(nativePannerNode,options,"coneOuterGain"),assignNativeAudioNodeOption(nativePannerNode,options,"distanceModel"),assignNativeAudioNodeOption(nativePannerNode,options,"maxDistance"),assignNativeAudioNodeOption(nativePannerNode,options,"panningModel"),assignNativeAudioNodeOption(nativePannerNode,options,"refDistance"),assignNativeAudioNodeOption(nativePannerNode,options,"rolloffFactor"),nativePannerNode)})(createNativePannerNodeFaker),createPannerNodeRenderer=((connectAudioParam,createNativeChannelMergerNode,createNativeConstantSourceNode,createNativeGainNode,createNativePannerNode,getNativeAudioNode,nativeOfflineAudioContextConstructor,renderAutomation,renderInputsOfAudioNode,renderNativeOfflineAudioContext)=>()=>{const renderedNativeAudioNodes=new WeakMap;let renderedBufferPromise=null;return{render(proxy,nativeOfflineAudioContext){const renderedNativeGainNodeOrNativePannerNode=renderedNativeAudioNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeGainNodeOrNativePannerNode?Promise.resolve(renderedNativeGainNodeOrNativePannerNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeGainNode=null,nativePannerNode=getNativeAudioNode(proxy);const commonAudioNodeOptions={channelCount:nativePannerNode.channelCount,channelCountMode:nativePannerNode.channelCountMode,channelInterpretation:nativePannerNode.channelInterpretation},commonNativePannerNodeOptions={...commonAudioNodeOptions,coneInnerAngle:nativePannerNode.coneInnerAngle,coneOuterAngle:nativePannerNode.coneOuterAngle,coneOuterGain:nativePannerNode.coneOuterGain,distanceModel:nativePannerNode.distanceModel,maxDistance:nativePannerNode.maxDistance,panningModel:nativePannerNode.panningModel,refDistance:nativePannerNode.refDistance,rolloffFactor:nativePannerNode.rolloffFactor},nativePannerNodeIsOwnedByContext=isOwnedByContext(nativePannerNode,nativeOfflineAudioContext);if("bufferSize"in nativePannerNode)nativeGainNode=createNativeGainNode(nativeOfflineAudioContext,{...commonAudioNodeOptions,gain:1});else if(!nativePannerNodeIsOwnedByContext){const options={...commonNativePannerNodeOptions,orientationX:nativePannerNode.orientationX.value,orientationY:nativePannerNode.orientationY.value,orientationZ:nativePannerNode.orientationZ.value,positionX:nativePannerNode.positionX.value,positionY:nativePannerNode.positionY.value,positionZ:nativePannerNode.positionZ.value};nativePannerNode=createNativePannerNode(nativeOfflineAudioContext,options)}if(renderedNativeAudioNodes.set(nativeOfflineAudioContext,null===nativeGainNode?nativePannerNode:nativeGainNode),null!==nativeGainNode){if(null===renderedBufferPromise){if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");const partialOfflineAudioContext=new nativeOfflineAudioContextConstructor(6,proxy.context.length,nativeOfflineAudioContext.sampleRate),nativeChannelMergerNode=createNativeChannelMergerNode(partialOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});nativeChannelMergerNode.connect(partialOfflineAudioContext.destination),renderedBufferPromise=(async()=>{const nativeConstantSourceNodes=await Promise.all([proxy.orientationX,proxy.orientationY,proxy.orientationZ,proxy.positionX,proxy.positionY,proxy.positionZ].map((async(audioParam,index)=>{const nativeConstantSourceNode=createNativeConstantSourceNode(partialOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===index?1:0});return await renderAutomation(partialOfflineAudioContext,audioParam,nativeConstantSourceNode.offset),nativeConstantSourceNode})));for(let i=0;i<6;i+=1)nativeConstantSourceNodes[i].connect(nativeChannelMergerNode,0,i),nativeConstantSourceNodes[i].start(0);return renderNativeOfflineAudioContext(partialOfflineAudioContext)})()}const renderedBuffer=await renderedBufferPromise,inputGainNode=createNativeGainNode(nativeOfflineAudioContext,{...commonAudioNodeOptions,gain:1});await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,inputGainNode);const channelDatas=[];for(let i=0;i<renderedBuffer.numberOfChannels;i+=1)channelDatas.push(renderedBuffer.getChannelData(i));let lastOrientation=[channelDatas[0][0],channelDatas[1][0],channelDatas[2][0]],lastPosition=[channelDatas[3][0],channelDatas[4][0],channelDatas[5][0]],gateGainNode=createNativeGainNode(nativeOfflineAudioContext,{...commonAudioNodeOptions,gain:1}),partialPannerNode=createNativePannerNode(nativeOfflineAudioContext,{...commonNativePannerNodeOptions,orientationX:lastOrientation[0],orientationY:lastOrientation[1],orientationZ:lastOrientation[2],positionX:lastPosition[0],positionY:lastPosition[1],positionZ:lastPosition[2]});inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]),partialPannerNode.connect(nativeGainNode);for(let i=128;i<renderedBuffer.length;i+=128){const orientation=[channelDatas[0][i],channelDatas[1][i],channelDatas[2][i]],positon=[channelDatas[3][i],channelDatas[4][i],channelDatas[5][i]];if(orientation.some(((value,index)=>value!==lastOrientation[index]))||positon.some(((value,index)=>value!==lastPosition[index]))){lastOrientation=orientation,lastPosition=positon;const currentTime=i/nativeOfflineAudioContext.sampleRate;gateGainNode.gain.setValueAtTime(0,currentTime),gateGainNode=createNativeGainNode(nativeOfflineAudioContext,{...commonAudioNodeOptions,gain:0}),partialPannerNode=createNativePannerNode(nativeOfflineAudioContext,{...commonNativePannerNodeOptions,orientationX:lastOrientation[0],orientationY:lastOrientation[1],orientationZ:lastOrientation[2],positionX:lastPosition[0],positionY:lastPosition[1],positionZ:lastPosition[2]}),gateGainNode.gain.setValueAtTime(1,currentTime),inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]),partialPannerNode.connect(nativeGainNode)}}return nativeGainNode}return nativePannerNodeIsOwnedByContext?(await connectAudioParam(nativeOfflineAudioContext,proxy.orientationX,nativePannerNode.orientationX),await connectAudioParam(nativeOfflineAudioContext,proxy.orientationY,nativePannerNode.orientationY),await connectAudioParam(nativeOfflineAudioContext,proxy.orientationZ,nativePannerNode.orientationZ),await connectAudioParam(nativeOfflineAudioContext,proxy.positionX,nativePannerNode.positionX),await connectAudioParam(nativeOfflineAudioContext,proxy.positionY,nativePannerNode.positionY),await connectAudioParam(nativeOfflineAudioContext,proxy.positionZ,nativePannerNode.positionZ)):(await renderAutomation(nativeOfflineAudioContext,proxy.orientationX,nativePannerNode.orientationX),await renderAutomation(nativeOfflineAudioContext,proxy.orientationY,nativePannerNode.orientationY),await renderAutomation(nativeOfflineAudioContext,proxy.orientationZ,nativePannerNode.orientationZ),await renderAutomation(nativeOfflineAudioContext,proxy.positionX,nativePannerNode.positionX),await renderAutomation(nativeOfflineAudioContext,proxy.positionY,nativePannerNode.positionY),await renderAutomation(nativeOfflineAudioContext,proxy.positionZ,nativePannerNode.positionZ)),isNativeAudioNodeFaker(nativePannerNode)?await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativePannerNode.inputs[0]):await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativePannerNode),nativePannerNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeChannelMergerNode,createNativeConstantSourceNode,createNativeGainNode,createNativePannerNode,getNativeAudioNode,nativeOfflineAudioContextConstructor,renderAutomation,renderInputsOfAudioNode,renderNativeOfflineAudioContext),pannerNodeConstructor=((audioNodeConstructor,createAudioParam,createNativePannerNode,createPannerNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class PannerNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...panner_node_constructor_DEFAULT_OPTIONS,...options},nativePannerNode=createNativePannerNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativePannerNode,isOffline?createPannerNodeRenderer():null),this._nativePannerNode=nativePannerNode,this._orientationX=createAudioParam(this,isOffline,nativePannerNode.orientationX,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._orientationY=createAudioParam(this,isOffline,nativePannerNode.orientationY,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._orientationZ=createAudioParam(this,isOffline,nativePannerNode.orientationZ,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._positionX=createAudioParam(this,isOffline,nativePannerNode.positionX,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._positionY=createAudioParam(this,isOffline,nativePannerNode.positionY,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),this._positionZ=createAudioParam(this,isOffline,nativePannerNode.positionZ,MOST_POSITIVE_SINGLE_FLOAT,MOST_NEGATIVE_SINGLE_FLOAT),setAudioNodeTailTime(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(value){this._nativePannerNode.coneInnerAngle=value}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(value){this._nativePannerNode.coneOuterAngle=value}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(value){this._nativePannerNode.coneOuterGain=value}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(value){this._nativePannerNode.distanceModel=value}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(value){this._nativePannerNode.maxDistance=value}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(value){this._nativePannerNode.panningModel=value}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(value){this._nativePannerNode.refDistance=value}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(value){this._nativePannerNode.rolloffFactor=value}})(audioNodeConstructor,createAudioParam,createNativePannerNode,createPannerNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),createNativePeriodicWave=(createIndexSizeError=>(nativeContext,{disableNormalization,imag,real})=>{const convertedImag=imag instanceof Float32Array?imag:new Float32Array(imag),convertedReal=real instanceof Float32Array?real:new Float32Array(real),nativePeriodicWave=nativeContext.createPeriodicWave(convertedReal,convertedImag,{disableNormalization});if(Array.from(imag).length<2)throw createIndexSizeError();return nativePeriodicWave})(createIndexSizeError),periodicWaveConstructor=((createNativePeriodicWave,getNativeContext,periodicWaveStore,sanitizePeriodicWaveOptions)=>class PeriodicWave{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions=sanitizePeriodicWaveOptions({...periodic_wave_constructor_DEFAULT_OPTIONS,...options}),periodicWave=createNativePeriodicWave(nativeContext,mergedOptions);return periodicWaveStore.add(periodicWave),periodicWave}static[Symbol.hasInstance](instance){return null!==instance&&"object"==typeof instance&&Object.getPrototypeOf(instance)===PeriodicWave.prototype||periodicWaveStore.has(instance)}})(createNativePeriodicWave,getNativeContext,new WeakSet,(options=>{const{imag,real}=options;return void 0===imag?void 0===real?{...options,imag:[0,0],real:[0,0]}:{...options,imag:Array.from(real,(()=>0)),real}:void 0===real?{...options,imag,real:Array.from(imag,(()=>0))}:{...options,imag,real}})),nativeStereoPannerNodeFakerFactory=((createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeGainNode,createNativeWaveShaperNode,createNotSupportedError,monitorConnections)=>{const DC_CURVE=new Float32Array([1,1]),HALF_PI=Math.PI/2,SINGLE_CHANNEL_OPTIONS={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS={...SINGLE_CHANNEL_OPTIONS,oversample:"none"},buildInternalGraph=(nativeContext,channelCount,inputGainNode,panGainNode,channelMergerNode)=>{if(1===channelCount)return((nativeContext,inputGainNode,panGainNode,channelMergerNode)=>{const leftWaveShaperCurve=new Float32Array(16385),rightWaveShaperCurve=new Float32Array(16385);for(let i=0;i<16385;i+=1){const x=i/16384*HALF_PI;leftWaveShaperCurve[i]=Math.cos(x),rightWaveShaperCurve[i]=Math.sin(x)}const leftGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),leftWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:leftWaveShaperCurve}),panWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:DC_CURVE}),rightGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),rightWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:rightWaveShaperCurve});return{connectGraph(){inputGainNode.connect(leftGainNode),inputGainNode.connect(void 0===panWaveShaperNode.inputs?panWaveShaperNode:panWaveShaperNode.inputs[0]),inputGainNode.connect(rightGainNode),panWaveShaperNode.connect(panGainNode),panGainNode.connect(void 0===leftWaveShaperNode.inputs?leftWaveShaperNode:leftWaveShaperNode.inputs[0]),panGainNode.connect(void 0===rightWaveShaperNode.inputs?rightWaveShaperNode:rightWaveShaperNode.inputs[0]),leftWaveShaperNode.connect(leftGainNode.gain),rightWaveShaperNode.connect(rightGainNode.gain),leftGainNode.connect(channelMergerNode,0,0),rightGainNode.connect(channelMergerNode,0,1)},disconnectGraph(){inputGainNode.disconnect(leftGainNode),inputGainNode.disconnect(void 0===panWaveShaperNode.inputs?panWaveShaperNode:panWaveShaperNode.inputs[0]),inputGainNode.disconnect(rightGainNode),panWaveShaperNode.disconnect(panGainNode),panGainNode.disconnect(void 0===leftWaveShaperNode.inputs?leftWaveShaperNode:leftWaveShaperNode.inputs[0]),panGainNode.disconnect(void 0===rightWaveShaperNode.inputs?rightWaveShaperNode:rightWaveShaperNode.inputs[0]),leftWaveShaperNode.disconnect(leftGainNode.gain),rightWaveShaperNode.disconnect(rightGainNode.gain),leftGainNode.disconnect(channelMergerNode,0,0),rightGainNode.disconnect(channelMergerNode,0,1)}}})(nativeContext,inputGainNode,panGainNode,channelMergerNode);if(2===channelCount)return((nativeContext,inputGainNode,panGainNode,channelMergerNode)=>{const leftInputForLeftOutputWaveShaperCurve=new Float32Array(16385),leftInputForRightOutputWaveShaperCurve=new Float32Array(16385),rightInputForLeftOutputWaveShaperCurve=new Float32Array(16385),rightInputForRightOutputWaveShaperCurve=new Float32Array(16385),centerIndex=Math.floor(8192.5);for(let i=0;i<16385;i+=1)if(i>centerIndex){const x=(i-centerIndex)/(16384-centerIndex)*HALF_PI;leftInputForLeftOutputWaveShaperCurve[i]=Math.cos(x),leftInputForRightOutputWaveShaperCurve[i]=Math.sin(x),rightInputForLeftOutputWaveShaperCurve[i]=0,rightInputForRightOutputWaveShaperCurve[i]=1}else{const x=i/(16384-centerIndex)*HALF_PI;leftInputForLeftOutputWaveShaperCurve[i]=1,leftInputForRightOutputWaveShaperCurve[i]=0,rightInputForLeftOutputWaveShaperCurve[i]=Math.cos(x),rightInputForRightOutputWaveShaperCurve[i]=Math.sin(x)}const channelSplitterNode=createNativeChannelSplitterNode(nativeContext,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),leftInputForLeftOutputGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),leftInputForLeftOutputWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:leftInputForLeftOutputWaveShaperCurve}),leftInputForRightOutputGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),leftInputForRightOutputWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:leftInputForRightOutputWaveShaperCurve}),panWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:DC_CURVE}),rightInputForLeftOutputGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),rightInputForLeftOutputWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:rightInputForLeftOutputWaveShaperCurve}),rightInputForRightOutputGainNode=createNativeGainNode(nativeContext,{...SINGLE_CHANNEL_OPTIONS,gain:0}),rightInputForRightOutputWaveShaperNode=createNativeWaveShaperNode(nativeContext,{...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,curve:rightInputForRightOutputWaveShaperCurve});return{connectGraph(){inputGainNode.connect(channelSplitterNode),inputGainNode.connect(void 0===panWaveShaperNode.inputs?panWaveShaperNode:panWaveShaperNode.inputs[0]),channelSplitterNode.connect(leftInputForLeftOutputGainNode,0),channelSplitterNode.connect(leftInputForRightOutputGainNode,0),channelSplitterNode.connect(rightInputForLeftOutputGainNode,1),channelSplitterNode.connect(rightInputForRightOutputGainNode,1),panWaveShaperNode.connect(panGainNode),panGainNode.connect(void 0===leftInputForLeftOutputWaveShaperNode.inputs?leftInputForLeftOutputWaveShaperNode:leftInputForLeftOutputWaveShaperNode.inputs[0]),panGainNode.connect(void 0===leftInputForRightOutputWaveShaperNode.inputs?leftInputForRightOutputWaveShaperNode:leftInputForRightOutputWaveShaperNode.inputs[0]),panGainNode.connect(void 0===rightInputForLeftOutputWaveShaperNode.inputs?rightInputForLeftOutputWaveShaperNode:rightInputForLeftOutputWaveShaperNode.inputs[0]),panGainNode.connect(void 0===rightInputForRightOutputWaveShaperNode.inputs?rightInputForRightOutputWaveShaperNode:rightInputForRightOutputWaveShaperNode.inputs[0]),leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain),leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain),rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain),rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain),leftInputForLeftOutputGainNode.connect(channelMergerNode,0,0),rightInputForLeftOutputGainNode.connect(channelMergerNode,0,0),leftInputForRightOutputGainNode.connect(channelMergerNode,0,1),rightInputForRightOutputGainNode.connect(channelMergerNode,0,1)},disconnectGraph(){inputGainNode.disconnect(channelSplitterNode),inputGainNode.disconnect(void 0===panWaveShaperNode.inputs?panWaveShaperNode:panWaveShaperNode.inputs[0]),channelSplitterNode.disconnect(leftInputForLeftOutputGainNode,0),channelSplitterNode.disconnect(leftInputForRightOutputGainNode,0),channelSplitterNode.disconnect(rightInputForLeftOutputGainNode,1),channelSplitterNode.disconnect(rightInputForRightOutputGainNode,1),panWaveShaperNode.disconnect(panGainNode),panGainNode.disconnect(void 0===leftInputForLeftOutputWaveShaperNode.inputs?leftInputForLeftOutputWaveShaperNode:leftInputForLeftOutputWaveShaperNode.inputs[0]),panGainNode.disconnect(void 0===leftInputForRightOutputWaveShaperNode.inputs?leftInputForRightOutputWaveShaperNode:leftInputForRightOutputWaveShaperNode.inputs[0]),panGainNode.disconnect(void 0===rightInputForLeftOutputWaveShaperNode.inputs?rightInputForLeftOutputWaveShaperNode:rightInputForLeftOutputWaveShaperNode.inputs[0]),panGainNode.disconnect(void 0===rightInputForRightOutputWaveShaperNode.inputs?rightInputForRightOutputWaveShaperNode:rightInputForRightOutputWaveShaperNode.inputs[0]),leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain),leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain),rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain),rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain),leftInputForLeftOutputGainNode.disconnect(channelMergerNode,0,0),rightInputForLeftOutputGainNode.disconnect(channelMergerNode,0,0),leftInputForRightOutputGainNode.disconnect(channelMergerNode,0,1),rightInputForRightOutputGainNode.disconnect(channelMergerNode,0,1)}}})(nativeContext,inputGainNode,panGainNode,channelMergerNode);throw createNotSupportedError()};return(nativeContext,{channelCount,channelCountMode,pan,...audioNodeOptions})=>{if("max"===channelCountMode)throw createNotSupportedError();const channelMergerNode=createNativeChannelMergerNode(nativeContext,{...audioNodeOptions,channelCount:1,channelCountMode,numberOfInputs:2}),inputGainNode=createNativeGainNode(nativeContext,{...audioNodeOptions,channelCount,channelCountMode,gain:1}),panGainNode=createNativeGainNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:pan});let{connectGraph,disconnectGraph}=buildInternalGraph(nativeContext,channelCount,inputGainNode,panGainNode,channelMergerNode);Object.defineProperty(panGainNode.gain,"defaultValue",{get:()=>0}),Object.defineProperty(panGainNode.gain,"maxValue",{get:()=>1}),Object.defineProperty(panGainNode.gain,"minValue",{get:()=>-1});const nativeStereoPannerNodeFakerFactory={get bufferSize(){},get channelCount(){return inputGainNode.channelCount},set channelCount(value){inputGainNode.channelCount!==value&&(isConnected&&disconnectGraph(),({connectGraph,disconnectGraph}=buildInternalGraph(nativeContext,value,inputGainNode,panGainNode,channelMergerNode)),isConnected&&connectGraph()),inputGainNode.channelCount=value},get channelCountMode(){return inputGainNode.channelCountMode},set channelCountMode(value){if("clamped-max"===value||"max"===value)throw createNotSupportedError();inputGainNode.channelCountMode=value},get channelInterpretation(){return inputGainNode.channelInterpretation},set channelInterpretation(value){inputGainNode.channelInterpretation=value},get context(){return inputGainNode.context},get inputs(){return[inputGainNode]},get numberOfInputs(){return inputGainNode.numberOfInputs},get numberOfOutputs(){return inputGainNode.numberOfOutputs},get pan(){return panGainNode.gain},addEventListener:(...args)=>inputGainNode.addEventListener(args[0],args[1],args[2]),dispatchEvent:(...args)=>inputGainNode.dispatchEvent(args[0]),removeEventListener:(...args)=>inputGainNode.removeEventListener(args[0],args[1],args[2])};let isConnected=!1;return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory,channelMergerNode),(()=>{connectGraph(),isConnected=!0}),(()=>{disconnectGraph(),isConnected=!1}))}})(createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeGainNode,createNativeWaveShaperNode,createNotSupportedError,monitorConnections),createNativeStereoPannerNode=((createNativeStereoPannerNodeFaker,createNotSupportedError)=>(nativeContext,options)=>{const channelCountMode=options.channelCountMode;if("clamped-max"===channelCountMode)throw createNotSupportedError();if(void 0===nativeContext.createStereoPanner)return createNativeStereoPannerNodeFaker(nativeContext,options);const nativeStereoPannerNode=nativeContext.createStereoPanner();return assignNativeAudioNodeOptions(nativeStereoPannerNode,options),assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode,options,"pan"),Object.defineProperty(nativeStereoPannerNode,"channelCountMode",{get:()=>channelCountMode,set:value=>{if(value!==channelCountMode)throw createNotSupportedError()}}),nativeStereoPannerNode})(nativeStereoPannerNodeFakerFactory,createNotSupportedError),createStereoPannerNodeRenderer=((connectAudioParam,createNativeStereoPannerNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode)=>()=>{const renderedNativeStereoPannerNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeStereoPannerNode=renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeStereoPannerNode?Promise.resolve(renderedNativeStereoPannerNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeStereoPannerNode=getNativeAudioNode(proxy);const nativeStereoPannerNodeIsOwnedByContext=isOwnedByContext(nativeStereoPannerNode,nativeOfflineAudioContext);if(!nativeStereoPannerNodeIsOwnedByContext){const options={channelCount:nativeStereoPannerNode.channelCount,channelCountMode:nativeStereoPannerNode.channelCountMode,channelInterpretation:nativeStereoPannerNode.channelInterpretation,pan:nativeStereoPannerNode.pan.value};nativeStereoPannerNode=createNativeStereoPannerNode(nativeOfflineAudioContext,options)}return renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext,nativeStereoPannerNode),nativeStereoPannerNodeIsOwnedByContext?await connectAudioParam(nativeOfflineAudioContext,proxy.pan,nativeStereoPannerNode.pan):await renderAutomation(nativeOfflineAudioContext,proxy.pan,nativeStereoPannerNode.pan),isNativeAudioNodeFaker(nativeStereoPannerNode)?await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeStereoPannerNode.inputs[0]):await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeStereoPannerNode),nativeStereoPannerNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,createNativeStereoPannerNode,getNativeAudioNode,renderAutomation,renderInputsOfAudioNode),stereoPannerNodeConstructor=((audioNodeConstructor,createAudioParam,createNativeStereoPannerNode,createStereoPannerNodeRenderer,getNativeContext,isNativeOfflineAudioContext)=>class StereoPannerNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...stereo_panner_node_constructor_DEFAULT_OPTIONS,...options},nativeStereoPannerNode=createNativeStereoPannerNode(nativeContext,mergedOptions),isOffline=isNativeOfflineAudioContext(nativeContext);super(context,!1,nativeStereoPannerNode,isOffline?createStereoPannerNodeRenderer():null),this._pan=createAudioParam(this,isOffline,nativeStereoPannerNode.pan)}get pan(){return this._pan}})(audioNodeConstructor,createAudioParam,createNativeStereoPannerNode,createStereoPannerNodeRenderer,getNativeContext,isNativeOfflineAudioContext),createWaveShaperNodeRenderer=((createNativeWaveShaperNode,getNativeAudioNode,renderInputsOfAudioNode)=>()=>{const renderedNativeWaveShaperNodes=new WeakMap;return{render(proxy,nativeOfflineAudioContext){const renderedNativeWaveShaperNode=renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeWaveShaperNode?Promise.resolve(renderedNativeWaveShaperNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeWaveShaperNode=getNativeAudioNode(proxy);if(!isOwnedByContext(nativeWaveShaperNode,nativeOfflineAudioContext)){const options={channelCount:nativeWaveShaperNode.channelCount,channelCountMode:nativeWaveShaperNode.channelCountMode,channelInterpretation:nativeWaveShaperNode.channelInterpretation,curve:nativeWaveShaperNode.curve,oversample:nativeWaveShaperNode.oversample};nativeWaveShaperNode=createNativeWaveShaperNode(nativeOfflineAudioContext,options)}return renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext,nativeWaveShaperNode),isNativeAudioNodeFaker(nativeWaveShaperNode)?await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeWaveShaperNode.inputs[0]):await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeWaveShaperNode),nativeWaveShaperNode})(proxy,nativeOfflineAudioContext)}}})(createNativeWaveShaperNode,getNativeAudioNode,renderInputsOfAudioNode),waveShaperNodeConstructor=((audioNodeConstructor,createInvalidStateError,createNativeWaveShaperNode,createWaveShaperNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime)=>class WaveShaperNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),mergedOptions={...wave_shaper_node_constructor_DEFAULT_OPTIONS,...options},nativeWaveShaperNode=createNativeWaveShaperNode(nativeContext,mergedOptions);super(context,!0,nativeWaveShaperNode,isNativeOfflineAudioContext(nativeContext)?createWaveShaperNodeRenderer():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=nativeWaveShaperNode,setAudioNodeTailTime(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(value){if(null===value)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(value.length<2)throw createInvalidStateError();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=value}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(value){this._nativeWaveShaperNode.oversample=value}})(audioNodeConstructor,createInvalidStateError,createNativeWaveShaperNode,createWaveShaperNodeRenderer,getNativeContext,isNativeOfflineAudioContext,setAudioNodeTailTime),isSecureContext=(window=>null!==window&&window.isSecureContext)(module_window),exposeCurrentFrameAndCurrentTime=(window=>(currentTime,sampleRate,fn)=>{Object.defineProperties(window,{currentFrame:{configurable:!0,get:()=>Math.round(currentTime*sampleRate)},currentTime:{configurable:!0,get:()=>currentTime}});try{return fn()}finally{null!==window&&(delete window.currentFrame,delete window.currentTime)}})(module_window),backupOfflineAudioContextStore=new WeakMap,getOrCreateBackupOfflineAudioContext=((backupOfflineAudioContextStore,nativeOfflineAudioContextConstructor)=>nativeContext=>{let backupOfflineAudioContext=backupOfflineAudioContextStore.get(nativeContext);if(void 0!==backupOfflineAudioContext)return backupOfflineAudioContext;if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");return backupOfflineAudioContext=new nativeOfflineAudioContextConstructor(1,1,44100),backupOfflineAudioContextStore.set(nativeContext,backupOfflineAudioContext),backupOfflineAudioContext})(backupOfflineAudioContextStore,nativeOfflineAudioContextConstructor),addAudioWorkletModule=isSecureContext?((cacheTestResult,createNotSupportedError,evaluateSource,exposeCurrentFrameAndCurrentTime,fetchSource,getNativeContext,getOrCreateBackupOfflineAudioContext,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor,ongoingRequests,resolvedRequests,testAudioWorkletProcessorPostMessageSupport,window)=>{let index=0;return(context,moduleURL,options={credentials:"omit"})=>{const resolvedRequestsOfContext=resolvedRequests.get(context);if(void 0!==resolvedRequestsOfContext&&resolvedRequestsOfContext.has(moduleURL))return Promise.resolve();const ongoingRequestsOfContext=ongoingRequests.get(context);if(void 0!==ongoingRequestsOfContext){const promiseOfOngoingRequest=ongoingRequestsOfContext.get(moduleURL);if(void 0!==promiseOfOngoingRequest)return promiseOfOngoingRequest}const nativeContext=getNativeContext(context),promise=void 0===nativeContext.audioWorklet?fetchSource(moduleURL).then((([source,absoluteUrl])=>{const[importStatements,sourceWithoutImportStatements]=splitImportStatements(source,absoluteUrl);return evaluateSource(`${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`)})).then((()=>{const evaluateAudioWorkletGlobalScope=window._AWGS.pop();if(void 0===evaluateAudioWorkletGlobalScope)throw new SyntaxError;exposeCurrentFrameAndCurrentTime(nativeContext.currentTime,nativeContext.sampleRate,(()=>evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor{},void 0,((name,processorCtor)=>{if(""===name.trim())throw createNotSupportedError();const nodeNameToProcessorConstructorMap=NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);if(void 0!==nodeNameToProcessorConstructorMap){if(nodeNameToProcessorConstructorMap.has(name))throw createNotSupportedError();verifyProcessorCtor(processorCtor),verifyParameterDescriptors(processorCtor.parameterDescriptors),nodeNameToProcessorConstructorMap.set(name,processorCtor)}else verifyProcessorCtor(processorCtor),verifyParameterDescriptors(processorCtor.parameterDescriptors),NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext,new Map([[name,processorCtor]]))}),nativeContext.sampleRate,void 0,void 0)))})):Promise.all([fetchSource(moduleURL),Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport,testAudioWorkletProcessorPostMessageSupport))]).then((([[source,absoluteUrl],isSupportingPostMessage])=>{const currentIndex=index+1;index=currentIndex;const[importStatements,sourceWithoutImportStatements]=splitImportStatements(source,absoluteUrl),blob=new Blob([`${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${isSupportingPostMessage?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${isSupportingPostMessage?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${isSupportingPostMessage?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`],{type:"application/javascript; charset=utf-8"}),url=URL.createObjectURL(blob);return nativeContext.audioWorklet.addModule(url,options).then((()=>{if(isNativeOfflineAudioContext(nativeContext))return nativeContext;const backupOfflineAudioContext=getOrCreateBackupOfflineAudioContext(nativeContext);return backupOfflineAudioContext.audioWorklet.addModule(url,options).then((()=>backupOfflineAudioContext))})).then((nativeContextOrBackupOfflineAudioContext=>{if(null===nativeAudioWorkletNodeConstructor)throw new SyntaxError;try{new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext,`__sac${currentIndex}`)}catch{throw new SyntaxError}})).finally((()=>URL.revokeObjectURL(url)))}));return void 0===ongoingRequestsOfContext?ongoingRequests.set(context,new Map([[moduleURL,promise]])):ongoingRequestsOfContext.set(moduleURL,promise),promise.then((()=>{const updatedResolvedRequestsOfContext=resolvedRequests.get(context);void 0===updatedResolvedRequestsOfContext?resolvedRequests.set(context,new Set([moduleURL])):updatedResolvedRequestsOfContext.add(moduleURL)})).finally((()=>{const updatedOngoingRequestsOfContext=ongoingRequests.get(context);void 0!==updatedOngoingRequestsOfContext&&updatedOngoingRequestsOfContext.delete(moduleURL)})),promise}})(cacheTestResult,createNotSupportedError,(window=>source=>new Promise(((resolve,reject)=>{if(null===window)return void reject(new SyntaxError);const head=window.document.head;if(null===head)reject(new SyntaxError);else{const script=window.document.createElement("script"),blob=new Blob([source],{type:"application/javascript"}),url=URL.createObjectURL(blob),originalOnErrorHandler=window.onerror,removeErrorEventListenerAndRevokeUrl=()=>{window.onerror=originalOnErrorHandler,URL.revokeObjectURL(url)};window.onerror=(message,src,lineno,colno,error)=>src===url||src===window.location.href&&1===lineno&&1===colno?(removeErrorEventListenerAndRevokeUrl(),reject(error),!1):null!==originalOnErrorHandler?originalOnErrorHandler(message,src,lineno,colno,error):void 0,script.onerror=()=>{removeErrorEventListenerAndRevokeUrl(),reject(new SyntaxError)},script.onload=()=>{removeErrorEventListenerAndRevokeUrl(),resolve()},script.src=url,script.type="module",head.appendChild(script)}})))(module_window),exposeCurrentFrameAndCurrentTime,(createAbortError=>async url=>{try{const response=await fetch(url);if(response.ok)return[await response.text(),response.url]}catch{}throw createAbortError()})((()=>new DOMException("","AbortError"))),getNativeContext,getOrCreateBackupOfflineAudioContext,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor,new WeakMap,new WeakMap,((nativeAudioWorkletNodeConstructor,nativeOfflineAudioContextConstructor)=>async()=>{if(null===nativeAudioWorkletNodeConstructor)return!0;if(null===nativeOfflineAudioContextConstructor)return!1;const blob=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),offlineAudioContext=new nativeOfflineAudioContextConstructor(1,128,44100),url=URL.createObjectURL(blob);let isEmittingMessageEvents=!1,isEmittingProcessorErrorEvents=!1;try{await offlineAudioContext.audioWorklet.addModule(url);const audioWorkletNode=new nativeAudioWorkletNodeConstructor(offlineAudioContext,"a",{numberOfOutputs:0}),oscillator=offlineAudioContext.createOscillator();audioWorkletNode.port.onmessage=()=>isEmittingMessageEvents=!0,audioWorkletNode.onprocessorerror=()=>isEmittingProcessorErrorEvents=!0,oscillator.connect(audioWorkletNode),oscillator.start(0),await offlineAudioContext.startRendering()}catch{}finally{URL.revokeObjectURL(url)}return isEmittingMessageEvents&&!isEmittingProcessorErrorEvents})(nativeAudioWorkletNodeConstructor,nativeOfflineAudioContextConstructor),module_window):void 0,isNativeContext=((isNativeAudioContext,isNativeOfflineAudioContext)=>anything=>isNativeAudioContext(anything)||isNativeOfflineAudioContext(anything))(isNativeAudioContext,isNativeOfflineAudioContext),decodeAudioData=((audioBufferStore,cacheTestResult,createDataCloneError,createEncodingError,detachedArrayBuffers,getNativeContext,isNativeContext,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,testPromiseSupport,wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds)=>(anyContext,audioData)=>{const nativeContext=isNativeContext(anyContext)?anyContext:getNativeContext(anyContext);if(detachedArrayBuffers.has(audioData)){const err=createDataCloneError();return Promise.reject(err)}try{detachedArrayBuffers.add(audioData)}catch{}return cacheTestResult(testPromiseSupport,(()=>testPromiseSupport(nativeContext)))?nativeContext.decodeAudioData(audioData).then((audioBuffer=>(detachArrayBuffer(audioData).catch((()=>{})),cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,(()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)))||wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer),audioBufferStore.add(audioBuffer),audioBuffer))):new Promise(((resolve,reject)=>{const complete=async()=>{try{await detachArrayBuffer(audioData)}catch{}},fail=err=>{reject(err),complete()};try{nativeContext.decodeAudioData(audioData,(audioBuffer=>{"function"!=typeof audioBuffer.copyFromChannel&&(wrapAudioBufferCopyChannelMethods(audioBuffer),wrapAudioBufferGetChannelDataMethod(audioBuffer)),audioBufferStore.add(audioBuffer),complete().then((()=>resolve(audioBuffer)))}),(err=>{fail(null===err?createEncodingError():err)}))}catch(err){fail(err)}}))})(audioBufferStore,cacheTestResult,(()=>new DOMException("","DataCloneError")),(()=>new DOMException("","EncodingError")),new WeakSet,getNativeContext,isNativeContext,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,testPromiseSupport,wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds),baseAudioContextConstructor=((addAudioWorkletModule,analyserNodeConstructor,audioBufferConstructor,audioBufferSourceNodeConstructor,biquadFilterNodeConstructor,channelMergerNodeConstructor,channelSplitterNodeConstructor,constantSourceNodeConstructor,convolverNodeConstructor,decodeAudioData,delayNodeConstructor,dynamicsCompressorNodeConstructor,gainNodeConstructor,iIRFilterNodeConstructor,minimalBaseAudioContextConstructor,oscillatorNodeConstructor,pannerNodeConstructor,periodicWaveConstructor,stereoPannerNodeConstructor,waveShaperNodeConstructor)=>class BaseAudioContext extends minimalBaseAudioContextConstructor{constructor(_nativeContext,numberOfChannels){super(_nativeContext,numberOfChannels),this._nativeContext=_nativeContext,this._audioWorklet=void 0===addAudioWorkletModule?void 0:{addModule:(moduleURL,options)=>addAudioWorkletModule(this,moduleURL,options)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new analyserNodeConstructor(this)}createBiquadFilter(){return new biquadFilterNodeConstructor(this)}createBuffer(numberOfChannels,length,sampleRate){return new audioBufferConstructor({length,numberOfChannels,sampleRate})}createBufferSource(){return new audioBufferSourceNodeConstructor(this)}createChannelMerger(numberOfInputs=6){return new channelMergerNodeConstructor(this,{numberOfInputs})}createChannelSplitter(numberOfOutputs=6){return new channelSplitterNodeConstructor(this,{numberOfOutputs})}createConstantSource(){return new constantSourceNodeConstructor(this)}createConvolver(){return new convolverNodeConstructor(this)}createDelay(maxDelayTime=1){return new delayNodeConstructor(this,{maxDelayTime})}createDynamicsCompressor(){return new dynamicsCompressorNodeConstructor(this)}createGain(){return new gainNodeConstructor(this)}createIIRFilter(feedforward,feedback){return new iIRFilterNodeConstructor(this,{feedback,feedforward})}createOscillator(){return new oscillatorNodeConstructor(this)}createPanner(){return new pannerNodeConstructor(this)}createPeriodicWave(real,imag,constraints={disableNormalization:!1}){return new periodicWaveConstructor(this,{...constraints,imag,real})}createStereoPanner(){return new stereoPannerNodeConstructor(this)}createWaveShaper(){return new waveShaperNodeConstructor(this)}decodeAudioData(audioData,successCallback,errorCallback){return decodeAudioData(this._nativeContext,audioData).then((audioBuffer=>("function"==typeof successCallback&&successCallback(audioBuffer),audioBuffer)),(err=>{throw"function"==typeof errorCallback&&errorCallback(err),err}))}})(addAudioWorkletModule,analyserNodeConstructor,audioBufferConstructor,audioBufferSourceNodeConstructor,biquadFilterNodeConstructor,channelMergerNodeConstructor,channelSplitterNodeConstructor,constantSourceNodeConstructor,convolverNodeConstructor,decodeAudioData,delayNodeConstructor,dynamicsCompressorNodeConstructor,gainNodeConstructor,iIRFilterNodeConstructor,minimalBaseAudioContextConstructor,oscillatorNodeConstructor,pannerNodeConstructor,periodicWaveConstructor,stereoPannerNodeConstructor,waveShaperNodeConstructor),mediaElementAudioSourceNodeConstructor=((audioNodeConstructor,createNativeMediaElementAudioSourceNode,getNativeContext,isNativeOfflineAudioContext)=>class MediaElementAudioSourceNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),nativeMediaElementAudioSourceNode=createNativeMediaElementAudioSourceNode(nativeContext,options);if(isNativeOfflineAudioContext(nativeContext))throw TypeError();super(context,!0,nativeMediaElementAudioSourceNode,null),this._nativeMediaElementAudioSourceNode=nativeMediaElementAudioSourceNode}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}})(audioNodeConstructor,((nativeAudioContext,options)=>nativeAudioContext.createMediaElementSource(options.mediaElement)),getNativeContext,isNativeOfflineAudioContext),mediaStreamAudioDestinationNodeConstructor=((audioNodeConstructor,createNativeMediaStreamAudioDestinationNode,getNativeContext,isNativeOfflineAudioContext)=>class MediaStreamAudioDestinationNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context);if(isNativeOfflineAudioContext(nativeContext))throw new TypeError;const mergedOptions={...media_stream_audio_destination_node_constructor_DEFAULT_OPTIONS,...options},nativeMediaStreamAudioDestinationNode=createNativeMediaStreamAudioDestinationNode(nativeContext,mergedOptions);super(context,!1,nativeMediaStreamAudioDestinationNode,null),this._nativeMediaStreamAudioDestinationNode=nativeMediaStreamAudioDestinationNode}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}})(audioNodeConstructor,((nativeAudioContext,options)=>{const nativeMediaStreamAudioDestinationNode=nativeAudioContext.createMediaStreamDestination();return assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode,options),1===nativeMediaStreamAudioDestinationNode.numberOfOutputs&&Object.defineProperty(nativeMediaStreamAudioDestinationNode,"numberOfOutputs",{get:()=>0}),nativeMediaStreamAudioDestinationNode}),getNativeContext,isNativeOfflineAudioContext),mediaStreamAudioSourceNodeConstructor=((audioNodeConstructor,createNativeMediaStreamAudioSourceNode,getNativeContext,isNativeOfflineAudioContext)=>class MediaStreamAudioSourceNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context),nativeMediaStreamAudioSourceNode=createNativeMediaStreamAudioSourceNode(nativeContext,options);if(isNativeOfflineAudioContext(nativeContext))throw new TypeError;super(context,!0,nativeMediaStreamAudioSourceNode,null),this._nativeMediaStreamAudioSourceNode=nativeMediaStreamAudioSourceNode}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}})(audioNodeConstructor,((nativeAudioContext,{mediaStream})=>{const audioStreamTracks=mediaStream.getAudioTracks();audioStreamTracks.sort(((a,b)=>a.id<b.id?-1:a.id>b.id?1:0));const filteredAudioStreamTracks=audioStreamTracks.slice(0,1),nativeMediaStreamAudioSourceNode=nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));return Object.defineProperty(nativeMediaStreamAudioSourceNode,"mediaStream",{value:mediaStream}),nativeMediaStreamAudioSourceNode}),getNativeContext,isNativeOfflineAudioContext),createNativeMediaStreamTrackAudioSourceNode=((createInvalidStateError,isNativeOfflineAudioContext)=>(nativeAudioContext,{mediaStreamTrack})=>{if("function"==typeof nativeAudioContext.createMediaStreamTrackSource)return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);const mediaStream=new MediaStream([mediaStreamTrack]),nativeMediaStreamAudioSourceNode=nativeAudioContext.createMediaStreamSource(mediaStream);if("audio"!==mediaStreamTrack.kind)throw createInvalidStateError();if(isNativeOfflineAudioContext(nativeAudioContext))throw new TypeError;return nativeMediaStreamAudioSourceNode})(createInvalidStateError,isNativeOfflineAudioContext),mediaStreamTrackAudioSourceNodeConstructor=((audioNodeConstructor,createNativeMediaStreamTrackAudioSourceNode,getNativeContext)=>class MediaStreamTrackAudioSourceNode extends audioNodeConstructor{constructor(context,options){const nativeContext=getNativeContext(context);super(context,!0,createNativeMediaStreamTrackAudioSourceNode(nativeContext,options),null)}})(audioNodeConstructor,createNativeMediaStreamTrackAudioSourceNode,getNativeContext),audioContextConstructor=((baseAudioContextConstructor,createInvalidStateError,createNotSupportedError,createUnknownError,mediaElementAudioSourceNodeConstructor,mediaStreamAudioDestinationNodeConstructor,mediaStreamAudioSourceNodeConstructor,mediaStreamTrackAudioSourceNodeConstructor,nativeAudioContextConstructor)=>class AudioContext extends baseAudioContextConstructor{constructor(options={}){if(null===nativeAudioContextConstructor)throw new Error("Missing the native AudioContext constructor.");let nativeAudioContext;try{nativeAudioContext=new nativeAudioContextConstructor(options)}catch(err){if(12===err.code&&"sampleRate is not in range"===err.message)throw createNotSupportedError();throw err}if(null===nativeAudioContext)throw createUnknownError();if(!isValidLatencyHint(options.latencyHint))throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==options.sampleRate&&nativeAudioContext.sampleRate!==options.sampleRate)throw createNotSupportedError();super(nativeAudioContext,2);const{latencyHint}=options,{sampleRate}=nativeAudioContext;if(this._baseLatency="number"==typeof nativeAudioContext.baseLatency?nativeAudioContext.baseLatency:"balanced"===latencyHint?512/sampleRate:"interactive"===latencyHint||void 0===latencyHint?256/sampleRate:"playback"===latencyHint?1024/sampleRate:128*Math.max(2,Math.min(128,Math.round(latencyHint*sampleRate/128)))/sampleRate,this._nativeAudioContext=nativeAudioContext,"webkitAudioContext"===nativeAudioContextConstructor.name?(this._nativeGainNode=nativeAudioContext.createGain(),this._nativeOscillatorNode=nativeAudioContext.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,"running"===nativeAudioContext.state){this._state="suspended";const revokeState=()=>{"suspended"===this._state&&(this._state=null),nativeAudioContext.removeEventListener("statechange",revokeState)};nativeAudioContext.addEventListener("statechange",revokeState)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then((()=>{throw createInvalidStateError()})):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close().then((()=>{null!==this._nativeGainNode&&null!==this._nativeOscillatorNode&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),deactivateAudioGraph(this)})))}createMediaElementSource(mediaElement){return new mediaElementAudioSourceNodeConstructor(this,{mediaElement})}createMediaStreamDestination(){return new mediaStreamAudioDestinationNodeConstructor(this)}createMediaStreamSource(mediaStream){return new mediaStreamAudioSourceNodeConstructor(this,{mediaStream})}createMediaStreamTrackSource(mediaStreamTrack){return new mediaStreamTrackAudioSourceNodeConstructor(this,{mediaStreamTrack})}resume(){return"suspended"===this._state?new Promise(((resolve,reject)=>{const resolvePromise=()=>{this._nativeAudioContext.removeEventListener("statechange",resolvePromise),"running"===this._nativeAudioContext.state?resolve():this.resume().then(resolve,reject)};this._nativeAudioContext.addEventListener("statechange",resolvePromise)})):this._nativeAudioContext.resume().catch((err=>{if(void 0===err||15===err.code)throw createInvalidStateError();throw err}))}suspend(){return this._nativeAudioContext.suspend().catch((err=>{if(void 0===err)throw createInvalidStateError();throw err}))}})(baseAudioContextConstructor,createInvalidStateError,createNotSupportedError,createUnknownError,mediaElementAudioSourceNodeConstructor,mediaStreamAudioDestinationNodeConstructor,mediaStreamAudioSourceNodeConstructor,mediaStreamTrackAudioSourceNodeConstructor,nativeAudioContextConstructor),getUnrenderedAudioWorkletNodes=(unrenderedAudioWorkletNodeStore=>nativeContext=>{const unrenderedAudioWorkletNodes=unrenderedAudioWorkletNodeStore.get(nativeContext);if(void 0===unrenderedAudioWorkletNodes)throw new Error("The context has no set of AudioWorkletNodes.");return unrenderedAudioWorkletNodes})(unrenderedAudioWorkletNodeStore),addUnrenderedAudioWorkletNode=(getUnrenderedAudioWorkletNodes=>(nativeContext,audioWorkletNode)=>{getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode)})(getUnrenderedAudioWorkletNodes),connectMultipleOutputs=(createIndexSizeError=>(outputAudioNodes,destination,output=0,input=0)=>{const outputAudioNode=outputAudioNodes[output];if(void 0===outputAudioNode)throw createIndexSizeError();return isNativeAudioNode(destination)?outputAudioNode.connect(destination,0,input):outputAudioNode.connect(destination,0)})(createIndexSizeError),deleteUnrenderedAudioWorkletNode=(getUnrenderedAudioWorkletNodes=>(nativeContext,audioWorkletNode)=>{getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode)})(getUnrenderedAudioWorkletNodes),disconnectMultipleOutputs=(createIndexSizeError=>(outputAudioNodes,destinationOrOutput=undefined,output=undefined,input=0)=>void 0===destinationOrOutput?outputAudioNodes.forEach((outputAudioNode=>outputAudioNode.disconnect())):"number"==typeof destinationOrOutput?getOutputAudioNodeAtIndex(createIndexSizeError,outputAudioNodes,destinationOrOutput).disconnect():isNativeAudioNode(destinationOrOutput)?void 0===output?outputAudioNodes.forEach((outputAudioNode=>outputAudioNode.disconnect(destinationOrOutput))):void 0===input?getOutputAudioNodeAtIndex(createIndexSizeError,outputAudioNodes,output).disconnect(destinationOrOutput,0):getOutputAudioNodeAtIndex(createIndexSizeError,outputAudioNodes,output).disconnect(destinationOrOutput,0,input):void 0===output?outputAudioNodes.forEach((outputAudioNode=>outputAudioNode.disconnect(destinationOrOutput))):getOutputAudioNodeAtIndex(createIndexSizeError,outputAudioNodes,output).disconnect(destinationOrOutput,0))(createIndexSizeError),activeAudioWorkletNodeInputsStore=new WeakMap,getActiveAudioWorkletNodeInputs=((activeAudioWorkletNodeInputsStore,getValueForKey)=>nativeAudioWorkletNode=>getValueForKey(activeAudioWorkletNodeInputsStore,nativeAudioWorkletNode))(activeAudioWorkletNodeInputsStore,getValueForKey),createNativeAudioWorkletNodeFaker=((connectMultipleOutputs,createIndexSizeError,createInvalidStateError,createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeConstantSourceNode,createNativeGainNode,createNativeScriptProcessorNode,createNotSupportedError,disconnectMultipleOutputs,exposeCurrentFrameAndCurrentTime,getActiveAudioWorkletNodeInputs,monitorConnections)=>(nativeContext,baseLatency,processorConstructor,options)=>{if(0===options.numberOfInputs&&0===options.numberOfOutputs)throw createNotSupportedError();const outputChannelCount=Array.isArray(options.outputChannelCount)?options.outputChannelCount:Array.from(options.outputChannelCount);if(outputChannelCount.some((channelCount=>channelCount<1)))throw createNotSupportedError();if(outputChannelCount.length!==options.numberOfOutputs)throw createIndexSizeError();if("explicit"!==options.channelCountMode)throw createNotSupportedError();const numberOfInputChannels=options.channelCount*options.numberOfInputs,numberOfOutputChannels=outputChannelCount.reduce(((sum,value)=>sum+value),0),numberOfParameters=void 0===processorConstructor.parameterDescriptors?0:processorConstructor.parameterDescriptors.length;if(numberOfInputChannels+numberOfParameters>6||numberOfOutputChannels>6)throw createNotSupportedError();const messageChannel=new MessageChannel,gainNodes=[],inputChannelSplitterNodes=[];for(let i=0;i<options.numberOfInputs;i+=1)gainNodes.push(createNativeGainNode(nativeContext,{channelCount:options.channelCount,channelCountMode:options.channelCountMode,channelInterpretation:options.channelInterpretation,gain:1})),inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext,{channelCount:options.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:options.channelCount}));const constantSourceNodes=[];if(void 0!==processorConstructor.parameterDescriptors)for(const{defaultValue,maxValue,minValue,name}of processorConstructor.parameterDescriptors){const constantSourceNode=createNativeConstantSourceNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==options.parameterData[name]?options.parameterData[name]:void 0===defaultValue?0:defaultValue});Object.defineProperties(constantSourceNode.offset,{defaultValue:{get:()=>void 0===defaultValue?0:defaultValue},maxValue:{get:()=>void 0===maxValue?MOST_POSITIVE_SINGLE_FLOAT:maxValue},minValue:{get:()=>void 0===minValue?MOST_NEGATIVE_SINGLE_FLOAT:minValue}}),constantSourceNodes.push(constantSourceNode)}const inputChannelMergerNode=createNativeChannelMergerNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,numberOfInputChannels+numberOfParameters)}),bufferSize=computeBufferSize(baseLatency,nativeContext.sampleRate),scriptProcessorNode=createNativeScriptProcessorNode(nativeContext,bufferSize,numberOfInputChannels+numberOfParameters,Math.max(1,numberOfOutputChannels)),outputChannelSplitterNode=createNativeChannelSplitterNode(nativeContext,{channelCount:Math.max(1,numberOfOutputChannels),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,numberOfOutputChannels)}),outputChannelMergerNodes=[];for(let i=0;i<options.numberOfOutputs;i+=1)outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:outputChannelCount[i]}));for(let i=0;i<options.numberOfInputs;i+=1){gainNodes[i].connect(inputChannelSplitterNodes[i]);for(let j=0;j<options.channelCount;j+=1)inputChannelSplitterNodes[i].connect(inputChannelMergerNode,j,i*options.channelCount+j)}const parameterMap=new ReadOnlyMap(void 0===processorConstructor.parameterDescriptors?[]:processorConstructor.parameterDescriptors.map((({name},index)=>{const constantSourceNode=constantSourceNodes[index];return constantSourceNode.connect(inputChannelMergerNode,0,numberOfInputChannels+index),constantSourceNode.start(0),[name,constantSourceNode.offset]})));inputChannelMergerNode.connect(scriptProcessorNode);let channelInterpretation=options.channelInterpretation,onprocessorerror=null;const outputAudioNodes=0===options.numberOfOutputs?[scriptProcessorNode]:outputChannelMergerNodes,nativeAudioWorkletNodeFaker={get bufferSize(){return bufferSize},get channelCount(){return options.channelCount},set channelCount(_){throw createInvalidStateError()},get channelCountMode(){return options.channelCountMode},set channelCountMode(_){throw createInvalidStateError()},get channelInterpretation(){return channelInterpretation},set channelInterpretation(value){for(const gainNode of gainNodes)gainNode.channelInterpretation=value;channelInterpretation=value},get context(){return scriptProcessorNode.context},get inputs(){return gainNodes},get numberOfInputs(){return options.numberOfInputs},get numberOfOutputs(){return options.numberOfOutputs},get onprocessorerror(){return onprocessorerror},set onprocessorerror(value){"function"==typeof onprocessorerror&&nativeAudioWorkletNodeFaker.removeEventListener("processorerror",onprocessorerror),onprocessorerror="function"==typeof value?value:null,"function"==typeof onprocessorerror&&nativeAudioWorkletNodeFaker.addEventListener("processorerror",onprocessorerror)},get parameters(){return parameterMap},get port(){return messageChannel.port2},addEventListener:(...args)=>scriptProcessorNode.addEventListener(args[0],args[1],args[2]),connect:connectMultipleOutputs.bind(null,outputAudioNodes),disconnect:disconnectMultipleOutputs.bind(null,outputAudioNodes),dispatchEvent:(...args)=>scriptProcessorNode.dispatchEvent(args[0]),removeEventListener:(...args)=>scriptProcessorNode.removeEventListener(args[0],args[1],args[2])},patchedEventListeners=new Map;var addEventListener,removeEventListener;messageChannel.port1.addEventListener=(addEventListener=messageChannel.port1.addEventListener,(...args)=>{if("message"===args[0]){const unpatchedEventListener="function"==typeof args[1]?args[1]:"object"==typeof args[1]&&null!==args[1]&&"function"==typeof args[1].handleEvent?args[1].handleEvent:null;if(null!==unpatchedEventListener){const patchedEventListener=patchedEventListeners.get(args[1]);void 0!==patchedEventListener?args[1]=patchedEventListener:(args[1]=event=>{exposeCurrentFrameAndCurrentTime(nativeContext.currentTime,nativeContext.sampleRate,(()=>unpatchedEventListener(event)))},patchedEventListeners.set(unpatchedEventListener,args[1]))}}return addEventListener.call(messageChannel.port1,args[0],args[1],args[2])}),messageChannel.port1.removeEventListener=(removeEventListener=messageChannel.port1.removeEventListener,(...args)=>{if("message"===args[0]){const patchedEventListener=patchedEventListeners.get(args[1]);void 0!==patchedEventListener&&(patchedEventListeners.delete(args[1]),args[1]=patchedEventListener)}return removeEventListener.call(messageChannel.port1,args[0],args[1],args[2])});let onmessage=null;Object.defineProperty(messageChannel.port1,"onmessage",{get:()=>onmessage,set:value=>{"function"==typeof onmessage&&messageChannel.port1.removeEventListener("message",onmessage),onmessage="function"==typeof value?value:null,"function"==typeof onmessage&&(messageChannel.port1.addEventListener("message",onmessage),messageChannel.port1.start())}}),processorConstructor.prototype.port=messageChannel.port1;let audioWorkletProcessor=null;const audioWorkletProcessorPromise=((nativeContext,nativeAudioWorkletNode,processorConstructor,audioWorkletNodeOptions)=>{let nodeToProcessorMap=NODE_TO_PROCESSOR_MAPS.get(nativeContext);void 0===nodeToProcessorMap&&(nodeToProcessorMap=new WeakMap,NODE_TO_PROCESSOR_MAPS.set(nativeContext,nodeToProcessorMap));const audioWorkletProcessorPromise=createAudioWorkletProcessorPromise(processorConstructor,audioWorkletNodeOptions);return nodeToProcessorMap.set(nativeAudioWorkletNode,audioWorkletProcessorPromise),audioWorkletProcessorPromise})(nativeContext,nativeAudioWorkletNodeFaker,processorConstructor,options);audioWorkletProcessorPromise.then((dWrkltPrcssr=>audioWorkletProcessor=dWrkltPrcssr));const inputs=createNestedArrays(options.numberOfInputs,options.channelCount),outputs=createNestedArrays(options.numberOfOutputs,outputChannelCount),parameters=void 0===processorConstructor.parameterDescriptors?[]:processorConstructor.parameterDescriptors.reduce(((prmtrs,{name})=>({...prmtrs,[name]:new Float32Array(128)})),{});let isActive=!0;const disconnectOutputsGraph=()=>{options.numberOfOutputs>0&&scriptProcessorNode.disconnect(outputChannelSplitterNode);for(let i=0,outputChannelSplitterNodeOutput=0;i<options.numberOfOutputs;i+=1){const outputChannelMergerNode=outputChannelMergerNodes[i];for(let j=0;j<outputChannelCount[i];j+=1)outputChannelSplitterNode.disconnect(outputChannelMergerNode,outputChannelSplitterNodeOutput+j,j);outputChannelSplitterNodeOutput+=outputChannelCount[i]}},activeInputIndexes=new Map;scriptProcessorNode.onaudioprocess=({inputBuffer,outputBuffer})=>{if(null!==audioWorkletProcessor){const activeInputs=getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);for(let i=0;i<bufferSize;i+=128){for(let j=0;j<options.numberOfInputs;j+=1)for(let k=0;k<options.channelCount;k+=1)copyFromChannel(inputBuffer,inputs[j],k,k,i);void 0!==processorConstructor.parameterDescriptors&&processorConstructor.parameterDescriptors.forEach((({name},index)=>{copyFromChannel(inputBuffer,parameters,name,numberOfInputChannels+index,i)}));for(let j=0;j<options.numberOfInputs;j+=1)for(let k=0;k<outputChannelCount[j];k+=1)0===outputs[j][k].byteLength&&(outputs[j][k]=new Float32Array(128));try{const potentiallyEmptyInputs=inputs.map(((input,index)=>{if(activeInputs[index].size>0)return activeInputIndexes.set(index,bufferSize/128),input;const count=activeInputIndexes.get(index);return void 0===count?[]:(input.every((channelData=>channelData.every((sample=>0===sample))))&&(1===count?activeInputIndexes.delete(index):activeInputIndexes.set(index,count-1)),input)})),activeSourceFlag=exposeCurrentFrameAndCurrentTime(nativeContext.currentTime+i/nativeContext.sampleRate,nativeContext.sampleRate,(()=>audioWorkletProcessor.process(potentiallyEmptyInputs,outputs,parameters)));isActive=activeSourceFlag;for(let j=0,outputChannelSplitterNodeOutput=0;j<options.numberOfOutputs;j+=1){for(let k=0;k<outputChannelCount[j];k+=1)copyToChannel(outputBuffer,outputs[j],k,outputChannelSplitterNodeOutput+k,i);outputChannelSplitterNodeOutput+=outputChannelCount[j]}}catch(error){isActive=!1,nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent("processorerror",{colno:error.colno,filename:error.filename,lineno:error.lineno,message:error.message}))}if(!isActive){for(let j=0;j<options.numberOfInputs;j+=1){gainNodes[j].disconnect(inputChannelSplitterNodes[j]);for(let k=0;k<options.channelCount;k+=1)inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode,k,j*options.channelCount+k)}if(void 0!==processorConstructor.parameterDescriptors){const length=processorConstructor.parameterDescriptors.length;for(let j=0;j<length;j+=1){const constantSourceNode=constantSourceNodes[j];constantSourceNode.disconnect(inputChannelMergerNode,0,numberOfInputChannels+j),constantSourceNode.stop()}}inputChannelMergerNode.disconnect(scriptProcessorNode),scriptProcessorNode.onaudioprocess=null,isConnected?disconnectOutputsGraph():disconnectFakeGraph();break}}}};let isConnected=!1;const nativeGainNode=createNativeGainNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),connectFakeGraph=()=>scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination),disconnectFakeGraph=()=>{scriptProcessorNode.disconnect(nativeGainNode),nativeGainNode.disconnect()};return connectFakeGraph(),monitorConnections(nativeAudioWorkletNodeFaker,(()=>{if(isActive){disconnectFakeGraph(),options.numberOfOutputs>0&&scriptProcessorNode.connect(outputChannelSplitterNode);for(let i=0,outputChannelSplitterNodeOutput=0;i<options.numberOfOutputs;i+=1){const outputChannelMergerNode=outputChannelMergerNodes[i];for(let j=0;j<outputChannelCount[i];j+=1)outputChannelSplitterNode.connect(outputChannelMergerNode,outputChannelSplitterNodeOutput+j,j);outputChannelSplitterNodeOutput+=outputChannelCount[i]}}isConnected=!0}),(()=>{isActive&&(connectFakeGraph(),disconnectOutputsGraph()),isConnected=!1}))})(connectMultipleOutputs,createIndexSizeError,createInvalidStateError,createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeConstantSourceNode,createNativeGainNode,createNativeScriptProcessorNode,createNotSupportedError,disconnectMultipleOutputs,exposeCurrentFrameAndCurrentTime,getActiveAudioWorkletNodeInputs,monitorConnections),createNativeAudioWorkletNode=((createInvalidStateError,createNativeAudioWorkletNodeFaker,createNativeGainNode,createNotSupportedError,monitorConnections)=>(nativeContext,baseLatency,nativeAudioWorkletNodeConstructor,name,processorConstructor,options)=>{if(null!==nativeAudioWorkletNodeConstructor)try{const nativeAudioWorkletNode=new nativeAudioWorkletNodeConstructor(nativeContext,name,options),patchedEventListeners=new Map;let onprocessorerror=null;if(Object.defineProperties(nativeAudioWorkletNode,{channelCount:{get:()=>options.channelCount,set:()=>{throw createInvalidStateError()}},channelCountMode:{get:()=>"explicit",set:()=>{throw createInvalidStateError()}},onprocessorerror:{get:()=>onprocessorerror,set:value=>{"function"==typeof onprocessorerror&&nativeAudioWorkletNode.removeEventListener("processorerror",onprocessorerror),onprocessorerror="function"==typeof value?value:null,"function"==typeof onprocessorerror&&nativeAudioWorkletNode.addEventListener("processorerror",onprocessorerror)}}}),nativeAudioWorkletNode.addEventListener=(addEventListener=nativeAudioWorkletNode.addEventListener,(...args)=>{if("processorerror"===args[0]){const unpatchedEventListener="function"==typeof args[1]?args[1]:"object"==typeof args[1]&&null!==args[1]&&"function"==typeof args[1].handleEvent?args[1].handleEvent:null;if(null!==unpatchedEventListener){const patchedEventListener=patchedEventListeners.get(args[1]);void 0!==patchedEventListener?args[1]=patchedEventListener:(args[1]=event=>{"error"===event.type?(Object.defineProperties(event,{type:{value:"processorerror"}}),unpatchedEventListener(event)):unpatchedEventListener(new ErrorEvent(args[0],{...event}))},patchedEventListeners.set(unpatchedEventListener,args[1]))}}return addEventListener.call(nativeAudioWorkletNode,"error",args[1],args[2]),addEventListener.call(nativeAudioWorkletNode,...args)}),nativeAudioWorkletNode.removeEventListener=(removeEventListener=nativeAudioWorkletNode.removeEventListener,(...args)=>{if("processorerror"===args[0]){const patchedEventListener=patchedEventListeners.get(args[1]);void 0!==patchedEventListener&&(patchedEventListeners.delete(args[1]),args[1]=patchedEventListener)}return removeEventListener.call(nativeAudioWorkletNode,"error",args[1],args[2]),removeEventListener.call(nativeAudioWorkletNode,args[0],args[1],args[2])}),0!==options.numberOfOutputs){const nativeGainNode=createNativeGainNode(nativeContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);return monitorConnections(nativeAudioWorkletNode,(()=>nativeGainNode.disconnect()),(()=>nativeGainNode.connect(nativeContext.destination)))}return nativeAudioWorkletNode}catch(err){if(11===err.code)throw createNotSupportedError();throw err}var removeEventListener,addEventListener;if(void 0===processorConstructor)throw createNotSupportedError();return(audioWorkletNodeOptions=>{const{port1}=new MessageChannel;try{port1.postMessage(audioWorkletNodeOptions)}finally{port1.close()}})(options),createNativeAudioWorkletNodeFaker(nativeContext,baseLatency,processorConstructor,options)})(createInvalidStateError,createNativeAudioWorkletNodeFaker,createNativeGainNode,createNotSupportedError,monitorConnections),createAudioWorkletNodeRenderer=((connectAudioParam,connectMultipleOutputs,createNativeAudioBufferSourceNode,createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeConstantSourceNode,createNativeGainNode,deleteUnrenderedAudioWorkletNode,disconnectMultipleOutputs,exposeCurrentFrameAndCurrentTime,getNativeAudioNode,nativeAudioWorkletNodeConstructor,nativeOfflineAudioContextConstructor,renderAutomation,renderInputsOfAudioNode,renderNativeOfflineAudioContext)=>(name,options,processorConstructor)=>{const renderedNativeAudioNodes=new WeakMap;let processedBufferPromise=null;return{render(proxy,nativeOfflineAudioContext){deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext,proxy);const renderedNativeAudioWorkletNodeOrGainNode=renderedNativeAudioNodes.get(nativeOfflineAudioContext);return void 0!==renderedNativeAudioWorkletNodeOrGainNode?Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode):(async(proxy,nativeOfflineAudioContext)=>{let nativeAudioWorkletNode=getNativeAudioNode(proxy),nativeOutputNodes=null;const nativeAudioWorkletNodeIsOwnedByContext=isOwnedByContext(nativeAudioWorkletNode,nativeOfflineAudioContext),outputChannelCount=Array.isArray(options.outputChannelCount)?options.outputChannelCount:Array.from(options.outputChannelCount);if(null===nativeAudioWorkletNodeConstructor){const numberOfOutputChannels=outputChannelCount.reduce(((sum,value)=>sum+value),0),outputChannelSplitterNode=createNativeChannelSplitterNode(nativeOfflineAudioContext,{channelCount:Math.max(1,numberOfOutputChannels),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,numberOfOutputChannels)}),outputChannelMergerNodes=[];for(let i=0;i<proxy.numberOfOutputs;i+=1)outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:outputChannelCount[i]}));const outputGainNode=createNativeGainNode(nativeOfflineAudioContext,{channelCount:options.channelCount,channelCountMode:options.channelCountMode,channelInterpretation:options.channelInterpretation,gain:1});outputGainNode.connect=connectMultipleOutputs.bind(null,outputChannelMergerNodes),outputGainNode.disconnect=disconnectMultipleOutputs.bind(null,outputChannelMergerNodes),nativeOutputNodes=[outputChannelSplitterNode,outputChannelMergerNodes,outputGainNode]}else nativeAudioWorkletNodeIsOwnedByContext||(nativeAudioWorkletNode=new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext,name));if(renderedNativeAudioNodes.set(nativeOfflineAudioContext,null===nativeOutputNodes?nativeAudioWorkletNode:nativeOutputNodes[2]),null!==nativeOutputNodes){if(null===processedBufferPromise){if(void 0===processorConstructor)throw new Error("Missing the processor constructor.");if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");const numberOfInputChannels=proxy.channelCount*proxy.numberOfInputs,numberOfParameters=void 0===processorConstructor.parameterDescriptors?0:processorConstructor.parameterDescriptors.length,numberOfChannels=numberOfInputChannels+numberOfParameters,renderBuffer=async()=>{const partialOfflineAudioContext=new nativeOfflineAudioContextConstructor(numberOfChannels,128*Math.ceil(proxy.context.length/128),nativeOfflineAudioContext.sampleRate),gainNodes=[],inputChannelSplitterNodes=[];for(let i=0;i<options.numberOfInputs;i+=1)gainNodes.push(createNativeGainNode(partialOfflineAudioContext,{channelCount:options.channelCount,channelCountMode:options.channelCountMode,channelInterpretation:options.channelInterpretation,gain:1})),inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext,{channelCount:options.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:options.channelCount}));const constantSourceNodes=await Promise.all(Array.from(proxy.parameters.values()).map((async audioParam=>{const constantSourceNode=createNativeConstantSourceNode(partialOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:audioParam.value});return await renderAutomation(partialOfflineAudioContext,audioParam,constantSourceNode.offset),constantSourceNode}))),inputChannelMergerNode=createNativeChannelMergerNode(partialOfflineAudioContext,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,numberOfInputChannels+numberOfParameters)});for(let i=0;i<options.numberOfInputs;i+=1){gainNodes[i].connect(inputChannelSplitterNodes[i]);for(let j=0;j<options.channelCount;j+=1)inputChannelSplitterNodes[i].connect(inputChannelMergerNode,j,i*options.channelCount+j)}for(const[index,constantSourceNode]of constantSourceNodes.entries())constantSourceNode.connect(inputChannelMergerNode,0,numberOfInputChannels+index),constantSourceNode.start(0);return inputChannelMergerNode.connect(partialOfflineAudioContext.destination),await Promise.all(gainNodes.map((gainNode=>renderInputsOfAudioNode(proxy,partialOfflineAudioContext,gainNode)))),renderNativeOfflineAudioContext(partialOfflineAudioContext)};processedBufferPromise=processBuffer(proxy,0===numberOfChannels?null:await renderBuffer(),nativeOfflineAudioContext,options,outputChannelCount,processorConstructor,exposeCurrentFrameAndCurrentTime)}const processedBuffer=await processedBufferPromise,audioBufferSourceNode=createNativeAudioBufferSourceNode(nativeOfflineAudioContext,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[outputChannelSplitterNode,outputChannelMergerNodes,outputGainNode]=nativeOutputNodes;null!==processedBuffer&&(audioBufferSourceNode.buffer=processedBuffer,audioBufferSourceNode.start(0)),audioBufferSourceNode.connect(outputChannelSplitterNode);for(let i=0,outputChannelSplitterNodeOutput=0;i<proxy.numberOfOutputs;i+=1){const outputChannelMergerNode=outputChannelMergerNodes[i];for(let j=0;j<outputChannelCount[i];j+=1)outputChannelSplitterNode.connect(outputChannelMergerNode,outputChannelSplitterNodeOutput+j,j);outputChannelSplitterNodeOutput+=outputChannelCount[i]}return outputGainNode}if(nativeAudioWorkletNodeIsOwnedByContext)for(const[nm,audioParam]of proxy.parameters.entries())await connectAudioParam(nativeOfflineAudioContext,audioParam,nativeAudioWorkletNode.parameters.get(nm));else for(const[nm,audioParam]of proxy.parameters.entries())await renderAutomation(nativeOfflineAudioContext,audioParam,nativeAudioWorkletNode.parameters.get(nm));return await renderInputsOfAudioNode(proxy,nativeOfflineAudioContext,nativeAudioWorkletNode),nativeAudioWorkletNode})(proxy,nativeOfflineAudioContext)}}})(connectAudioParam,connectMultipleOutputs,createNativeAudioBufferSourceNode,createNativeChannelMergerNode,createNativeChannelSplitterNode,createNativeConstantSourceNode,createNativeGainNode,deleteUnrenderedAudioWorkletNode,disconnectMultipleOutputs,exposeCurrentFrameAndCurrentTime,getNativeAudioNode,nativeAudioWorkletNodeConstructor,nativeOfflineAudioContextConstructor,renderAutomation,renderInputsOfAudioNode,renderNativeOfflineAudioContext),getBackupOfflineAudioContext=(backupOfflineAudioContextStore=>nativeContext=>backupOfflineAudioContextStore.get(nativeContext))(backupOfflineAudioContextStore),setActiveAudioWorkletNodeInputs=(activeAudioWorkletNodeInputsStore=>(nativeAudioWorkletNode,activeInputs)=>{activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode,activeInputs)})(activeAudioWorkletNodeInputsStore),createNativeOfflineAudioContext=(isSecureContext&&((addUnrenderedAudioWorkletNode,audioNodeConstructor,createAudioParam,createAudioWorkletNodeRenderer,createNativeAudioWorkletNode,getAudioNodeConnections,getBackupOfflineAudioContext,getNativeContext,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor,sanitizeAudioWorkletNodeOptions,setActiveAudioWorkletNodeInputs,testAudioWorkletNodeOptionsClonability,wrapEventListener)=>{})(addUnrenderedAudioWorkletNode,audioNodeConstructor,createAudioParam,createAudioWorkletNodeRenderer,createNativeAudioWorkletNode,getAudioNodeConnections,getBackupOfflineAudioContext,getNativeContext,isNativeOfflineAudioContext,nativeAudioWorkletNodeConstructor,(options=>({...options,outputChannelCount:void 0!==options.outputChannelCount?options.outputChannelCount:1===options.numberOfInputs&&1===options.numberOfOutputs?[options.channelCount]:Array.from({length:options.numberOfOutputs},(()=>1))})),setActiveAudioWorkletNodeInputs,(audioWorkletNodeOptions=>{const{port1,port2}=new MessageChannel;try{port1.postMessage(audioWorkletNodeOptions)}finally{port1.close(),port2.close()}}),wrapEventListener),((createInvalidStateError,createNotSupportedError,createUnknownError,minimalBaseAudioContextConstructor,nativeAudioContextConstructor)=>{})(createInvalidStateError,createNotSupportedError,createUnknownError,minimalBaseAudioContextConstructor,nativeAudioContextConstructor),((createNotSupportedError,nativeOfflineAudioContextConstructor)=>(numberOfChannels,length,sampleRate)=>{if(null===nativeOfflineAudioContextConstructor)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new nativeOfflineAudioContextConstructor(numberOfChannels,length,sampleRate)}catch(err){if("SyntaxError"===err.name)throw createNotSupportedError();throw err}})(createNotSupportedError,nativeOfflineAudioContextConstructor)),startRendering=((audioBufferStore,cacheTestResult,getAudioNodeRenderer,getUnrenderedAudioWorkletNodes,renderNativeOfflineAudioContext,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds)=>(destination,nativeOfflineAudioContext)=>getAudioNodeRenderer(destination).render(destination,nativeOfflineAudioContext).then((()=>Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode=>getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode,nativeOfflineAudioContext)))))).then((()=>renderNativeOfflineAudioContext(nativeOfflineAudioContext))).then((audioBuffer=>("function"!=typeof audioBuffer.copyFromChannel?(wrapAudioBufferCopyChannelMethods(audioBuffer),wrapAudioBufferGetChannelDataMethod(audioBuffer)):cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,(()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer)))||wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer),audioBufferStore.add(audioBuffer),audioBuffer))))(audioBufferStore,cacheTestResult,getAudioNodeRenderer,getUnrenderedAudioWorkletNodes,renderNativeOfflineAudioContext,testAudioBufferCopyChannelMethodsOutOfBoundsSupport,wrapAudioBufferCopyChannelMethods,wrapAudioBufferCopyChannelMethodsOutOfBounds)},"./node_modules/url-parse/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";var required=__webpack_require__("./node_modules/requires-port/index.js"),qs=__webpack_require__("./node_modules/querystringify/index.js"),controlOrWhitespace=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,CRHTLF=/[\n\r\t]/g,slashes=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,port=/:\d+$/,protocolre=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i,windowsDriveLetter=/^[a-zA-Z]:/;function trimLeft(str){return(str||"").toString().replace(controlOrWhitespace,"")}var rules=[["#","hash"],["?","query"],function sanitize(address,url){return isSpecial(url.protocol)?address.replace(/\\/g,"/"):address},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d*)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],ignore={hash:1,query:1};function lolcation(loc){var key,location=("undefined"!=typeof window?window:void 0!==__webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self?self:{}).location||{},finaldestination={},type=typeof(loc=loc||location);if("blob:"===loc.protocol)finaldestination=new Url(unescape(loc.pathname),{});else if("string"===type)for(key in finaldestination=new Url(loc,{}),ignore)delete finaldestination[key];else if("object"===type){for(key in loc)key in ignore||(finaldestination[key]=loc[key]);void 0===finaldestination.slashes&&(finaldestination.slashes=slashes.test(loc.href))}return finaldestination}function isSpecial(scheme){return"file:"===scheme||"ftp:"===scheme||"http:"===scheme||"https:"===scheme||"ws:"===scheme||"wss:"===scheme}function extractProtocol(address,location){address=(address=trimLeft(address)).replace(CRHTLF,""),location=location||{};var rest,match=protocolre.exec(address),protocol=match[1]?match[1].toLowerCase():"",forwardSlashes=!!match[2],otherSlashes=!!match[3],slashesCount=0;return forwardSlashes?otherSlashes?(rest=match[2]+match[3]+match[4],slashesCount=match[2].length+match[3].length):(rest=match[2]+match[4],slashesCount=match[2].length):otherSlashes?(rest=match[3]+match[4],slashesCount=match[3].length):rest=match[4],"file:"===protocol?slashesCount>=2&&(rest=rest.slice(2)):isSpecial(protocol)?rest=match[4]:protocol?forwardSlashes&&(rest=rest.slice(2)):slashesCount>=2&&isSpecial(location.protocol)&&(rest=match[4]),{protocol,slashes:forwardSlashes||isSpecial(protocol),slashesCount,rest}}function Url(address,location,parser){if(address=(address=trimLeft(address)).replace(CRHTLF,""),!(this instanceof Url))return new Url(address,location,parser);var relative,extracted,parse,instruction,index,key,instructions=rules.slice(),type=typeof location,url=this,i=0;for("object"!==type&&"string"!==type&&(parser=location,location=null),parser&&"function"!=typeof parser&&(parser=qs.parse),relative=!(extracted=extractProtocol(address||"",location=lolcation(location))).protocol&&!extracted.slashes,url.slashes=extracted.slashes||relative&&location.slashes,url.protocol=extracted.protocol||location.protocol||"",address=extracted.rest,("file:"===extracted.protocol&&(2!==extracted.slashesCount||windowsDriveLetter.test(address))||!extracted.slashes&&(extracted.protocol||extracted.slashesCount<2||!isSpecial(url.protocol)))&&(instructions[3]=[/(.*)/,"pathname"]);i<instructions.length;i++)"function"!=typeof(instruction=instructions[i])?(parse=instruction[0],key=instruction[1],parse!=parse?url[key]=address:"string"==typeof parse?~(index="@"===parse?address.lastIndexOf(parse):address.indexOf(parse))&&("number"==typeof instruction[2]?(url[key]=address.slice(0,index),address=address.slice(index+instruction[2])):(url[key]=address.slice(index),address=address.slice(0,index))):(index=parse.exec(address))&&(url[key]=index[1],address=address.slice(0,index.index)),url[key]=url[key]||relative&&instruction[3]&&location[key]||"",instruction[4]&&(url[key]=url[key].toLowerCase())):address=instruction(address,url);parser&&(url.query=parser(url.query)),relative&&location.slashes&&"/"!==url.pathname.charAt(0)&&(""!==url.pathname||""!==location.pathname)&&(url.pathname=function resolve(relative,base){if(""===relative)return base;for(var path=(base||"/").split("/").slice(0,-1).concat(relative.split("/")),i=path.length,last=path[i-1],unshift=!1,up=0;i--;)"."===path[i]?path.splice(i,1):".."===path[i]?(path.splice(i,1),up++):up&&(0===i&&(unshift=!0),path.splice(i,1),up--);return unshift&&path.unshift(""),"."!==last&&".."!==last||path.push(""),path.join("/")}(url.pathname,location.pathname)),"/"!==url.pathname.charAt(0)&&isSpecial(url.protocol)&&(url.pathname="/"+url.pathname),required(url.port,url.protocol)||(url.host=url.hostname,url.port=""),url.username=url.password="",url.auth&&(~(index=url.auth.indexOf(":"))?(url.username=url.auth.slice(0,index),url.username=encodeURIComponent(decodeURIComponent(url.username)),url.password=url.auth.slice(index+1),url.password=encodeURIComponent(decodeURIComponent(url.password))):url.username=encodeURIComponent(decodeURIComponent(url.auth)),url.auth=url.password?url.username+":"+url.password:url.username),url.origin="file:"!==url.protocol&&isSpecial(url.protocol)&&url.host?url.protocol+"//"+url.host:"null",url.href=url.toString()}Url.prototype={set:function set(part,value,fn){var url=this;switch(part){case"query":"string"==typeof value&&value.length&&(value=(fn||qs.parse)(value)),url[part]=value;break;case"port":url[part]=value,required(value,url.protocol)?value&&(url.host=url.hostname+":"+value):(url.host=url.hostname,url[part]="");break;case"hostname":url[part]=value,url.port&&(value+=":"+url.port),url.host=value;break;case"host":url[part]=value,port.test(value)?(value=value.split(":"),url.port=value.pop(),url.hostname=value.join(":")):(url.hostname=value,url.port="");break;case"protocol":url.protocol=value.toLowerCase(),url.slashes=!fn;break;case"pathname":case"hash":if(value){var char="pathname"===part?"/":"#";url[part]=value.charAt(0)!==char?char+value:value}else url[part]=value;break;case"username":case"password":url[part]=encodeURIComponent(value);break;case"auth":var index=value.indexOf(":");~index?(url.username=value.slice(0,index),url.username=encodeURIComponent(decodeURIComponent(url.username)),url.password=value.slice(index+1),url.password=encodeURIComponent(decodeURIComponent(url.password))):url.username=encodeURIComponent(decodeURIComponent(value))}for(var i=0;i<rules.length;i++){var ins=rules[i];ins[4]&&(url[ins[1]]=url[ins[1]].toLowerCase())}return url.auth=url.password?url.username+":"+url.password:url.username,url.origin="file:"!==url.protocol&&isSpecial(url.protocol)&&url.host?url.protocol+"//"+url.host:"null",url.href=url.toString(),url},toString:function toString(stringify){stringify&&"function"==typeof stringify||(stringify=qs.stringify);var query,url=this,host=url.host,protocol=url.protocol;protocol&&":"!==protocol.charAt(protocol.length-1)&&(protocol+=":");var result=protocol+(url.protocol&&url.slashes||isSpecial(url.protocol)?"//":"");return url.username?(result+=url.username,url.password&&(result+=":"+url.password),result+="@"):url.password?(result+=":"+url.password,result+="@"):"file:"!==url.protocol&&isSpecial(url.protocol)&&!host&&"/"!==url.pathname&&(result+="@"),(":"===host[host.length-1]||port.test(url.hostname)&&!url.port)&&(host+=":"),result+=host+url.pathname,(query="object"==typeof url.query?stringify(url.query):url.query)&&(result+="?"!==query.charAt(0)?"?"+query:query),url.hash&&(result+=url.hash),result}},Url.extractProtocol=extractProtocol,Url.location=lolcation,Url.trimLeft=trimLeft,Url.qs=qs,module.exports=Url}}]);