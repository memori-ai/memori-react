"use strict";(self.webpackChunk_memori_ai_memori_react=self.webpackChunk_memori_ai_memori_react||[]).push([[3012],{"./src/components/MemoriArtifactSystem/ArtifactDrawer.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CSSStyles:()=>CSSStyles,ConversationFlow:()=>ConversationFlow,HTMLArtifact:()=>HTMLArtifact,JSONConfiguration:()=>JSONConfiguration,JavaScriptApp:()=>JavaScriptApp,MarkdownDocumentation:()=>MarkdownDocumentation,MultipleArtifacts:()=>MultipleArtifacts,NoArtifacts:()=>NoArtifacts,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _context_ArtifactContext__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/components/MemoriArtifactSystem/context/ArtifactContext.tsx"),_components_ArtifactHandler_ArtifactHandler__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/MemoriArtifactSystem/components/ArtifactHandler/ArtifactHandler.tsx"),_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Chat/Chat.tsx"),_helpers_sanitizer__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/helpers/sanitizer.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");const mockMemori={memoriID:"test-memori-id",name:"Test Memori",culture:"en-US",coverURL:"",enableBoardOfExperts:!1},mockTenant={name:"test-tenant"},mockPushMessage=message=>{console.log("Push message:",message)},mockSimulateUserPrompt=(text,translatedText)=>{console.log("Simulate user prompt:",text,translatedText)},mockOnChangeUserMessage=userMessage=>{console.log("Change user message:",userMessage)},mockSendMessage=(msg,media)=>{console.log("Send message:",msg,media)},mockSetEnableFocusChatInput=enableFocusChatInput=>{console.log("Set enable focus chat input:",enableFocusChatInput)},mockStopAudio=()=>{console.log("Stop audio")},mockStartListening=()=>{console.log("Start listening")},mockStopListening=()=>{console.log("Stop listening")},mockSetSendOnEnter=sendOnEnter=>{console.log("Set send on enter:",sendOnEnter)},mockSetAttachmentsMenuOpen=attachmentsMenuOpen=>{console.log("Set attachments menu open:",attachmentsMenuOpen)},withArtifactProvider=Story=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_context_ArtifactContext__WEBPACK_IMPORTED_MODULE_1__.k,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Story,{})});withArtifactProvider.displayName="withArtifactProvider";const __WEBPACK_DEFAULT_EXPORT__={title:"Artifact System",component:_components_ArtifactHandler_ArtifactHandler__WEBPACK_IMPORTED_MODULE_2__.A,decorators:[withArtifactProvider],parameters:{layout:"fullscreen"}},htmlArtifact='<think>L\'utente mi chiede di generare una semplice pagina HTML. UserÃ² il sistema Artifact per creare una pagina HTML pulita e semplice, seguendo le linee guida fornite.\n\nDevo:\n1. Usare il formato corretto: <output class="memori-artifact" data-mimetype="html">\n2. Creare una pagina HTML completa con DOCTYPE\n3. Il tag </output> deve essere DOPO </html>\n4. Mantenerla semplice come richiesto\n5. Includere un po\' di stile per renderla gradevole ma non eccessiva</think>Ciao! Ti creo subito una pagina HTML semplice e pulita:\n\n<output class="memori-artifact" data-mimetype="html">\n<!DOCTYPE html>\n<html lang="it">\n<head>\n <meta charset="UTF-8">\n <meta name="viewport" content="width=device-width, initial-scale=1.0">\n <title>La mia pagina semplice</title>\n <style>\n body {\n font-family: Arial, sans-serif;\n max-width: 800px;\n margin: 0 auto;\n padding: 20px;\n line-height: 1.6;\n background-color: #f4f4f4;\n }\n \n .container {\n background: white;\n padding: 30px;\n border-radius: 8px;\n box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n }\n \n h1 {\n color: #333;\n text-align: center;\n }\n \n p {\n color: #666;\n margin-bottom: 15px;\n }\n \n .highlight {\n background-color: #e8f5e8;\n padding: 15px;\n border-left: 4px solid #4CAF50;\n margin: 20px 0;\n }\n </style>\n</head>\n<body>\n <div class="container">\n <h1>Benvenuto nella mia pagina!</h1>\n \n <p>Questa Ã¨ una pagina HTML semplice e pulita.</p>\n \n <p>Contiene alcuni elementi di base:</p>\n \n <ul>\n <li>Un titolo principale</li>\n <li>Paragrafi di testo</li>\n <li>Una lista</li>\n <li>Un po\' di stile CSS</li>\n </ul>\n \n <div class="highlight">\n <strong>Nota:</strong> Puoi modificare liberamente questo codice per personalizzare la tua pagina!\n </div>\n \n <p>Grazie per aver visitato la pagina! ðŸ˜Š</p>\n </div>\n</body>\n</html>\n</output>\n\nEcco una pagina HTML semplice con:\n- Struttura pulita e ben organizzata\n- CSS inline per uno styling leggero\n- Layout responsive centrato\n- Elementi di base: titoli, paragrafi, lista\n- Un tocco di colore con la sezione evidenziata\n\nPuoi vedere l\'anteprima nel drawer che si Ã¨ aperto e modificare il codice come preferisci!',cssArtifact='<output class="memori-artifact" data-mimetype="css">\n/* Modern CSS Grid Layout */\n.container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 20px;\n    padding: 20px;\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.card {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border-radius: 12px;\n    padding: 20px;\n    color: white;\n    box-shadow: 0 4px 20px rgba(0,0,0,0.1);\n    transition: transform 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 30px rgba(0,0,0,0.2);\n}\n\n.card h3 {\n    margin-top: 0;\n    font-size: 1.5em;\n}\n\n.card p {\n    line-height: 1.6;\n    opacity: 0.9;\n}\n\n@media (max-width: 768px) {\n    .container {\n        grid-template-columns: 1fr;\n        padding: 10px;\n    }\n}\n</output>',HTMLArtifact={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:`Here's a complete HTML page for your landing page:\n\n${htmlArtifact}\n\nThis page includes modern styling and an interactive button. You can customize the colors and layout as needed.`,fromUser:!1,timestamp:(new Date).toISOString()},{text:"Try the sanitizeText function",fromUser:!1,timestamp:(new Date).toISOString()},{text:(0,_helpers_sanitizer__WEBPACK_IMPORTED_MODULE_4__.j)(htmlArtifact),fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!0,showReasoning:!0})},MarkdownDocumentation={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:'I\'ve created comprehensive project documentation for you:\n\n<output class="memori-artifact" data-mimetype="markdown">\n# Project Documentation\n\n## Overview\nThis is a comprehensive guide for the project.\n\n## Features\n- **Easy to use**: Simple interface\n- **Fast**: Optimized performance\n- **Reliable**: Well tested\n\n## Getting Started\n1. Install dependencies\n2. Run the application\n3. Open your browser\n\n## Code Example\n```javascript\nfunction hello() {\n    console.log("Hello World!");\n}\n```\n\n## Conclusion\nThis project helps you build amazing applications.\n</output>\n\nThis includes all the essential sections for a project README with proper formatting and structure.',fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},CSSStyles={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:`I've created modern CSS styles for your project:\n\n${cssArtifact}\n\nThis includes responsive grid layouts, smooth animations, and contemporary styling.`,fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},JavaScriptApp={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:"I've built a complete Todo List application in JavaScript:\n\n<output class=\"memori-artifact\" data-mimetype=\"javascript\">\n// Interactive Todo List Application\nclass TodoApp {\n    constructor() {\n        this.todos = [];\n        this.init();\n    }\n\n    init() {\n        this.createHTML();\n        this.bindEvents();\n    }\n\n    createHTML() {\n        const app = document.getElementById('app');\n        app.innerHTML = `\n            <div class=\"todo-app\">\n                <h1>My Todo List</h1>\n                <div class=\"input-section\">\n                    <input type=\"text\" id=\"todoInput\" placeholder=\"Add a new todo...\">\n                    <button id=\"addBtn\">Add</button>\n                </div>\n                <ul id=\"todoList\"></ul>\n            </div>\n        `;\n    }\n\n    bindEvents() {\n        document.getElementById('addBtn').addEventListener('click', () => this.addTodo());\n        document.getElementById('todoInput').addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') this.addTodo();\n        });\n    }\n\n    addTodo() {\n        const input = document.getElementById('todoInput');\n        const text = input.value.trim();\n        \n        if (text) {\n            const todo = {\n                id: Date.now(),\n                text: text,\n                completed: false\n            };\n            \n            this.todos.push(todo);\n            this.renderTodos();\n            input.value = '';\n        }\n    }\n\n    toggleTodo(id) {\n        const todo = this.todos.find(t => t.id === id);\n        if (todo) {\n            todo.completed = !todo.completed;\n            this.renderTodos();\n        }\n    }\n\n    deleteTodo(id) {\n        this.todos = this.todos.filter(t => t.id !== id);\n        this.renderTodos();\n    }\n\n    renderTodos() {\n        const list = document.getElementById('todoList');\n        list.innerHTML = this.todos.map(todo => `\n            <li class=\"todo-item ${todo.completed ? 'completed' : ''}\">\n                <span onclick=\"app.toggleTodo(${todo.id})\">${todo.text}</span>\n                <button onclick=\"app.deleteTodo(${todo.id})\">Delete</button>\n            </li>\n        `).join('');\n    }\n}\n\n// Initialize the app\nconst app = new TodoApp();\n</output>\n\nThis includes full CRUD functionality with a clean class-based architecture.",fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},JSONConfiguration={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:'Here\'s a complete package.json configuration for your API project:\n\n<output class="memori-artifact" data-mimetype="json">\n{\n  "name": "user-profile-api",\n  "version": "1.0.0",\n  "description": "REST API for user profile management",\n  "main": "server.js",\n  "scripts": {\n    "start": "node server.js",\n    "dev": "nodemon server.js",\n    "test": "jest",\n    "build": "webpack --mode production"\n  },\n  "dependencies": {\n    "express": "^4.18.0",\n    "mongoose": "^6.0.0",\n    "bcryptjs": "^2.4.3",\n    "jsonwebtoken": "^8.5.1",\n    "cors": "^2.8.5",\n    "helmet": "^5.0.0",\n    "morgan": "^1.10.0",\n    "express-rate-limit": "^6.0.0"\n  },\n  "devDependencies": {\n    "nodemon": "^2.0.15",\n    "jest": "^27.5.1",\n    "supertest": "^6.2.2"\n  },\n  "engines": {\n    "node": ">=14.0.0"\n  },\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/example/user-profile-api.git"\n  },\n  "keywords": ["api", "express", "mongodb", "authentication", "rest"],\n  "author": "Your Name",\n  "license": "MIT"\n}\n</output>\n\nThis includes all necessary dependencies, scripts, and metadata for a production-ready Node.js API.',fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},MultipleArtifacts={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:`I'll create both the HTML structure and CSS styling for your dashboard:\n\n${htmlArtifact}\n\n${cssArtifact}\n\nThis combination gives you a complete, styled web page ready for deployment.`,fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},ConversationFlow={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:"Can you create a simple HTML page for me?",fromUser:!0,timestamp:new Date(Date.now()-3e5).toISOString()},{text:`Of course! Here's a complete HTML page with modern styling:\n\n${htmlArtifact}\n\nWould you like me to modify anything about the design or add more functionality?`,fromUser:!1,timestamp:new Date(Date.now()-24e4).toISOString()},{text:"Now can you create the CSS to make it look more modern?",fromUser:!0,timestamp:new Date(Date.now()-18e4).toISOString()},{text:`Here's enhanced CSS with modern design patterns:\n\n${cssArtifact}\n\nThis adds responsive grid layouts, smooth animations, and contemporary styling.`,fromUser:!1,timestamp:new Date(Date.now()-12e4).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})},NoArtifacts={args:{},render:()=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Chat_Chat__WEBPACK_IMPORTED_MODULE_3__.A,{memori:mockMemori,tenant:mockTenant,sessionID:"test-session",history:[{text:"Hello! How can I help you today?",fromUser:!1,timestamp:(new Date).toISOString()},{text:"I need help with my project planning",fromUser:!0,timestamp:(new Date).toISOString()},{text:"I'd be happy to help with project planning! What type of project are you working on? Are you looking for help with timeline management, resource allocation, task breakdown, or something else?",fromUser:!1,timestamp:(new Date).toISOString()}],pushMessage:mockPushMessage,simulateUserPrompt:mockSimulateUserPrompt,onChangeUserMessage:mockOnChangeUserMessage,sendMessage:mockSendMessage,setEnableFocusChatInput:mockSetEnableFocusChatInput,stopAudio:mockStopAudio,startListening:mockStartListening,stopListening:mockStopListening,setSendOnEnter:mockSetSendOnEnter,setAttachmentsMenuOpen:mockSetAttachmentsMenuOpen,showInputs:!1,isChatlogPanel:!1})};HTMLArtifact.parameters={...HTMLArtifact.parameters,docs:{...HTMLArtifact.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID=\"test-session\" history={[{\n    text: `Here's a complete HTML page for your landing page:\n\n${htmlArtifact}\n\nThis page includes modern styling and an interactive button. You can customize the colors and layout as needed.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }, {\n    text: 'Try the sanitizeText function',\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }, {\n    text: sanitizeText(htmlArtifact),\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={true} showReasoning={true} />\n}",...HTMLArtifact.parameters?.docs?.source}}},MarkdownDocumentation.parameters={...MarkdownDocumentation.parameters,docs:{...MarkdownDocumentation.parameters?.docs,source:{originalSource:'{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID="test-session" history={[{\n    text: `I\'ve created comprehensive project documentation for you:\n\n${markdownArtifact}\n\nThis includes all the essential sections for a project README with proper formatting and structure.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}',...MarkdownDocumentation.parameters?.docs?.source}}},CSSStyles.parameters={...CSSStyles.parameters,docs:{...CSSStyles.parameters?.docs,source:{originalSource:'{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID="test-session" history={[{\n    text: `I\'ve created modern CSS styles for your project:\n\n${cssArtifact}\n\nThis includes responsive grid layouts, smooth animations, and contemporary styling.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}',...CSSStyles.parameters?.docs?.source}}},JavaScriptApp.parameters={...JavaScriptApp.parameters,docs:{...JavaScriptApp.parameters?.docs,source:{originalSource:'{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID="test-session" history={[{\n    text: `I\'ve built a complete Todo List application in JavaScript:\n\n${javascriptArtifact}\n\nThis includes full CRUD functionality with a clean class-based architecture.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}',...JavaScriptApp.parameters?.docs?.source}}},JSONConfiguration.parameters={...JSONConfiguration.parameters,docs:{...JSONConfiguration.parameters?.docs,source:{originalSource:'{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID="test-session" history={[{\n    text: `Here\'s a complete package.json configuration for your API project:\n\n${jsonArtifact}\n\nThis includes all necessary dependencies, scripts, and metadata for a production-ready Node.js API.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}',...JSONConfiguration.parameters?.docs?.source}}},MultipleArtifacts.parameters={...MultipleArtifacts.parameters,docs:{...MultipleArtifacts.parameters?.docs,source:{originalSource:'{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID="test-session" history={[{\n    text: `I\'ll create both the HTML structure and CSS styling for your dashboard:\n\n${htmlArtifact}\n\n${cssArtifact}\n\nThis combination gives you a complete, styled web page ready for deployment.`,\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}',...MultipleArtifacts.parameters?.docs?.source}}},ConversationFlow.parameters={...ConversationFlow.parameters,docs:{...ConversationFlow.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID=\"test-session\" history={[{\n    text: 'Can you create a simple HTML page for me?',\n    fromUser: true,\n    timestamp: new Date(Date.now() - 300000).toISOString()\n  }, {\n    text: `Of course! Here's a complete HTML page with modern styling:\n\n${htmlArtifact}\n\nWould you like me to modify anything about the design or add more functionality?`,\n    fromUser: false,\n    timestamp: new Date(Date.now() - 240000).toISOString()\n  }, {\n    text: 'Now can you create the CSS to make it look more modern?',\n    fromUser: true,\n    timestamp: new Date(Date.now() - 180000).toISOString()\n  }, {\n    text: `Here's enhanced CSS with modern design patterns:\n\n${cssArtifact}\n\nThis adds responsive grid layouts, smooth animations, and contemporary styling.`,\n    fromUser: false,\n    timestamp: new Date(Date.now() - 120000).toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}",...ConversationFlow.parameters?.docs?.source}}},NoArtifacts.parameters={...NoArtifacts.parameters,docs:{...NoArtifacts.parameters?.docs,source:{originalSource:"{\n  args: {},\n  render: () => <Chat memori={mockMemori} tenant={mockTenant} sessionID=\"test-session\" history={[{\n    text: 'Hello! How can I help you today?',\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }, {\n    text: 'I need help with my project planning',\n    fromUser: true,\n    timestamp: new Date().toISOString()\n  }, {\n    text: \"I'd be happy to help with project planning! What type of project are you working on? Are you looking for help with timeline management, resource allocation, task breakdown, or something else?\",\n    fromUser: false,\n    timestamp: new Date().toISOString()\n  }]} pushMessage={mockPushMessage} simulateUserPrompt={mockSimulateUserPrompt} onChangeUserMessage={mockOnChangeUserMessage} sendMessage={mockSendMessage} setEnableFocusChatInput={mockSetEnableFocusChatInput} stopAudio={mockStopAudio} startListening={mockStartListening} stopListening={mockStopListening} setSendOnEnter={mockSetSendOnEnter} setAttachmentsMenuOpen={mockSetAttachmentsMenuOpen} showInputs={false} isChatlogPanel={false} />\n}",...NoArtifacts.parameters?.docs?.source}}};const __namedExportsOrder=["HTMLArtifact","MarkdownDocumentation","CSSStyles","JavaScriptApp","JSONConfiguration","MultipleArtifacts","ConversationFlow","NoArtifacts"]},"./src/components/icons/Loading.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var classnames__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/classnames/index.js"),classnames__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Loading=({className,title,loading=!0})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("svg",{...title?{}:{"aria-hidden":"true"},xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",focusable:"false",role:"img",className:classnames__WEBPACK_IMPORTED_MODULE_1___default()(className,{"memori-loading-icon":loading}),"aria-label":title,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)("path",{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"})});Loading.displayName="Loading";const __WEBPACK_DEFAULT_EXPORT__=Loading;try{Loading.displayName="Loading",Loading.__docgenInfo={description:"",displayName:"Loading",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},loading:{defaultValue:{value:"true"},description:"",name:"loading",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/icons/Loading.tsx#Loading"]={docgenInfo:Loading.__docgenInfo,name:"Loading",path:"src/components/icons/Loading.tsx#Loading"})}catch(__react_docgen_typescript_loader_error){}},"./src/components/ui/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var classnames__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/classnames/index.js"),classnames__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_1__),_icons_Loading__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/icons/Loading.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const Button=({primary=!1,outlined=!1,ghost=!1,padded=!0,shape="rounded",danger=!1,loading=!1,disabled=!1,block=!1,icon,className,title,id,htmlType,onClick,onMouseDown,onMouseUp,onMouseLeave,onTouchStart,onTouchEnd,children,isActive})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("button",{id,type:htmlType,onClick,onMouseDown,onMouseUp,onMouseLeave,onTouchStart,onTouchEnd,title,disabled:loading||disabled,className:classnames__WEBPACK_IMPORTED_MODULE_1___default()("memori-button",{"memori-button--primary":primary,"memori-button--outlined":outlined,"memori-button--ghost":ghost,"memori-button--square":"square"===shape,"memori-button--rounded":"rounded"===shape,"memori-button--circle":"circle"===shape,"memori-button--padded":padded,"memori-button--block":block,"memori-button--with-icon":(icon||loading)&&children,"memori-button--icon-only":(icon||loading)&&!children,"memori-button--danger":danger,"memori-button--loading":loading,"memori-button--active":isActive},className),children:[icon&&!loading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("span",{className:"memori-button--icon",children:icon}),loading&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("span",{className:"memori-button--icon loading-icon",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_icons_Loading__WEBPACK_IMPORTED_MODULE_2__.default,{loading:!0})}),children]});Button.displayName="Button";const __WEBPACK_DEFAULT_EXPORT__=Button;try{Button.displayName="Button",Button.__docgenInfo={description:"",displayName:"Button",props:{primary:{defaultValue:{value:"false"},description:"",name:"primary",required:!1,type:{name:"boolean"}},outlined:{defaultValue:{value:"false"},description:"",name:"outlined",required:!1,type:{name:"boolean"}},ghost:{defaultValue:{value:"false"},description:"",name:"ghost",required:!1,type:{name:"boolean"}},padded:{defaultValue:{value:"true"},description:"",name:"padded",required:!1,type:{name:"boolean"}},block:{defaultValue:{value:"false"},description:"",name:"block",required:!1,type:{name:"boolean"}},icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"ReactNode"}},shape:{defaultValue:{value:"rounded"},description:"",name:"shape",required:!1,type:{name:"enum",value:[{value:'"square"'},{value:'"rounded"'},{value:'"circle"'}]}},danger:{defaultValue:{value:"false"},description:"",name:"danger",required:!1,type:{name:"boolean"}},loading:{defaultValue:{value:"false"},description:"",name:"loading",required:!1,type:{name:"boolean"}},disabled:{defaultValue:{value:"false"},description:"",name:"disabled",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"",name:"id",required:!1,type:{name:"string"}},isActive:{defaultValue:null,description:"",name:"isActive",required:!1,type:{name:"boolean"}},htmlType:{defaultValue:null,description:"",name:"htmlType",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onMouseUp:{defaultValue:null,description:"",name:"onMouseUp",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!1,type:{name:"((event: MouseEvent<HTMLButtonElement, MouseEvent>) => void)"}},onTouchStart:{defaultValue:null,description:"",name:"onTouchStart",required:!1,type:{name:"((event: TouchEvent<HTMLButtonElement> | MouseEvent<Element, MouseEvent>) => void)"}},onTouchEnd:{defaultValue:null,description:"",name:"onTouchEnd",required:!1,type:{name:"((event: TouchEvent<HTMLButtonElement> | MouseEvent<Element, MouseEvent>) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ui/Button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"src/components/ui/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./src/helpers/sanitizer.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{j:()=>sanitizeText});var _utils__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/helpers/utils.ts");function sanitizeText(text){return(0,_utils__WEBPACK_IMPORTED_MODULE_0__.Zn)((0,_utils__WEBPACK_IMPORTED_MODULE_0__.eA)((0,_utils__WEBPACK_IMPORTED_MODULE_0__.o6)((0,_utils__WEBPACK_IMPORTED_MODULE_0__._e)((0,_utils__WEBPACK_IMPORTED_MODULE_0__.gI)((0,_utils__WEBPACK_IMPORTED_MODULE_0__.f9)(text))))))}}}]);