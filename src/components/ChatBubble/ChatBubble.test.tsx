import React from 'react';
import { render } from '@testing-library/react';
import ChatBubble from './ChatBubble';
import { memori, tenant, sessionID } from '../../mocks/data';

it('renders ChatBubble unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      message={{
        fromUser: false,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble with initial msg unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      message={{
        fromUser: false,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: true,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble with user msg unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble with msg generated by AI unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        generatedByAI: true,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble with msg from BoE expert unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={{
        ...memori,
        enableBoardOfExperts: true,
      }}
      tenant={tenant}
      sessionID={sessionID}
      apiUrl="https://backend.memori.ai"
      experts={[
        {
          expertID: '9b0a2913-d3d8-4e98-a49d-6e1c99479e1b',
          name: 'Expert name',
          description: 'Expert description',
          expertMemoriID: '9b0a2913-d3d8-4e98-a49d-6e1c99479e1b',
          expertBaseURL: 'https://engine.memori.ai',
        },
      ]}
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        generatedByAI: true,
        emitter: 'Expert name',
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble from user with avatar unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      user={{ avatarURL: 'https://picsum.photos/200' }}
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble from user with custom avatar unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      userAvatar="https://picsum.photos/200"
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble from user with avatar as react element unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      user={{ avatarURL: 'https://picsum.photos/200' }}
      userAvatar={<span>USER</span>}
      message={{
        fromUser: true,
        text: 'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
        initial: false,
        translatedText:
          'Proin libero ante, dignissim sit amet turpis a, pretium condimentum dolor.',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});

it('renders ChatBubble with markdown unchanged', () => {
  const { container } = render(
    <ChatBubble
      memori={memori}
      tenant={tenant}
      sessionID={sessionID}
      message={{
        fromUser: false,
        text: '## Test\n\nEcco tutte le possibili personalizzazioni che puoi applicare:\n\n- **Colletto**:\n - Girocollo\n - Scollo a V\n\n- **Manica**:\n - Manica Lunga\n - Manica Corta\n\n- **Taglia**:\n - XS\n - S\n - M\n - L\n - XL\n - XXL\n - 3XL\n\n- **Posizione Stampa**:\n - Fronte Petto\n - Retro Schiena\n - Fronte DX\n - Fronte SX\n\n- **Generazione Immagine**:\n - Prompt generazione immagine\n\nSeleziona le personalizzazioni che desideri applicare.\n\n[Vedi altro](https://memori.ai)',
        initial: false,
        translatedText:
          '## Test\n\nEcco tutte le possibili personalizzazioni che puoi applicare:\n\n- **Colletto**:\n - Girocollo\n - Scollo a V\n\n- **Manica**:\n - Manica Lunga\n - Manica Corta\n\n- **Taglia**:\n - XS\n - S\n - M\n - L\n - XL\n - XXL\n - 3XL\n\n- **Posizione Stampa**:\n - Fronte Petto\n - Retro Schiena\n - Fronte DX\n - Fronte SX\n\n- **Generazione Immagine**:\n - Prompt generazione immagine\n\nSeleziona le personalizzazioni che desideri applicare.\n\n[Vedi altro](https://memori.ai)',
      }}
    />
  );
  expect(container).toMatchSnapshot();
});
