const errors = {
  TENANT_NOT_FOUND: -1,
  TENANT_REGISTRATION_DISABLED: -2,
  TENANT_MISSING_NAME: -3,
  TENANT_MAX_USERS_REACHED: -4,
  TENANT_MAX_ADMINS_REACHED: -5,

  USER_NOT_CONFIRMED: -11,
  USER_NOT_FOUND: -12,
  USER_OR_PASSWORD_INVALID: -13,
  USER_MUST_CHANGE_PASSWORD: -14,
  USER_MUST_ENTER_VERIFICATION_CODE: -15,

  USER_MISSING_TENANT: -21,
  USER_MISSING_NAME: -22,
  USER_MISSING_PASSWORD: -23,
  USER_MISSING_EMAIL: -24,
  USER_MISSING_VERIFICATION_CODE: -25,
  USER_NAME_ALREADY_USED: -26,
  USER_PASSWORD_NOT_CONFORMING_TO_POLICY: -27,
  USER_EMAIL_ALREADY_USED: -28,
  USER_EMAIL_INVALID: -29,
  USER_VERIFICATION_CODE_INVALID: -30,
  USER_MISSING_NAME_OR_EMAIL: -31,
  USER_NAME_INVALID: -32,
  USER_HAS_ONE_OR_MORE_MEMORI: -33,
  USER_MISSING_NEW_PASSWORD: -34,
  USER_CANT_CREATE_MEMORI: -35,
  USER_MAX_MEMORI_REACHED: -36,
  USER_CANT_EDIT_INTEGRATIONS: -37,

  MEMORI_NOT_FOUND: -51,
  MEMORI_NOT_ACCESSIBLE: -52,
  MEMORI_ONLY_OWNER_CAN_CHANGE_GIVER_TAG_AND_PIN: -53,

  SESSION_NOT_FOUND: -101,
  SESSION_IS_NOT_ADMINISTRATIVE: -102,

  MEMORI_MISSING_CONFIGURATION: -201,
  MEMORI_CONFIGURATION_NOT_FOUND: -202,
  MEMORI_INVALID_PRIVACY_TYPE: -203,
  MEMORI_MISSING_PASSWORD: -204,
  MEMORI_INVALID_TOTAL_NUMBER_OF_RECOVERY_TOKENS: -205,
  MEMORI_INVALID_MINIMUM_NUMBER_OF_RECOVERY_TOKENS: -206,
  MEMORI_INVALID_VOICE_TYPE: -207,
  MEMORI_MISSING_NAME: -208,
  MEMORI_MISSING_PASSWORD_OR_RECOVERY_TOKENS: -209,
  MEMORI_INVALID_ID: -210,
  MEMORI_NAME_ALREADY_USED: -211,
  MEMORI_INVALID_PIN: -212,
  MEMORI_GIVER_TAG_PIN_CHANGE_REQUIRES_SEPARATE_OPERATION: -213,
  MEMORI_NO_PASSWORD_WHEN_PUBLIC: -214,

  MEMORI_TRANSFER_MISSING_DESTINATION_USER: -231,
  MEMORI_TRANSFER_INVALID_DESTINATION_USER_ID: -232,
  MEMORI_TRANSFER_DESTINATION_USER_DATA_INCONSISTENT: -233,
  MEMORI_TRANSFER_NOTHING_TO_DO: -234,

  MEMORI_CONFIGURATION_CANT_BE_CHANGED: -251,
  MEMORI_MISSING_NEW_PASSWORD: -252,

  MEMORI_SESSIONS_INVALID_DATE_FROM_FORMAT: -261,
  MEMORI_SESSIONS_INVALID_DATE_TO_FORMAT: -262,

  INTEGRATION_NOT_FOUND: -301,

  INTEGRATION_INVALID_TYPE: -401,
  INTEGRATION_ALREADY_EXISTS: -402,
  INTEGRATION_MEMORI_IS_NOT_PUBLIC: -403,
  INTEGRATION_MISSING_INVOCATION_TEXT: -404,
  INTEGRATION_MISSING_DEVICE_EMAILS: -405,
  INTEGRATION_MEMORI_IS_EMPTY: -406,
  INTEGRATION_MISSING_PRIVACY_POLICY: -407,
  INTEGRATION_MISSING_CATEGORY: -408,
  INTEGRATION_MISSING_DESCRIPTION: -409,
  INTEGRATION_INVALID_INVOCATION_TEXT: -410,
  INTEGRATION_GOOGLE_NO_MORE_AVAILABLE: -411,

  UPLOAD_REQUIRES_MULTIPART_ENCODING: -501,
  UPLOAD_MISSING_CONTENT_TYPE_BOUNDARY: -502,
  UPLOAD_MAX_LENGTH_EXCEEDED: -503,
  UPLOAD_FILE_IS_EMPTY: -504,
  UPLOAD_INVALID_FILE_TYPE_OR_SIGNATURE: -505,
  UPLOAD_MISSING_FILE_NAME: -506,
  UPLOAD_INVALID_MEMORY_ID: -507,
  UPLOAD_MISSING_FILE_CONTENT: -508,

  ASSET_NOT_FOUND: -601,
  ASSET_NOT_ACCESSIBLE: -602,
  ASSET_MISSING_SESSION_ID: -603,
  ASSET_INVALID_FILE_NAME: -604,

  INVITATION_NOT_FOUND: -701,
  INVITATION_NOT_ACCESSIBLE: -702,
  INVITATION_ALREADY_ACCEPTED: -703,
  INVITATION_ALREADY_REJECTED: -704,
  INVITATION_MISSING_DESTINATION_EMAIL: -705,
  INVITATION_DESTINATION_EMAIL_INVALID: -706,
  INVITATION_MISSING_TAG: -707,
  INVITATION_MISSING_PIN: -708,
  INVITATION_INVALID_PIN: -709,
  INVITATION_INVALID_TYPE: -710,
  INVITATION_MISSING_DESTINATION_NAME: -711,
  INVITATION_TAG_PIN_CANT_BE_CHANGED: -712,
  INVITATION_CANT_BE_CHANGED: -713,

  ACTIONLOG_INVALID_USER_ID: -801,
  ACTIONLOG_INVALID_DATE_FROM_FORMAT: -802,
  ACTIONLOG_INVALID_DATE_TO_FORMAT: -803,
  ACTIONLOG_INVALID_MEMORI_ID: -804,

  CONSUMPTIONLOG_INVALID_TYPE: -901,
  CONSUMPTIONLOG_INVALID_DATE_FROM_FORMAT: -902,
  CONSUMPTIONLOG_INVALID_DATE_TO_FORMAT: -903,
  CONSUMPTIONLOG_INVALID_USER_ID: -904,
  CONSUMPTIONLOG_INVALID_MEMORI_ID: -905,
};

export const BACKEND_ERRORS = new Map<number, string>(
  Object.entries(errors).map(([key, value]) => [value, key])
);

export const getErrori18nKey = (errorCode: number) => {
  if (!errorCode) return 'error.generic';

  if (errorCode === 401 || errorCode === 403) {
    return 'error.unauthorized';
  } else if (errorCode === 404) {
    return 'error.notFound';
  } else if (errorCode === 422) {
    return 'error.unprocessableEntity';
  } else if (errorCode === 500) {
    return 'internal server error';
  }

  let error = BACKEND_ERRORS.get(errorCode);
  if (!error) {
    return 'error.generic';
  } else {
    return `errors.${error}`;
  }
};
